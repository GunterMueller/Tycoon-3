class HttpAuthenticatedResource
super HttpResourceDecorator
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

   A Resource-Decorator that performs authentication
   via protection realms.

   If the request is not authenticated, the AuthenticatedResource itself
   is the result of pathLookup and will deny any request.

   Matthias Ernst 27.1.97
*)
meta SimpleConcreteClass(HttpAuthenticatedResource)
{
realm :ProtectionRealm

pathLookup(request :HttpRequest, arcs :List(String)) :HttpResource
  (* *)
{
    if( realm.authenticates(request) then: {
      super.pathLookup(request, arcs)
    } else: {
      self
    })
  }

get(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

put(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

post(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

options(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

delete(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

link(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

unlink(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

extended(request :HttpRequest) :HttpResponse
  (* *)
{ notAuthorized(request) }

private

notAuthorized(request :HttpRequest) :HttpResponse
  (* *)
{
    r ::= newResponse(HttpResponse.UNAUTHORIZED)
    r.WWWAuthenticates := realm.challenges(request.url)
    r.body = InputReader.new(
      "You are not authorized to access this esource.".reader
    )
    r
  }

}
