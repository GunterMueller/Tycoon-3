class HttpContainerResource
super HttpResource, MutableKeyedContainer(String, HttpResource)
(**)
meta AbstractClass
{
add(resource :HttpResource) :Void
  (* *)
deferred

remove(resource :HttpResource) :Void
  (* *)
deferred

replace(olde :HttpResource, new :HttpResource) :Void
  (* *)
deferred

reindex :Void
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 forget any automatically indexed child resources
     re-index at subsequent requests.
     But keep directory resources, propagate reindex down
     the directory tree.
  *)
{
  do(fun(child :HttpResource) {
    child.reindex
  })
}

pathLookup(request :HttpRequest, arcs :List(String)) :HttpResource
  (* *)
{
  if( arcs.isEmpty then: { result :HttpResource := self } else: {
    name ::= arcs.head
    lookup(name,
      fun(resource :HttpResource) {
        resource.pathLookup(request, arcs.tail)
	},
      fun() {
        nil
	}
     )
   })  
}

lookupDirectory(arcs :List(String)) :HttpDirectoryResource
  (* answer the directory resource with a path starting at
     the receiver and following the given arcs, or nil if not
     found or no directory.
     Purpose: simplify server configuration.
  *)
{
  if( arcs.isEmpty
   then: { asDirectoryResource }  
   else: {
    name ::= arcs.head
    lookup(name,
      fun(resource :HttpResource) {
        resource.lookupDirectory(arcs.tail)
	},
      fun() {
        nil
	}
     )
   })  
}

newResource(dir :Directory, name :String) :HttpResource
  (* create a new resource with the given name in the given directory.
     default is to ask the receiver's parent, or, if there is no parent resource,
     to delegate the task to the MimeFactory.
  *)
{
   if( parent.isNotNil then: { parent.newResource(dir, name) } else: {
     MimeFactory.instance.newResource(dir, name)
   })
}

private

}
