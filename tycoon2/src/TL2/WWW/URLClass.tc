class URLClass
  super WWW, ConcreteClass(URL)
  metaclass MetaClass

public methods

  fromString(s :String) :URL
  {
    let url = _new,
    url._fromString(s),
    url
  }

  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 note that the discussion around arcs/segments somehow applies here, too:
     the parameter here is 'segments' so that you can get a trailing slash with
     a void segment at the end of the list: List.with4("a", "b", "c", "") => "a/b/c/"
  *)
  
  new8(scheme :String,
       host :String,
       port :Int,
       isAbsolute :Bool,
       segments :List(String),
       parameters :Dictionary(String, List(String)),
       query :String,
       fragment :String) :URL
  {
    let url = _new,
    url._init8(scheme, host, port, isAbsolute, segments, parameters, query, fragment),

    url
  }


       
  inContext(relative :URL, context :URL) :URL
    (* require context.isAbsolute ## WHY ? *)
  {
    (* RFC 1808, sec 4 *)

    (* STEP 1 *)
    context.asString = "" ? { relative } : {

    (* STEP 2.a *)
    relative.asString = "" ? { context } : {

    (* STEP 2.b *)
    relative.scheme != nil ? { relative } : {

    (* STEP 3.c *)
    let var scheme = context.scheme,

    let var host   = relative.host,
    let var port   = relative.port,
    let var isAbsolute = relative.isAbsolute,
    let var segments   = relative.segments,
    let var parameters = relative.parameters,
    let var query  = relative.query,
    let var fragment = relative.fragment,

    (* STEP 3 *)
    host = nil ? fun() :Void {
      host := context.host,
      port := context.port,

      (* STEP 4 *)
      relative.isRelative ? {
        isAbsolute := context.isAbsolute,
	(* STEP 5 *)
	segments.size = 0 ? {
	  segments := context.segments,

	  (* STEP 5.a *)
	  parameters = nil ? {
	    parameters := context.parameters,

	    (* STEP 5.b *)
	    query = nil ? {
	      query := context.query
	    }
	  }
	} :
	(* STEP 6 *)
	{
	  let newSegments = GapArray(:String).new(10),
	  newSegments.addAll(context.segments),

	  newSegments.size > 0 ? { newSegments.removeLast },

	  newSegments.addAll(segments),

	  let var index = 0,
	  while({ index < newSegments.size }, {
	    (* STEP 6.a/b *)
	    newSegments[index] = "." ? fun() :Void {
	      index = newSegments.size-1 ? {
		newSegments[index] := ""
	      } : {
		newSegments.removeKey(index)
	      }
	    } : {

	    (* STEP 6.c/d *)
	    newSegments[index] = ".." &&
		    { index > 0 } &&
		    { newSegments[index-1] != ".." } &&
		    { index != 1 || {newSegments[0] != "" }} ? fun() :Void {
	      index := index-1,
	      newSegments.removeKey(index),
	      index = newSegments.size-1 ? {
		newSegments[index] := ""
	      } : {
		newSegments.removeKey(index)
	      }
	    } : {

	    index := index + 1

	    }}
	  }),

	  segments := List.fromReader(newSegments.reader)
	}
      }
    },
    (* STEP 7 *)

    URL.new8(scheme, host, port, isAbsolute, segments, parameters, query, fragment)
    }
    }
    }
  }


  (*
    (* URL encoding/decoding
       all these functions raise URLError if called with an illegally encoded value
    *)

    (* decode URL encoded string *)
    decode(encoded :String) :String

    (* decode Query string --- like 'decode' but translates '+' to ' ' *)
    decodeQuery(query :String) :String

    (* decode parameters / form fields in query *)
    decodeParameters(param :String) :Dictionary(String, String)
    decodeMultiParameters(param :String) :Dictionary(String, List(String))
    
    decodeFormFields(query :String) :Dictionary(String, String)
    decodeMultiFormFields(query :String) :Dictionary(String, List(String))

    (* vice versa *)
    encode(plain :String) :String
    encodeQuery(plainQuery :String) :String

    encodeParameters(plainParameters :Dictionary(String, String)) :String
    encodeMultiParameters(plainParameters :Dictionary(String, List(String))) :String
    
    encodeFormFields(plainFormFields :Dictionary(String, String)) :String
    encodeMultiFormFields(plainFormFields :Dictionary(String, List(String))) :String
  *)

  decode(encoded :String) :String
  {
    _decodeString(encoded, false)
  }

  decodeQuery(query :String) :String
  {
    _decodeString(query, true)
  }

  decodeParameters(param :String) :Dictionary(String, String)
  {
    nameValue(parseParameters(param))
  }

  decodeMultiParameters(param :String) :Dictionary(String, List(String))
  {
    multiNameValue(parseParameters(param))
  }
  
  decodeFormFields(query :String) :Dictionary(String, String)
  {
    nameValue(parseFormFields(query))
  }
  
  decodeMultiFormFields(query :String) :Dictionary(String, List(String))
  {
    multiNameValue(parseFormFields(query))
  }

  
  (* public for HtmlFormProcessor: *)
  parseFormFields(formFields :String) :List(Pair(String, String))
  {
    parseNameValue(formFields, '&', false)
  }

  (* public for HtmlFormProcessor: *)
  nameValue(nameValue :List(Pair(String, String))) :Dictionary(String, String)
  {
    let result = Dictionary.new,  

    nameValue.do(fun(p :Pair(String, String)) {
      result[p.first] := p.second
    }),

    result
  }

  (* public for HtmlFormProcessor: *)
  multiNameValue(
     nameValue :List(Pair(String, String))) :Dictionary(String, List(String))
  {
    let result = Dictionary(:String, :List(String)).new,

    nameValue.do(fun(p :Pair(String, String)) {
      result.includesKey(p.first) ? {
        result[p.first] := List.cons(p.second, result[p.first])
      } : {
        result[p.first] := List.with1(p.second)
      }
    }),

    result
  }

  (* vice versa *)
  encode(plain :String) :String
  {
    _encodeString(plain, false)
  }
  
  encodeQuery(plainQuery :String) :String
  {
    _encodeString(plainQuery, true)
  }
  
  encodeParameters(plainParameters :Dictionary(String, String)) :String
  {
    encodeNameValue(plainParameters, ';', true, fun(s :String) { encode(s) })
  }

  encodeMultiParameters(plainParameters :Dictionary(String, List(String))) :String
  {
    encodeMultiNameValue(plainParameters, ';', true, fun(s :String) { encode(s) })
  }

  encodeFormFields(plainFormFields :Dictionary(String, String)) :String
  {
    encodeNameValue(plainFormFields, '&', false, fun(s :String) { encodeQuery(s) })
  }

  encodeMultiFormFields(plainFormFields :Dictionary(String, List(String))) :String
  {
    encodeMultiNameValue(plainFormFields, '&', false, fun(s :String) { encodeQuery(s) })
  }

private methods

  (* Character Encoding *)
  _encodeString(s :String, isQuery :Bool) :String
  {
    let result = GapString.new(0),
    s.do(fun(c :Char) {
      result.addSequence(_encode(c, isQuery))
    }),

    result.asString
  }

  _encode(c :Char, isQuery :Bool) :String
  {
    let unsafe = "<>\"#%{}|\\^~[]`", (* space is handled before *)
    let reserved = ";/?:@=&",

    (* specialty *)
    c = ' ' ? {
      isQuery ? { "+" } : { "%20" }
    } : {
    c <= ' ' || { c >= '\127' } ||
    { unsafe.includes(c) } || { reserved.includes(c) } ||
    { isQuery & c = '+' } ? {
      let code = c.asInt,

      let major = "0123456789ABCDEF"[code / 16],
      let minor = "0123456789ABCDEF"[code % 16],

      String.with3('%', major, minor)
    } : {
      String.with1(c)
    }}
  }

  _decodeString(s :String, isQuery :Bool) :String
  {
    let result = GapString.new(0),
    let r = s.reader,

    let var c :Char = nil,

    while({
      c := r.read,
      c != nil
    }, {
      (isQuery & c='+') ? { result.add(' ') } : {
      c = '%' ? {
	let majorChar = r.read,
	let minorChar = r.read,

	majorChar = nil ? {
	  result.add('%')
        } : {

        minorChar = nil ? {
 	  result.add('%'), result.add(majorChar)
	} : {

        let var major :Int = nil,
	majorChar.isDigit           ? fun() :Void { major := majorChar.asInt - '0'.asInt } : {
	majorChar.between('a', 'f') ? fun() :Void { major := majorChar.asInt - 'a'.asInt + 10 } : {
	majorChar.between('A', 'F') ? fun() :Void { major := majorChar.asInt - 'A'.asInt + 10 } } },

	let var minor :Int = nil,
	minorChar.isDigit           ? fun() :Void { minor := minorChar.asInt - '0'.asInt } : {
	minorChar.between('a', 'f') ? fun() :Void { minor := minorChar.asInt - 'a'.asInt + 10 } : {
	minorChar.between('A', 'F') ? fun() :Void { minor := minorChar.asInt - 'A'.asInt + 10 } } },

	major.isNil || { minor.isNil } ? {
	  result.add('%'), result.add(majorChar), result.add(minorChar)
	} : {
	  result.add((major*16 + minor).asChar)
	}
      }}} : {
	result.add(c)
      }}
    }),

    result.asString
  }

  parseParameters(parameters :String) :List(Pair(String, String))
  {
    parseNameValue(parameters, ';', true)
  }

  parseNameValue(nameValue :String, delim :Char, leads :Bool) :List(Pair(String, String))
  {
    let result :List(Pair(String, String)) = EmptyList.new,
  
    let var index = leads ? { 0 } : { -1 }, (* pointing to delimiter *)
    while({index.isNotNil}, {
      index := index + 1, (* skip delim *)
      let newIndex = nameValue.locateChar1(delim, index),

      newIndex.isNil ? { (* last parameter *)
	let equal = nameValue.locateChar1('=', index),
	equal.isNil ? {
	  result := List.cons(Pair.new(nameValue.subString(index, nameValue.size-index), nil), result)
	} : {
	  result := List.cons(Pair.new(nameValue.subString(index, equal-index), nameValue.subString(equal+1, nameValue.size-equal-1)), result)
	}
      } : {
	let equal = nameValue.locateChar1('=', index),
	equal.isNil || { equal > newIndex } ? {
	  result := List.cons(Pair.new(nameValue.subString(index, newIndex-index), nil), result)
	} : {
	  result := List.cons(Pair.new(nameValue.subString(index, equal-index), nameValue.subString(equal+1, newIndex-equal-1)), result)
	}
      },

      index := newIndex
    }),

    result
  }

  encodeNameValue(nameValue :Dictionary(String, String), delim :Char, leads :Bool, encoder :Fun1(String, String)) :String
  {
    let result = GapString.new(10),
    leads ? { result.add(delim) },

    nameValue.keysAndElementsDo(fun(name :String, value :String) {
      result.addSequence(encoder[name]),
      value.isNotNil ? {
        result.add('='),
        result.addSequence(encoder[value])
      },
      result.add(delim)
    }),

    result.removeLast, (* delimiter *)
    result.asString
  }

  encodeMultiNameValue(nameValue :Dictionary(String, List(String)), delim :Char, leads :Bool, encoder :Fun1(String, String)) :String
  {
    let result = GapString.new(10),
    leads ? { result.add(delim) },

    nameValue.keysAndElementsDo(fun(name :String, value :List(String)) {
      value.do(fun(v :String) {
	result.addSequence(encoder[name]),
	v.isNotNil ? {
	  result.add('='),
	  result.addSequence(encoder[v])
	},
	result.add(delim)
      })
    }),

    result.removeLast, (* delimiter *)
    result.asString
  }

;

