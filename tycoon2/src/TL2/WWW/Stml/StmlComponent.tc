class StmlComponent
super StructurePrintingMixin, Stml
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
position :SgmlPos

isLeaf	  :Bool
  (* *)
{ false }

asLeaf	  :StmlLeaf
  (* *)
{ nil }

isArg	  :Bool
  (* *)
{ false }

asArg	  :StmlArg
  (* *)
{ nil }

isElseIf  :Bool
  (* *)
{ false }

asElseIf  :StmlElseIf
  (* *)
{ nil }

isElse    :Bool
  (* *)
{ false }

asElse    :StmlElse
  (* *)
{ nil }

isStml    :Bool
  (* *)
{ false }

asStml    :StmlStml
  (* *)
{ nil }

isComment :Bool
  (* *)
{ false }

asComment :StmlComment
  (* *)
{ nil }

computeTypeInSequence( bindings :StmlBindings,
		       errorLog :ErrorLog,
		       computeRest :Fun(:StmlBindings):StmlType) :StmlType
  (* compute your type, possibly extending the bindings
      for the rest of the sequence. On error, emit an error on errorLog and
      return StmlWrongType. *)
deferred

compileAsString( out :StmlASTOutput ) :Void
  (* *)
deferred

compileAsValue( out :StmlASTWriter ) :Void
  (* *)
deferred

printOnGenerator(out :SgmlGenerator) :Void
  (* *)
{ printOn(out) }

}
