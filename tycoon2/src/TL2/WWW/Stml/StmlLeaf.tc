class StmlLeaf
super SimpleTypingMixin, StmlComponent
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StmlLeafClass()

{
data :String

isLeaf :Bool
  (* *)
{ true }

asLeaf :StmlLeaf
  (* *)
{ self }

computeType(:StmlBindings, :ErrorLog) :StmlType
  (* *)
{ if( data.all(fun(ch :Char){ ch.isSpace })
  then: { StmlWhiteStringType.new(position) }
  else: { StmlStringType.new(position) })
}

printOn(out :Output) :Void
  (* *)
{ out.writeString(data) }

compileAsString( out :StmlASTOutput ) :Void
  (* *)
{ out.entityOutput.writeString( data )
}

compileAsValue( out :StmlASTWriter ) :Void
  (* *)
{ ; if there are non-blank characters in data, this expression has string type, so
;     putting it in a value context should create a type error.
;     If we get here, we can be sure that context is "string" 
  assert({ data.all(fun(ch :Char){ ch.isSpace }) })
  ; nop 
}

}
