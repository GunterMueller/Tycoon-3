class StmlResource(Application <:StmlApplication(Application))
super Stml, HttpFileResource
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StmlResourceClass(Application )

{
application :Application
  (* *)
{ _application }

validate :Void
  (* validate any cached information. default: do nothing *)
{
  if( _timeStamp < _file.lastModified then: {
    _timeStamp := _file.lastModified
    _errorLog.reset
    _generator := _compile
  })
}

get(request :HttpRequest) :HttpResponse
  (* *)
{
  if( _generator.isNotNil then: {
    try({
      processor ::= _generator[]
      response ::= newResponse(HttpResponse.OK)
      response.withOutput(processor.contentType, fun(out :Output) {
	processor.response := response
	processor.request := request
        processor.out := processor.decorateOutput(out)
        processor.process
      })
      processor.response
    } else: fun(e:Exception) {
      if(e."class" = StmlJumpException then: {
        e ::= _typeCast(e, :StmlJumpException)

	e.request.setContext(request.url)
	;; find the resource for this URL (normally the server/s job)
	root :HttpResource := self
	while({root.parent.isNotNil} do: {
	  root := root.parent
	})
	destinationResource ::= root.pathLookup(e.request, e.request.url.arcs)
	if( destinationResource.isNotNil then: {
	  destinationResource.process(e.request)
	} else: {
	  response ::= newResponse(HttpResponse.INTERNAL_SERVER_ERROR)
	  response.withHtmlGenerator(fun(out :HtmlGenerator) {
	    out.h1({ out.writeString("Jump destination not found") })
	    out << "Jump source: " << request.url.asString << "\n"
	    out.br
	    out << "Jump destination: " << e.request.url.asString << " ("<<e.request.uri<<")\n"
	    out.br
	  })
	  response
	})
      } else: {
        e.raise
      })
    })
  } else: {
    response ::= newResponse(HttpResponse.INTERNAL_SERVER_ERROR)
    response.withHtmlGenerator(fun(out :HtmlGenerator) {
      out.h1({ out.writeString("Error compiling "+_file.path) })
      _errorLog.errorsDo(fun(pos :SourcePos, degree :String, message :String) {
	pos.printOn(out)
	out.writeString(": ")
	out.em({ out.writeString(degree) })
	out.writeString(": ")
	out.pre({ out.writeString(message) })
      })
    })
    response
  })
}

private

_timeStamp :Long

_generator :Fun():StmlProcessor(Application)

_application :Application

_errorLog :StoredErrorLog

_init :Void
  (* *)
{
  super._init
  _timeStamp := Long.MIN_VALUE
  _errorLog := StoredErrorLog.new
  self
}

_compile :Fun():StmlProcessor(Application)
  (* we got out of sync. re-compile Stml. *)
{
  application.compiler.compile(file.path, self, _errorLog)
}

_modified :Void
  (* *)
{
  _timeStamp := Long.MIN_VALUE
}

}
