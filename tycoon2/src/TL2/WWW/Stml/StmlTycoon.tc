class StmlTycoon
super SimpleTypingMixin, StmlComponent
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StmlTycoonClass
{
contents :StmlTycoonSource

computeType(bindings :StmlBindings, errorLog :ErrorLog) :StmlType
  (* *)
{  ; the tycoon code expects to see the variable "out" 
  StmlStringType.new(position)
}

compileAsString( out :StmlASTOutput ) :Void
  (* *)
{
  b ::= contents.compileToBlock(out.context)
  emitBody(b, out)
}

compileAsValue( out :StmlASTWriter ) :Void
  (* *)
{ ; this expression has string type, so putting it in a value context should
;     create a type error.  If we get here, we can be sure that context is "string" 
  assert({ false }) }

emitBody(body :TL2BlockValue, out :StmlASTOutput) :Void
  (* unwrap let expressions *)
{
  values ::= body.values
  if( !values.isEmpty
  then: { last ::= values.head
      values.tail.do(fun(v :TL2Value) {
        out.tycoonExpression(last)
        last := v
      })
      if( last.isLet
      then: { last ::= last.asLet
	  out.emitLet(last.pos, last.ide.name, last.ide.type, last.value)
	  body ::= last.body
	  if( body.isBlock
	  then: { emitBody(body.asBlock, out) }
	  else: { out.tycoonExpression(body) }) }
      else: { out.tycoonExpression(last) }) })
}

}
