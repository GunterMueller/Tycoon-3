class StmlSequence
super StructurePrintingMixin, Stml
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StmlSequenceClass
{
position :SgmlPos

components :Array(StmlComponent)

type :StmlType

computeSequenceType(bindings :StmlBindings, errorLog :ErrorLog, wantContext :Bool) :StmlType
  (* *)
{
  ; tycoon.stdout.writeln("[[" + printString), 

  type :=
    computeComponentTypes(bindings, components.reader, errorLog,
      fun(bindings :StmlBindings) {
	StmlBottomType.new(position)
      })

  if( wantContext
  then: { if( type.isStringContext &&  !type.equalWrongType(nil) 
      then: { type := StmlStringType.new(type.position) }) })

  ; tycoon.stdout.writeln("]]: " + type.printString), 

  type
}

computeComponentTypes( bindings :StmlBindings,
		       r :Reader(StmlComponent),
		       errorLog :ErrorLog,
		       computeRest :Fun(:StmlBindings):StmlType) :StmlType
  (* prolog style loop over the components *)
{ component ::= r.read
  if( component.isNil
  then: { computeRest[bindings] }
  else: { component.computeTypeInSequence(
        bindings,
	errorLog,
	fun(bindings1 :StmlBindings) {
	  computeComponentTypes(bindings1, r, errorLog, computeRest)
	}) })
}

compileToValue(context :StmlContext) :TL2Value
  (* *)
{
  if( type.isStringContext then: {
    out ::= StmlASTOutput.new(context)
    components.do(fun(c:StmlComponent) {
      c.compileAsString(out)
    })
    if( out.isOnlyString then: {
      v :TL2Value :=
	TL2LiteralValue.new(position, out.getString)
    } else: {
      body ::= out.finish
      body.pos := position
      toStringExpression(body)
    })
  } else: {
    compileInValueContext(context)
  })
}

compileInStringContext(context :StmlContext) :TL2BlockValue
  (* *)
{
  out ::= StmlASTOutput.new(context)
  components.do(fun(c:StmlComponent) {
    c.compileAsString(out)
  })
  b ::= out.finish
  b.pos := position
  b
}

compileInValueContext(context :StmlContext) :TL2BlockValue
  (* *)
{
  out ::= StmlASTWriter.new(context)
  components.do(fun(c:StmlComponent) {
    c.compileAsValue(out)
  })
  b ::= out.finish
  b.pos := position
  b
}

private

toStringExpression(body :TL2BlockValue) :TL2Value
  (* *)
{
  result :TL2Value := nil
  ; check for "{ out.writeString(<result>) }" 
  if( body.values.size = 1 then: {
    sendValue ::= body.values[0].asSend
    if( sendValue.isNotNil
        && sendValue.selector = "writeString"
        && sendValue.args.size = 1
	&& ( receiver ::= sendValue.receiver.asIde   ; ! before scoping - otherwise self.out 
	     receiver.isNotNil
	     && receiver.ide.name = "out") then: {
      sendValue.args[0].argumentCase(
	fun(v :TL2Value) { result := v },
	fun(:TL2Type) {})
    })
  })
  if( result.isNil then: {
      ; self.__stml_toString({ ... }) 
      receiver ::=
        TL2IdeValue.new(TL2ValueIde.newRef(position, "self"))
      result :=
        TL2SendValue.new(position, receiver, Symbol.new("__stml_toString"),
          List.with1(
	    TL2CompiledFun.new(position, #"[]", EmptyList.new, nil, body)))
  })
  result
}

}
