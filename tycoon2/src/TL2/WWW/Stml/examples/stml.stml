<!-- do not expect this document to work.
     It was some kind of specification for what Stmls were supposed to do. -->
<!doctype stml system>
<stml processor='StmlProcessor'>
  
<html>

<title>
SGML-basierte Programmierung dynamischer Seiten
</title>

<body>

Eine Variable definieren, inkl. Initialisierung:

  <define name=x>
    <b>Dies ist fetter Text als Wert</b>
  </define>

  <define name=y>
   Ein <a href="http://www.higher-order.de">Anker</a>
   als Wert, plus dieser Text drumrum. 
  </define>

Eine Variable referenzieren:
  <ref name=x>ignoriert</ref>

Konditional:

  <if true="self.client.cookie.date < Date.now">
    <p> ein absatz. x = <ref name=x>ignoriert</ref>
  <elseif true="a = b">
    <p> einandrer absatz
    <tycoon>
      out.writeln("<b>asdfaf</" + "b>"),
      otherTbo.printOn(out, client, data)
    </tycoon>
  <else>
    <p> nocheinandrer absatz
  </if>

Eine Funktion definieren:

  <define name=f>
    <fun param="a , b">    <!--fun param='a, b :%float'>  <proc ...-->

     <!-- Typisierung ueber content-model?
	  -> Parsing der DTD!
      -->

      <p>Eine Liste mit drei Variablen:
      
      <OL>
	<LI> x (global): <ref name=x>ignoriert</ref>
	<LI> a (lokal): <ref name=a>ignoriert</ref>
	<LI> b (lokal): <ref name=b>ignoriert</ref>
      </OL>

      Zuweisung:
      <assign name=x>
	<em>Neuer Wert fuer x, in SGML berechnet!</em>
      </assign>

    </fun>
  </define>

Shortcut?:

<!--
  <defun name=f param='a, b'>
    <OL>
    ...
  </defun>
-->

Eine Funktion aufrufen:

  <apply name=f>
    <arg> Aktueller Parameter fuer <em>a</em>
    <arg name=b> Aktueller Parameter fuer <em>b</em>
  </apply>


  <apply name=tboRepeat>
    <arg><fun param="newsFirstPara, newsText, newsImage">
      bla bla
      <b><ref name=newsFirstPara>ignoriert</ref></b>
      blib blurb
  </apply>

 same as:

  <define name=f>
    <fun param="newsFirstPara, newsText, newsImage">
      bla bla
      <b><ref name=newsFirstPara>ignoriert</ref></b>
      blib blurb
  </define>
  
  <tycoon>
     tboRepeat[f]
  </tycoon>

Nachrichten senden:

  <send selector=tboRepeat receiver="self">
    <arg><fun param="newsFirstPara, newsText, newsImage">
      bla bla
      <b><ref name=newsFirstPara>ignoriert</ref></b>
      blib blurb
  </send>

  <!--
    <tbo.repeat>
      bla bla
      <b><tbo.firstPara></b>
      blib blurb
    </tbo.repeat>
  -->
  

 same as:

  <define name=f> <!-- :Fun3(String, String,String,String)  -->
    <fun param="newsFirstPara, newsText, newsImage">
      bla bla
      <b><ref name=newsFirstPara>ignoriert</ref></b>
      blib blurb
  </define>
  

  <tycoon>
     self.tboRepeat(f)
     
  </tycoon>

 <!--
  <send selector=tboRepeat>
     <arg><fun param="news">
       bla bla
       <b><eval expr='news.firstParagraph'></b>
       blib blurb
   </send>
  -->
  
 <send selector=tboRepeat>
    <arg><fun param="news">
      bla bla
      <b><tycoon>out.writeString(news.firstParagraph)</tycoon></b>
      blib blurb
  </send>
  
 
Tycoon-Code aufrufen:

a) Ueber Backquotes:
   
   <font size="`client.preferredFontSize`">
     Schrift in bevorzugter Schriftgroesse
   </font>

b) Ueber tycoon-Tag:

  <tycoon>
    (* Sichtbar sind hier:
         - alle SGML-Bezeichner (x,f):
	    'Normale' Bezeichner sind vom Typ String
	    Funktionsbezeichner vom Typ FunN(T1,T2,..TN) :T
  	    zunaechst Ti und T gleich 'String',
	    wobei auch Higher-Order Funktions zugelassen werden koennten
	 - self (Diese Seite, ein Exemplar der mit tbo.class angegebenen
	   Klasse) und damit alle Methoden (inkl. Slots) dieser Klasse
	 - in Tycoon-Tags vorher eingefuehrte Bezeichner (Nested Scoping)
	 - Parameter der emit-Methode, welche den SGML-Ausstoss anschmeisst, z.B.
	     out :Output
	     request :HttpRequest   alle Http-Header, evtl. zzgl. wieterer
				    Informationen (Form-Fiels etc)
	     client		    Persistente Klienten-Information
	 
    *)

    out.writeln("Dynamischer Inhalt,"),
    out.writeln("gemischt mit statischen Elementen: " + x),
    (*...*)
    x := "<b>neuer Inhalt von x, in Tycoon berechnet</" + "b>"
	 
  </tycoon>

c) Ueber eval-Tag?

  <!-- <eval expr='(*...*)'> -->
  
  shortcut fuer  <tycoon> (*...*) </tycoon>

d) Ueber Short References1?

   {tycoon.date.printOn(out) }
  
  shortcut fuer  <tycoon> (*...*) </tycoon>



Vorteile der SGML-basierte Programmierung:

  - Syntax-Ueberpruefung 
  - 'Type Checking', d.h. Content Model Checking anhand der DTD optional
    moeglich
  - Verwendung von SGML-Strukturen innerhalb von Tyconn-Code einfach zu
    realisieren: den Aufbau der Struktur uebernimmt der SGML-Parser
    


Nachteile:

  - Wieder eine Programmiersprache mit eigener Syntax und Semantik
    => Abbildung auf Tycoon-Code moeglichst einfach gestalten,
       so dass entstehende Tycoon-Werkzeuge (Debugger!) auch
       fuer SGML-'Programmcode' verfuegbar sind

  - ?

Entit&auml;ten: &auml;&ouml;&uuml;&Auml;&Ouml;&Uuml;&szlig;




  
</body>  
</html>  


