class StmlAssign
super SimpleTypingMixin, StmlComponent
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StmlAssignClass
{
name :String

value :StmlSequence

computeType(bindings :StmlBindings, errorLog :ErrorLog) :StmlType
  (* *)
{ nameT ::=
    bindings.bindings.memoize(name,
      { ; assume Tycoon variable / object slot 
        StmlTypeVariable.new(position) })
  valueT ::= value.computeSequenceType(bindings, errorLog, true)
  if( !valueT.isSubTypeOf(nameT)
  then: { t ::=
        StmlWrongType.new(position, "no subtypes in assignment",
          "value", valueT, "variable", nameT)
      t.emitWrong(errorLog) })
  StmlBottomType.new(position)
}

compileAsValue(out :StmlASTWriter) :Void
  (* *)
{
  out.tycoonExpression(
    TL2AssignValue.new(position,
      TL2ValueIde.newRef(position, name),
      value.compileToValue(out.context)))
}

compileAsString(out :StmlASTOutput) :Void
  (* *)
{ compileAsValue(out) }

}
