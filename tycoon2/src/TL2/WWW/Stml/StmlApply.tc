class StmlApply
super SimpleTypingMixin, StmlComponent
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StmlApplyClass
{
functor :StmlRef

args :Array(StmlArg)

computeType(bindings :StmlBindings, errorLog :ErrorLog) :StmlType
  (* *)
{
  functorT ::= functor.computeType(bindings, errorLog)
  resultType ::= StmlTypeVariable.new(position)
  expectedType ::=
    StmlFunType.new(
      position,
      List.fromReader(
        args.map(fun(a:StmlArg){
	  Pair.new(a.name,
	           a.value.computeSequenceType(bindings, errorLog, true)) })),
      resultType)
  if( !functorT.isSubTypeOf(expectedType)
  then: { t :StmlType :=
        StmlWrongType.new( position, "bad types in apply",
			   "function", functorT, "arguments", expectedType)
      t.emitWrong(errorLog)
      t }
  else: { if( !resultType.isBound
      then: { ; <name> must have been unknown, i.e. defined in Tycoon.
;	     In this case, we must assume that the function indirectly calls some
;	     sgml function which needs a current output. So the resultType must be
;	     String. 
	  resultType.bindTo(StmlStringType.new(position)) })
      resultType.boundType })
}

compileAsString( out :StmlASTOutput ) :Void
  (* *)
{ compileAsValue(out) }

compileAsValue( out :StmlASTWriter ) :Void
  (* *)
{
  out.tycoonExpression(
    TL2SendValue.new(position,
      functor.asValue,
      Symbol.new("[]"),
      List.fromReader(
        args.map(fun(a :StmlArg) {
	  a.value.compileToValue(out.context)
	}))))
}

}
