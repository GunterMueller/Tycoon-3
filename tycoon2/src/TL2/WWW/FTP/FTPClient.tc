class FTPClient
super FTP
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

A simple and incomplete implementation of a
File Transfer Protocol (FTP) client

The FTP protocol is specified in RFC 959
*)
meta FTPClientClass()

{
server :IPAddress

port :Int

user :String

password :String

verbose :Bool

open :Void
  (* open a control connection to the server and
     authenticate ourselves.
     raise IOError if the connection fails,
     or FTPError if the authentication fails.
  *)
{
   _control := StreamSocket.new2(server, port)

   try({
     _check(220, _readResponse)

     ; authenticate: 
     response ::= _send("USER " + user)
     if( response.code = 331 then: {
       response := _send("PASS " + password)
     })
     _check(230, response)
   } else: fun(e :Exception) {
     try({ _control.close } else: fun(:Exception) {})
     e.raise
   })
}

retrieve(path :String, handleInput :Fun(:Input):Void) :Void
  (* *)
{
  _sendDataPullCommand("RETR " + path, handleInput)
}

store(path :String, handleOutput :Fun(:Output):Void) :Void
  (* *)
{
  _sendDataPushCommand("STOR " + path, handleOutput)
}

get(remotePath :String, localFile :File) :Void
  (* retrieve the remote file with the given path
     and store it into the given local file
  *)
{
  if( !localFile.isOpen then: {
    localFile.openWrite
  })
  protect({
      retrieve(remotePath, fun(in :Input) {
	buffer ::= MutableString.new(512)
	n ::= in.readBuffer(buffer, 0, buffer.size)
	while({n > 0} do: {
	  localFile.writeBuffer(buffer, 0, n)
	  n := in.readBuffer(buffer, 0, buffer.size)
	})
	in.close
      })
    }, fun() {
    localFile.close
  })
}

put(remotePath :String, localFile :File) :Void
  (* store the given local file at the server side
     with the given path.
     the local file may have been opened for writing
     already (with non-standard mode flags, say),
     otherwise, it is opened here.     
  *)
{
  if( !localFile.isOpen then: {
    localFile.openRead
  })    
  protect({
      store(remotePath, fun(out :Output) {
	buffer ::= MutableString.new(512)
	n ::= localFile.readBuffer(buffer, 0, buffer.size)
	while({n > 0} do: {
	  out.writeBuffer(buffer, 0, n)
	  n := localFile.readBuffer(buffer, 0, buffer.size)
	})
	out.close
      })
    }, { localFile.close })
}

delete(path :String) :Void
  (* *)
{
  _checkClass(2, _send("DELE " + path))
}

currentDirectory :String
  (* *)
{
  response ::= _send("PWD")
  _checkClass(2, response)
  msg ::= response.msg
  from ::= msg.locateChar('\"')+1
  to ::= msg.locateChar1('\"', from)
  msg.subString(from, to-from)
}

changeDirectory(path :String) :Void
  (* *)
{
  _checkClass(2, _send("CWD " + path))
}

makeDirectory(path :String) :Void
  (* *)
{
  _checkClass(2, _send("MKD " + path))
}

removeDirectory(path :String) :Void
  (* *)
{
  _checkClass(2, _send("RMD " + path))
}

list(path :String, handleInput :Fun(:Input):Void) :Void
  (* *)
{
  _sendDataPullCommand("LIST " + path, handleInput)
}

nameList(path :String, handleInput :Fun(:Input):Void) :Void
  (* *)
{
  _sendDataPullCommand("NLST " + path, handleInput)
}

binary :Void
  (* *)
{
  _check(200, _send("TYPE I"))
}

ascii :Void
  (* *)
{
  _check(200, _send("TYPE A"))
}

close :Void
  (* *)
{
  protect({ _checkClass(2, _send("QUIT")) }, {
    if( _control.isNotNil then: {
      _control.close
    })
    if( _data.isNotNil then: {
      _data.close
    })
  })
}

private

_control :StreamSocket

_data :StreamSocket

_minDataPort :Int

_maxDataPort :Int

_dataPort :Int

_sendDataPullCommand(command :String, handleInput :Fun(:Input):Void) :Void
  (* *)
{
  _sendDataCommand(command, fun(dataConnection :StreamSocket) {
    handleInput[dataConnection]
  })  
}

_sendDataPushCommand(command :String, handleOutput :Fun(:Output):Void) :Void
  (* *)
{
  _sendDataCommand(command, fun(dataConnection :StreamSocket) {
    handleOutput[dataConnection]
  })  
}

_sendDataCommand(command :String, transmit :Fun(:StreamSocket):Void) :Void
  (* *)
{
  myIPAddr ::= IPAddress.localHost
  s ::= ServerSocket.new(myIPAddr, 0, 1)
  ephemeralPort ::= s.port
  sb ::= StringBuilderOutput.new
  sb << myIPAddr.bytes[0] << "," <<
	myIPAddr.bytes[1] << "," <<
	myIPAddr.bytes[2] << "," <<
	myIPAddr.bytes[3] << "," <<
	(ephemeralPort / 256) << "," <<
	(ephemeralPort % 256)
  arg ::= sb.contents

  _checkClass(2, _send("PORT " + arg))

  _checkClass(1, _send(command))
  
  _data := s.accept

  protect({
     transmit[_data]
     _checkClass(2, _readResponse)
   }, {
     s.close
     if( _data.isOpen then: {
       _data.close
     })
     _data := nil
  })
}

_send(command :String) :FTPResponse
  (* *)
{
  if( verbose then: {
    tycoon.stdout << command << '\n'
  })
  _control << command + "\r\n"
  _readResponse
}

_readResponse :FTPResponse
  (* *)
{
  FTPResponse.fromInput(_control)
}

_check(expected :Int, response :FTPResponse) :Void
  (* *)
{
  if( response.code != expected then: {
    FTPError.new(response).raise
  })
}

_checkClass(expectedClass :Int, response :FTPResponse) :Void
  (* *)
{
  if( (response.code / 100) != expectedClass then: {
    FTPError.new(response).raise
  })
}

}
