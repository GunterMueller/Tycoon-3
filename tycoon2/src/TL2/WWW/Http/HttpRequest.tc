class HttpRequest
super HttpEntityMessage

public

method :String,
uri    :String,
major  :Int,
minor  :Int,
connectedAddress :IPAddress
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 the address of the other side of the socket.
   If we use the CGI gateway, this is the local
   webserver. remoteAddress will always give the
   address of the `real' client *)
  

methods

setContext(context :URL) :Void
  (* record the context of this request.
     the uri of this request is parsed relative
     to the given url (using URL.inContext()) and
     subsequent calls to 'url' will answer the result
     of this parsing.
  *)
{
  _url := URL.inContext(URL.fromString(uri), context)
}

url :URL
{
  _url.isNil ? {
    _url := URL.fromString(uri)
  },
  _url
}

parser :MimeMessageParser(Self)
{
  HttpRequestParser.new
}

hasAccept :Bool { hasHeader("Accept") }
accept :List(HttpAccept) { headerValue("accept") }
"accept:="(a :List(HttpAccept)) { setHeaderValue("accept", AcceptListHeader, a) }

hasIfModifiedSince :Bool { hasHeader("if-modified-since") }
ifModifiedSince :Date { headerValue("if-modified-since") }
"ifModifiedSince:="(d :Date) { setHeaderValue("if-modified-since", MimeDate, d) }

hasCookies :Bool { hasHeader("Cookie") }
cookies :List(HttpCookie) { headerValue("Cookie") }
"cookies:="(c :List(HttpCookie)) { setHeaderValue("Cookie", HttpCookiesHeader, c) }

hasAuthorization :Bool { hasHeader("Authorization") }
authorization :HttpCredentials { headerValue("Authorization") }
"authorization:="(c :HttpCredentials) { setHeaderValue("Authorization", HttpCredentialsHeader, c) }

hasUserAgent :Bool { hasHeader("user-agent") }
userAgent :List(HttpProduct) { headerValue("user-agent") }
"userAgent:="(ua :List(HttpProduct)) { setHeaderValue("user-agent", HttpProductListHeader, ua) }

hasRemoteHost :Bool { hasHeader("x-cgi2tl-remote-host") }
remoteHost :String { headerValue("x-cgi2tl-remote-host") }
"remoteHost:="(rh :String) { setHeaderValue("x-cgi2tl-remote-host", MimeString, rh) }

hasRemoteAddress :Bool { true }
remoteAddress :IPAddress {
  !hasHeader("x-cgi2tl-remote-addr") ? {
    connectedAddress
  } : {
    headerValue("x-cgi2tl-remote-addr")
  }
}
"remoteAddress:="(a :IPAddress) { setHeaderValue("x-cgi2tl-remote-addr", IPAddressHeader, a) }


emit(out :Output)
{
  (* request line *)
  out.writeString(method),
  out.write(' '),
  out.writeString(uri),
  out.writeString(" HTTP/"),
  major.printOn(out),
  out.write('.'),
  minor.printOn(out),
  out.writeString("\r\n"),
  super.emit(out)
}

private 


_url :URL

methods

_init6(m :String, u :String, ma :Int, mi :Int,
       h :MimeHeaderDictionary(MimeHeaderValue),
       b :Input) :Self
{
  _init2(h, b),

  method := m,
  uri    := u,
  major  := ma,
  minor  := mi,

  self
}
;
