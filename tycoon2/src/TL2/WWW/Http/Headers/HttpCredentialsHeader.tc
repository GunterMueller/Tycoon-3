class HttpCredentialsHeader
super MimeHeaderValueImpl(HttpCredentials)
(**)
meta MimeHeaderValueImplClass(HttpCredentials)
{
private

parseValue(s :String) :HttpCredentials
  (* *)
{
  p ::= MimeParser.new(s.reader)

  p.skipws
  scheme ::= p.nextToken

  if( tolower(scheme) = "basic" then: {
    p.skipws
    
    encrypted ::=
      p.nextToken +
      if( p.char = '=' then: { p.next "=" } else: { "" })  +
      if( p.char = '=' then: { p.next "=" } else: { "" }) 
      
      
    decrypted ::= String.fromReader(Base64Decoder.new(InputReader.new(encrypted.reader)))

    colon ::= decrypted.locate(':')
    if( colon = nil then: { MimeParserError.new("No colon in Basic credential: "+decrypted.printString).raise })

    user ::= decrypted.subString(0, colon)
    password ::= decrypted.subString(colon + 1, decrypted.size-colon-1)

    HttpCredentials.basic(user, password)
  } else: {
    parameters :Dictionary(String, String) := Dictionary.new
    
    stop ::= false
    while({!stop} do: {
      p.skipws

      if( p.char = nil then: fun() :Void {
        stop := true
      } else: {
        ;
; * This file is part of the Tycoon-2 system.
; *
; * The Tycoon-2 system is free software; you can redistribute it and/or
; * modify it under the terms of the GNU General Public License
; * as published by the Free Software Foundation (Version 2).
; *
; * The Tycoon-2 system is distributed in the hope that it will be useful,
; * but WITHOUT ANY WARRANTY; without even the implied warranty
; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; * See the GNU General Public License for more details.
; * 
; * You should have received a copy of the GNU General Public
; * License along with the Tycoon-2 system; see the file LICENSE.
; * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
; * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
; * 
; * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
; *
; This may not be the first parameter 
        if( p.char = ',' then: { p.next p.skipws })
	
        name ::= p.nextToken
	p.skip('=')
	value ::= p.nextUnquoted

	parameters[name] := value
      })
    })

    HttpCredentials.new(scheme, parameters)
  })
}

unparseValue(l :HttpCredentials) :String
  (* *)
{
  if( tolower(l.scheme) = "basic" then: {
    "Basic " + String.fromReader(Base64Encoder.new(InputReader.new((l.parameters["user"] + ":" + l.parameters["password"]).reader)))
  } else: {
    l.scheme + " " +
    l.parameters.keys.fold(
      fun(name :String) {
        value ::= l.parameters[name]
	value + "=" + quote(value)
      }, fun(s1 :String, s2 :String) {
        s1 + ", " + s2
      }
    )
  })
}

quote(s :String) :String
  (* *)
{
  MimeQuoted.withValue(s).string
}

tolower(s :String) :String
  (* *)
{
  String.fromReader(s.map(fun(c :Char) { c.asLowerCase }))
}

}
