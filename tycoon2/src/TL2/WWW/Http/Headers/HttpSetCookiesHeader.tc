class HttpSetCookiesHeader
super MimeHeaderValueImpl(List(HttpSetCookie))
(**)
meta MimeHeaderValueImplClass(List(HttpSetCookie))
{
private

parseValue(s :String) :List(HttpSetCookie)
  (* *)
{
  setCookies :List(HttpSetCookie) := EmptyList.new
}

unparseValue(c :List(HttpSetCookie)) :String
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

  let var index = 0,
  while({ index < s.size }, {
    let assign = s.locate1('=', index),
    assign = nil ? { MimeParserError.new("HttpSetCookies: No value: "+s).raise },

    let name = s.subString(index, assign-index),

    let var semi = s.locate(";", assign+1),
    semi = nil ? { semi := s.size },

    let value = s.subString(assign+1, semi-assign-1),

    setCookies := List.cons(HttpCookie.new(name, value), setCookies)
  }),

  setCookies
*)
{
  result ::= c.fold(
	       fun(cookie :HttpSetCookie) {
	         cookie.name + "=" + cookie.value

		 + if( cookie.expires != nil then: {
		   ";EXPIRES=" + MimeDate.withValue(cookie.expires).string
		 } else: {
		   ""
		 })

		 + if( cookie.domain != nil then: {
		   ";DOMAIN=" + cookie.domain
		 } else: {
		   ""
		 })

		 + if( cookie.path != nil then: {
		   ";PATH=" + cookie.path
		 } else: {
		   ""
		 })

		 + if( cookie.secure then: {
		   ";SECURE"
		 } else: {
		   ""
		 })
	       },
; ### Hack because of Netscapes ignoring of Mime-Definition: 
	       fun(s :String, c :String) { s + "\r\nset-cookie: " + c }
	       )

  if( result = nil then: { "" } else: { result })	       
}

}
