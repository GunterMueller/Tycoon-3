class AcceptHeader
super MimeHeaderValueImpl(HttpAccept)
(**)
meta MimeHeaderValueImplClass(HttpAccept)
{
private

parseValue(s: String): HttpAccept
  (* *)
{
  p ::= MimeParser.new(s.reader)

  type    :String := nil
  subtype :String := nil

  p.skiphws
  if( p.char = '*' then: {
    type := "*" subtype := "*"
    p.skip('*') p.skip('/') p.skip('*')
    nil
  } else: {
    type := p.nextToken
    p.skip('/')
    if( p.char = '*' then: { subtype := "*" p.next nil } else: { subtype := p.nextToken nil })
  })

  ;
; * This file is part of the Tycoon-2 system.
; *
; * The Tycoon-2 system is free software; you can redistribute it and/or
; * modify it under the terms of the GNU General Public License
; * as published by the Free Software Foundation (Version 2).
; *
; * The Tycoon-2 system is distributed in the hope that it will be useful,
; * but WITHOUT ANY WARRANTY; without even the implied warranty
; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; * See the GNU General Public License for more details.
; * 
; * You should have received a copy of the GNU General Public
; * License along with the Tycoon-2 system; see the file LICENSE.
; * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
; * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
; * 
; * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
; *
; we ignore the parameters in the moment 

  HttpAccept.new(type, subtype, nil, 1.0, nil)
}

unparseValue(s: HttpAccept): String
  (* *)
{
  result ::= GapString.new(10)  ; should use StringBuilderOutput 
  result.addAll(s.type + "/" + s.subtype)
  ; parameters, q, mxb 
  result.asString
}

}
