class AcceptHeader
super MimeHeaderValueImpl(HttpAccept)
metaclass MimeHeaderValueImplClass(HttpAccept)

private methods

parseValue(s: String): HttpAccept {
  let p = MimeParser.new(s.reader),

  let var type    :String = nil,
  let var subtype :String = nil,

  p.skiphws,
  p.char = '*' ? {
    type := "*", subtype := "*",
    p.skip('*'), p.skip('/'), p.skip('*'),
    nil
  } : {
    type := p.nextToken,
    p.skip('/'),
    p.char = '*' ? { subtype := "*", p.next, nil } : { subtype := p.nextToken, nil }
  },

  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 we ignore the parameters in the moment *)

  HttpAccept.new(type, subtype, nil, 1.0, nil)
}
  
unparseValue(s: HttpAccept): String {
  let result = GapString.new(10),  (* should use StringBuilderOutput *)
  result.addAll(s.type + "/" + s.subtype),
  (* parameters, q, mxb *)
  result.asString
}

;
