class HttpCookiesHeader
super MimeHeaderValueImpl(List(HttpCookie))
(**)
meta MimeHeaderValueImplClass(List(HttpCookie))
{
private

parseValue(s :String) :List(HttpCookie)
  (* *)
{
  cookies :List(HttpCookie) := EmptyList.new
  
  index ::= 0
  while({ index < s.size } do: {
    index := skipws(s, index)
    assign ::= s.locate1('=', index)
    if( assign = nil then: { MimeParserError.new("HttpCookies: No value: "+s).raise })

    name ::= s.subString(index, assign-index)

    semi ::= s.locate1(';', assign+1)
    if( semi = nil then: { semi := s.size })

    value ::= s.subString(assign+1, semi-assign-1)

    cookies := List.cons(HttpCookie.new(name, value), cookies)

    index := semi+1
  })

  cookies
}

unparseValue(c :List(HttpCookie)) :String
  (* *)
{
  result ::= c.fold(
	       fun(cookie :HttpCookie) { cookie.name + "=" + cookie.value },
	       fun(s :String, c :String) { s + ";" + c }
	       )

  if( result = nil then: { "" } else: { result })	       
}

skipws(s :String, start :Int) :Int
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 the index of the first character >= start in s, that is not a whitespace, or s.size *)
{
  result ::= start
  while({ result < s.size &&  s[result] = ' ' | s[result] = '\t' } do:
        { result := result + 1 })

  result
}

}
