class HttpResponse
super HttpEntityMessage
(**)
meta HttpResponseClass()

{
major  :Int

minor  :Int

statusCode :Int

status :String

parser :MimeMessageParser(Self)
  (* *)
{
  HttpResponseParser.new
}

hasSetCookies :Bool
  (* *)
{ hasHeader("Set-Cookie") }

setCookies :List(HttpSetCookie)
  (* *)
{ headerValue("Set-Cookie") }

"setCookies:="(c :List(HttpSetCookie)) :Void
  (* *)
{ setHeaderValue("Set-Cookie", HttpSetCookiesHeader, c) }

hasWWWAuthenticates :Bool
  (* *)
{ hasHeader("WWW-Authenticate") }

WWWAuthenticates :List(WWWAuthenticate)
  (* *)
{ headerValue("WWW-Authenticate") }

"WWWAuthenticates:="(c :List(WWWAuthenticate)) :Void
  (* *)
{ setHeaderValue("WWW-Authenticate", WWWAuthenticateHeader, c) }

emit(out :Output) :Void
  (* *)
{
  ;
; * This file is part of the Tycoon-2 system.
; *
; * The Tycoon-2 system is free software; you can redistribute it and/or
; * modify it under the terms of the GNU General Public License
; * as published by the Free Software Foundation (Version 2).
; *
; * The Tycoon-2 system is distributed in the hope that it will be useful,
; * but WITHOUT ANY WARRANTY; without even the implied warranty
; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; * See the GNU General Public License for more details.
; * 
; * You should have received a copy of the GNU General Public
; * License along with the Tycoon-2 system; see the file LICENSE.
; * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
; * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
; * 
; * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
; *
; Response line 
  out.writeString("HTTP/")
  major.printOn(out)
  out.write('.')
  minor.printOn(out)
  out.write(' ')
  statusCode.printOn(out)
  out.write(' ')
  out.writeString(status)
  out.writeString("\r\n")
  super.emit(out)
}

private

_init6(ma :Int, mi :Int, sc :Int, s :String,
       h :MimeHeaderDictionary(MimeHeaderValue),
       b :Input) :Self
  (* *)
{
  _init2(h, b)

  major := ma
  minor := mi
  statusCode := sc
  status := s

  self
}

emitHeaders(out :Output) :Void
  (* *)
{
  if( !hasDate then: { date := Date.now })

  super.emitHeaders(out)
}

}
