class SimpleHttpClient(Request <: HttpRequest, Response <: HttpResponse)
super Object
metaclass AbstractClass

public methods

writeln(s :String) {
  tycoon.stdout.writeln(s)
}

request(address :IPAddress, port :Int, request :Request, parseResponse: Fun1(Input, Response), handleResponse: Fun1(Response, Void))
{
  let connection = StreamSocket.new2(address, port),

  try({
  let in = connection.bufferedInput,
  let out = connection.bufferedOutput,

  request.emit(out),
  out.flush, (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ## ? *)

  let response :Response = parseResponse[in],

  handleResponse[response]

  }, fun(e :Exception) {
    connection.close,
    e.raise
  }),

  connection.close
}

parseResponse(in :Input) :Response deferred

handleResponse(req :Response) deferred



;
