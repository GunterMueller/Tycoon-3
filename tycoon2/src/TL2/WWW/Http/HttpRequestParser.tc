class HttpRequestParser(Request <: HttpRequest)
super HttpMessageParser(Request)
metaclass SimpleConcreteClass(HttpRequestParser(Request))

public methods

parse(from :Input, to :Request)
{
  let p = MimeParser.new(from),
  let method = p.nextToken,

  p.skip(' '),
  let uri = GapString.new(20),
  while({p.char != ' ' && {p.char != '\r'} && {p.char != '\n'} && {p.char != nil}}, {
    uri.add(p.char),
    p.next
  }),

  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 termination of the request line after the URI indicates HTTP/0.9 *)
  p.char == '\r' || { p.char == '\n' } ? fun() :Void {
    p.char == '\r' ? {
      p.next, p.char != '\n' ? {
        MimeParserError.new("Termination of request line").raise
      }
    },

    to.major := 0,
    to.minor := 9
  } : {
  p.char !== nil ? {

    p.skip(' '),
    p.skip('H'), p.skip('T'), p.skip('T'), p.skip('P'),
    p.skip('/'),
    let major = p.nextDigits,
    p.skip('.'),
    let minor = p.nextDigits,

    (* Care is necessary not to read too much characters *)
    p.char = '\r' ? {
      p.next,
      p.char != '\n' ? {
	MimeParserError.new("Termination of request line").raise
      }
    } : {
    p.char = '\n' ? {
    } : {
      MimeParserError.new("Termination of request line").raise
    }},

    to.major  := major.asInt,
    to.minor  := minor.asInt,

    super.parse(from, to)

  } : {
    MimeParserError.new("Termination of request line").raise
  }},
  
  to.method := method,
  to.uri    := uri.asString
}
  
;
