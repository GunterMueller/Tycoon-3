class HttpRequestParser(Request <: HttpRequest)
super HttpMessageParser(Request)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta SimpleConcreteClass(HttpRequestParser(Request))
{
parse(from :Input, to :Request) :Void
  (* *)
{
  p ::= MimeParser.new(from)
  method ::= p.nextToken

  p.skip(' ')
  uri ::= GapString.new(20)
  while({p.char != ' ' && p.char != '\r' && p.char != '\n' && p.char != nil} do: {
    uri.add(p.char)
    p.next
  })

  ; termination of the request line after the URI indicates HTTP/0.9 
  if( p.char == '\r' ||  p.char == '\n'  then: fun() :Void {
    if( p.char == '\r' then: {
      p.next if( p.char != '\n' then: {
        MimeParserError.new("Termination of request line").raise
      })
    })

    to.major := 0
    to.minor := 9
  } else: {
  if( p.char !== nil then: {

    p.skip(' ')
    p.skip('H') p.skip('T') p.skip('T') p.skip('P')
    p.skip('/')
    major ::= p.nextDigits
    p.skip('.')
    minor ::= p.nextDigits

    ; Care is necessary not to read too much characters 
    if( p.char = '\r' then: {
      p.next
      if( p.char != '\n' then: {
	MimeParserError.new("Termination of request line").raise
      })
    } else: {
    if( p.char = '\n' then: {
    } else: {
      MimeParserError.new("Termination of request line").raise
    })})

    to.major  := major.asInt
    to.minor  := minor.asInt

    super.parse(from, to)

  } else: {
    MimeParserError.new("Termination of request line").raise
  })})
  
  to.method := method
  to.uri    := uri.asString
}

}
