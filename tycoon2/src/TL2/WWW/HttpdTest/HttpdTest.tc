class HttpdTest

super Object

metaclass SimpleConcreteClass(HttpdTest)

public

uriListPath :String,
uriList :DynSequence(String),
server :IPAddress,
port :Int,
stop :Bool,
random :Reader(Int),
workers :MutableArray(HttpdTestWorker)

methods

run(nWorkers :Int)
{
  loadURIs,
  stop := false,
  workers := MutableArray.new(nWorkers),
  for(0,workers.size-1,fun(i :Int) {
    newWorker(i)
  }),

  launchBadGuy  
}


newWorker(n :Int)
{
  let worker = HttpdTestWorker.new,
  workers[n] := worker,
  worker.n := n,
  worker.manager := self,
  worker.fork,
  wait
}


launchBadGuy
{
  Thread.new(fun() {
    while ({!stop}, {
      (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 simulate some random connection failure: *)
      wait,
      let i = random.read.abs % workers.size,
      try({
	workers[i].interrupt
      }, fun(e :Exception) {
      })
    })
  })
}

loadURIs
{
  uriList := GapArray.new(10),
  let in = File.openRead(uriListPath),
  in.linesDo(fun(n :Int, line :String) {
    line.trim.size > 0 ? {
      tycoon.stdout.writeln(line),
      uriList.add(line.trim)
    }
  }),
  in.close
}

wait
{
  let max = 5,  (* maximum wait time in secons *)
  let timeout :Long = (random.read.abs % (1000 * max)).asLong,
  
  let mx = Mutex.new,
  let cv = Condition.new,
  cv.timedWait(mx, timeout)  
}

pick :String
  (* choose some uri at random *)
{
  _i := random.read.abs % uriList.size,
  uriList[_i]
}


private

_i :Int

methods

_init :Self
{
  super._init,
  _i := -1,
  stop := false,
  random := Random.new,
  self
}

;
