class MimeParser
super Mime
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

  Some useful constructs for parsing MIME

  Author: Matthias Ernst 12/96
*)
meta MimeParserClass()

{
init(r :Reader(Char)) :Void
  (* *)
{
  _r := r
  _char := _r.read
}

char :Char
  (* the next character in the input, NOT consuming *)
{
  _char
}

next :Char
  (* *)
{
  _char := _r.read
}

reader :Reader(Char)
  (* *)
{
  Reader.cons(_char, _r)
}

skip(c :Char) :Void
  (* Added value *)
{
  if( char = c then: {
    next
  } else: {
    MimeParserError.new("Expected "+c.printString+", got "+char.printString).raise
  })
}

skiphws :Void
  (* horizontal whitespace *)
{
  while({
    char = ' ' | char = '\t'
  } do: {
    next
  })
}

skipws :Void
  (* *)
{
  while({
    char = ' ' | char = '\t' | char = '\n' | char = '\r'
  } do: {
    next
  })
}

nextToken :String
  (* HTTP *)
{
  s ::= GapString.new(10)

  while({
    char != nil &&
     isCHAR(char)  &&  !isCTL(char)  &&  !isTspecial(char) 
  } do: {
    s.add(char)
    next
  })

  if( s.size = 0 then: { MimeParserError.new("No token").raise })

  s.asString
}

nextQuoted :String
  (* *)
{
  s ::= GapString.new(10)

  skip('\"')
  s.add('\"')
  
  while({
    char != '\"'
  } do: {
    if( char == nil then: { MimeParserError.new("Premature end of quoted string").raise })
    if( char == '\\' then: {
      s.add(char)
      next
      if( char == nil then: { MimeParserError.new("Premature end of quoted string").raise })
      s.add(char)
      next
    })
      
    if( isCTL(char) then: { MimeParserError.new("CTL in quoted string").raise })
    s.add(char)
    next
  })

  skip('\"')
  s.add('\"')

  s.asString
}

nextWord :String
  (* *)
{
  skipws

  if( char = '\"' then: { nextQuoted } else: { nextToken })
}

nextWordUnquoted :String
  (* *)
{
  skipws

  if( char = '\"' then: { nextUnquoted } else: { nextToken })
}

nextUnquoted :String
  (* *)
{
  result ::= GapString.new(10)
  
  skip('\"')
  break ::= false
  while({!break} do: {
    if( char = nil  then: { MimeParserError.new("Premature end of quote").raise } else: {
    if( char = '\"' then: { next break := true nil } else: {
    if( char = '\\' then: {
      next
      if( char = nil then: { MimeParserError.new("Premature end of quote").raise })
      result.add(char)
      next nil
    } else: { ; else 
    result.add(char)
    next nil
    })})})}
  )

  result.asString
}

nextDigits :String
  (* *)
{
  digits ::= GapString.new(3)
  while({isDIGIT(char)} do: {
    digits.add(char)
    next
  })

  digits.asString
}

isCHAR(c :Char) :Bool
  (* see the HTTP-1.1 spec *)
{ (c >= '\000') & (c <= '\127') }

isCTL(c :Char) :Bool
  (* *)
{ ((c >= '\000') & (c <= '\031')) | (c = '\127') }

isTspecial(c :Char) :Bool
  (* *)
{ "()<>@,;:\\\"/[]?={} \t".includes(c) }

isDIGIT(c :Char) :Bool
  (* *)
{ (c >= '0') & (c <= '9') }

private

_r :Reader(Char)

_char :Char

}
