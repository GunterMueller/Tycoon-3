class MimeMessageClass
super ConcreteClass(MimeMessage)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

	MimeMessageClass - Metaclass with registery for Mime-Messages

	Ingo Richtsmeier

	23-Jul-97

	Copyright 1997, Higher-Order GmbH, Hamburg
	
	update :GB 01.10.97: remove header registry,
	                     instead use MimeHeaderRegistry 
*)
meta MetaClass
{
code7Bit :String
  (* encoding mechanism used by MimeMessage::"contentTransferEncoding:=" *)
{ "7bit" }

code8Bit :String
  (* *)
{ "8bit" }

codeBinary :String
  (* *)
{ "binary" }

codeQuotedPrintable :String
  (* *)
{ "quoted-printable" }

codeBase64 :String
  (* *)
{ "base64" }

new :MimeMessage
  (* ------------------------------------------------------------ *)
{ new2(MimeHeaderDictionary.new, nil) }

new2(headers :MimeHeaderDictionary(MimeHeaderValue),
     body    :Input) :MimeMessage
  (* ------------------------------------------------------------ *)
require headers.isNotNil
  
  {
    instance ::= _new
    instance._init2(headers, body)
    instance
  }

init :Void
  (* ------------------------------------------------------------ *)
{
    MimeHeaderRegistry.instance.registerHeader("mime-version", MimeString)
    MimeHeaderRegistry.instance.registerHeader("content-type", MediaTypeHeader)
    MimeHeaderRegistry.instance.registerHeader("content-transfer-encoding", MimeToken)
    MimeHeaderRegistry.instance.registerHeader("content-id", MimeString)
    MimeHeaderRegistry.instance.registerHeader("content-description", MimeString)
  }

}
