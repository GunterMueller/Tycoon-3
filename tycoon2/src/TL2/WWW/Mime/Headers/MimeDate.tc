class MimeDate
super MimeHeaderValueImpl(Date)
(**)
meta MimeHeaderValueImplClass(Date)
{
private

parseValue(s: String): Date
  (* *)
{
  ;
; * This file is part of the Tycoon-2 system.
; *
; * The Tycoon-2 system is free software; you can redistribute it and/or
; * modify it under the terms of the GNU General Public License
; * as published by the Free Software Foundation (Version 2).
; *
; * The Tycoon-2 system is distributed in the hope that it will be useful,
; * but WITHOUT ANY WARRANTY; without even the implied warranty
; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; * See the GNU General Public License for more details.
; * 
; * You should have received a copy of the GNU General Public
; * License along with the Tycoon-2 system; see the file LICENSE.
; * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
; * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
; * 
; * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
; *
; NOT ONLY s ! We must strip the quotes, ... 
  try({						; ## platform dependencies for Summertime 
    date ::= Date.fromString(s.subString(0, 25), "%a, %d %b %Y %T")
    localHour ::= if( date.isDST then: {
      date.offset / 3600 - 1
    } else: {
      date.offset / 3600
    })
    localMinute ::= date.offset % 3600 / 60
    sign ::= if( s.subString(26,1) = "-" then: { (-1 )} else: { 1 })
    date.hour := date.hour - localHour - s.subString(27,2).asInt * sign
    date.minute := date.minute - localMinute - s.subString(29,2).asInt * sign
    date.normalize
    date
  } else: fun(:Exception) {
  try({
    Date.fromString(s, "%a, %d %b %Y %T %Z")    ; Mon, 16 Dec 1996 13:22:34 MET 
  } else: fun(:Exception) {
  try({
    Date.fromString(s, "%A, %d-%b-%y %T %Z")   ; Monday, 16-Dec-96 13:22:34 MET 
  } else: fun(:Exception) {
  try({
    Date.fromString(s, "%a %b %d %T %Y")       ; Mon Dec 16 13:22:34 1996 
  } else: fun(:Exception) {
  try({
    StandardDateParser.instance.parse(s)       ; ## Hack while still old dates exist at dpa 
  } else: fun(:Exception) {
    CoerceError.new(self, Date).raise
  })
  })
  })
  })
  })
}

unparseValue(s: Date): String
  (* *)
{
  ; s.format("%a, %d %b %Y %T %Z") 
; the first format as defined by RFCs 822/1123 
  ;## platform dependencies for zonename and summertime!! 
  hour ::= if( s.isDST then: {
    s.offset.abs / 3600 + 1
  } else: {
    s.offset.abs / 3600
  })
  minute ::= s.offset.abs % 3600 / 60
  s.format("%a, %d %b %Y %T ") + if( s.offset > 0 then: { "-" } else: { "+" }) +
    if( hour < 10 then: { "0" } else: { "" }) + hour.printString +
    if( minute < 10 then: { "0" } else: { "" }) + minute.printString
}

}
