class MediaTypeClass
super ConcreteClass(MediaType)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

      update: GB 01-Oct-1997
		insert pre- and post conditions
*)
meta MetaClass
{
new(type :String, subtype :String) :MediaType
  (* ------------------------------------------------------------ *)
require type.isNotNil &
    subtype.isNotNil

  {
    instance ::= _new
    instance._init2(type, subtype)
    instance
  }

withParameter(type :String, subtype :String, parameterName :String,
              parameterValue :String) :MediaType
  (* ------------------------------------------------------------ *)
require type.isNotNil &
    subtype.isNotNil &
      parameterName.isNotNil &
        parameterValue.isNotNil

  {	      
    instance ::= _new
    instance._init2(type, subtype)
    instance._parameters[parameterName] := parameterValue
    instance
  }

boundaryName :String
  (* ------------------------------------------------------------ *)
{ "boundary" }

withBoundary(mt :MediaType, boundary :String) :MediaType
  (* ------------------------------------------------------------ *)
{
    instance ::= withParameter(mt.type, mt.subtype, boundaryName, boundary)
    instance
  }

charsetName :String
  (* ------------------------------------------------------------ *)
{ "charset" }

withCharset(mt :MediaType, charset :String) :MediaType
  (* ------------------------------------------------------------ *)
require mt.isNotNil &
    charset.isNotNil

  {
    instance ::= withParameter(mt.type, mt.subtype, charsetName, charset)
    instance
  }

TEXT_PLAIN				:MediaType
  (*## make slots: *)
{ new("text", "plain") }

TEXT_HTML				:MediaType
  (* *)
{ new("text", "html") }

IMAGE_GIF				:MediaType
  (* *)
{ new("image", "gif") }

IMAGE_JPEG				:MediaType
  (* *)
{ new("image", "jpeg") }

APPLICATION_POSTSCRIPT			:MediaType
  (* *)
{ new("application", "postscript") }

APPLICATION_X_WWW_FORM_URLENCODED	:MediaType
  (* *)
{ new("application", "x-www-form-urlencoded") }

APPLICATION_X_JAVA_AGENT		:MediaType
  (* *)
{ new("application", "x-java-agent") }

MULTIPART_FORM_DATA			:MediaType
  (* *)
{ new("multipart", "form-data") }

MULTIPART_MIXED				:MediaType
  (* *)
{ new("multipart", "mixed") }

MESSAGE_HTTP				:MediaType
  (* *)
{ new("message", "http") }

}
