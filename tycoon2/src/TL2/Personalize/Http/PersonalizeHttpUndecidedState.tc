class PersonalizeHttpUndecidedState
super PersonalizeHttpState
(**)
meta SimpleConcreteClass(PersonalizeHttpUndecidedState)
{
noCookiesPlease(client :PersonalizeHttpClient) :Void
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 the client rejected a cookie. this means we must urlencode. *)
{
  client.personalizeHttpState := _urlEncodeState
}

personalizeHttp(client :PersonalizeHttpClient,
  request :HttpRequest,
  response :HttpResponse) :HttpResponse
  (* *)
{
  ; use both cookies and url encoding: 

  cookies ::= if( response.hasSetCookies
    then: { response.setCookies }
    else: { EmptyList.instance })
  cookie ::=
    HttpSetCookie.new(HttpPersonalizer.COOKIE_NAME, client.id, nil, nil, nil, false)
  response.setCookies := List.cons(cookie, cookies)
  _urlEncodeState.personalizeHttp(client, request, response)
}

private

_urlEncodeState :PersonalizeHttpState

_cookieState :PersonalizeHttpState

_init :Self
  (* *)
{
  super._init
  _urlEncodeState := PersonalizeHttpURLEncodeState.new
  _cookieState := PersonalizeHttpCookieState.new
  self
}

}
