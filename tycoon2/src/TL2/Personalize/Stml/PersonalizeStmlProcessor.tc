class PersonalizeStmlProcessor(Client <:Object,
  Application <:PersonalizeStmlApplication(Client, Application))
super PersonalizeStml, StmlProcessor(Application)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *


Author:  Gerd Bremer
Date:    22-Jul-1997
Updates: (Date)	  (Name)	(Description)
*)
meta StmlProcessorClass(Application, PersonalizeStmlProcessor(Client, Application))
{
client :Client
  (* before processing and if not found in database, this value is nil.
   stml page MUST create a new client in this case.
*)

process :Void
  (* *)
{
    client := _client(request)
    super.process    ; evaluate stml pages 
    _addCookieHeader  ; add cookie header 
  }

private

_cookieName :String

_init :Self
  (* *)
{
    super._init
    _cookieName := "TYCOON_PERSONALIZER"
    self
  }

_client(request :HttpRequest) :Client
  (* inpsect the request and detect the client id.
     answer nil if no client id can be found
   *)
{
    client :Client := nil
   
    ; cookie? 
    if( request.hasCookies then:
      {
        cookie ::= request.cookies.detect(fun(cookie :HttpCookie)
	  { cookie.name = _cookieName })
        if( cookie.isNotNil then:
	  {
	    client := application.client(cookie.value)
	    if( client.isNotNil then:
	      { tycoon.stdout << "Client id: " + application.clientId(client).printString + "\n" })
	  } else:
	  { tycoon.stdout << "Client id: unknown or wrong cookie\n" })
      } else:
      {
        client := nil
	tycoon.stdout << "Client id: no cookie\n"
      })
    
; ## in addition do authentification
;    client.isNil ?
;      {
;        ...  
;      },
;
    client
  }

_plusOneYear(date :Date) :Date
  (* *)
{
    time ::= date.asTime + (365 * Date.secondsPerDay).asLong
    Date.fromTime(time)
  }

_addCookieHeader :Void
  (* *)
{ if( client.isNotNil &&  !request.hasCookies  then:
      {
        name ::= _cookieName
	value ::= application.clientId(client)
	expires ::= _plusOneYear(Date.now)
	domain ::= nil
	path ::= application.path
	secure ::= false
        cookie ::= HttpSetCookie.new(name, value, expires, domain, path, secure)
	response.setCookies := List.with1(cookie)
	client := nil
      } else:
      { nil })
  }

}
