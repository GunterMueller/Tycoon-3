class PersonalizeStmlApplication(Client <:Object,
  Application <:PersonalizeStmlApplication(Client, Application))
super PersonalizeStml, StmlApplication(Application)
(**)
meta AbstractClass
{
path :String

  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 cookie path *)

clients :Dictionary(String, Client)
  (*##Dictionary will become just an Interface*)

newClient :Client
  (* *)
{
  id ::= _newClientId
  client ::= _newClient(id)
  clients[id] := client
  client
}

client(clientId :String) :Client
  (* *)
{
  clients.lookup(clientId, fun(client :Client) { client }, fun() { nil })
}

clientId(client :Client) :String
  (* *)
deferred

printOn(out :Output) :Void
  (* *)
{ clients.do(fun(client :Client){ client.printOn(out) }) }

private

_clientIdPrefix :String

  (* id prefix *)

_magic :Int
  (* id counter *)

_init :Self
  (* *)
{
  super._init
  clients := Dictionary.new
  _magic := 0
  self
}

_newClientId :String
  (* *)
{
  _magic := _magic+1
  _shuffle(_clientIdPrefix + _magic.printString)
}

_shuffle(preId :String) :String
  (* *)
{
  preId
}

_newClient(id :String) :Client
  (* a factory method to create clients of the appropriate type *)
deferred

}
