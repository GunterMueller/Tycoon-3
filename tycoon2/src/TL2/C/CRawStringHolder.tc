class CRawStringHolder

super CValueHolder(MutableString)

metaclass CRawStringHolderClass

public methods

valueClass():Class { MutableString }

value():MutableString
{
  handle.isNotNil
    ? {let a = MutableString.new(_length),
       for(0,_length-1,fun (i:Int)
         {a[i]:=tycoon.rts.tymem_peekChar(handle,i)}),
       a}
    : {let a:MutableString = nil}
}

rawStringValue():MutableString{ value() }

stringValue():String { value.isNotNil ? {String.fromSequence(value())}
                                      : {nil} }

"value:="(s:MutableString):MutableString
{
  handle.isNotNil ?
  {
    s.size <= _length
      ? {for(0,s.size-1,fun (i:Int)
           {tycoon.rts.tymem_pokeChar(handle,i,s[i])}),
	 for(s.size,_length-1,fun (i:Int)
	   {tycoon.rts.tymem_pokeChar(handle,i,'\000')}),
         value()}
      : {KeyNotFoundError.new(s,_length+1).raise}
  }
  : {nil}
}

setStringValue(v:String):String { value:=MutableString.fromReader(v.reader),
                                  stringValue() }

setRawStringValue(v:MutableString):MutableString { value:= v }

setFileValue(v:File):File
{
   let contents = MutableString.new(v.contentSize.asInt),
   v.openRead,
   v.readBuffer(contents,0,v.contentSize.asInt),
   v.close,
   value:=contents,
   v
}

private

_length:Int

methods

_allocate(length:Int)
{
  super._init,
  super._allocate(length),
  for(0,length-1,fun (i:Int) {tycoon.rts.tymem_pokeChar(handle,i,'\000')})
}

;
