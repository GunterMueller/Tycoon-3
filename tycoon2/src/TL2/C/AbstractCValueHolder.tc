class AbstractCValueHolder(P<:Object,N<:Object)
super Object
(**)
meta AbstractClass
{
handle :Int32

value :P
  (* *)
deferred

"value:="(:N):P
  (* *)
deferred

valueClass:Class
  (* *)
deferred

intValue:Int
  (* *)
{_raiseCoerceError2(value)}

shortValue:Int
  (* *)
{intValue}

charValue:Char
  (* *)
{_raiseCoerceError2(value)}

stringValue:String
  (* *)
{_raiseCoerceError2(value)}

rawStringValue:MutableString
  (* *)
{_raiseCoerceError2(value)}

realValue:Real
  (* *)
{_raiseCoerceError2(value)}

setIntValue(v:Int):Int
  (* *)
{_raiseCoerceError2(v)}

setShortValue(v:Int):Int
  (* *)
{_raiseCoerceError2(v)}

setCharValue(v:Char):Char
  (* *)
{_raiseCoerceError2(v)}

setStringValue(v:String):String
  (* *)
{_raiseCoerceError2(v)}

setRawStringValue(v:MutableString):MutableString
  (* *)
{_raiseCoerceError2(v)}

setFileValue(v:File):File
  (* *)
{_raiseCoerceError2(v)}

setRealValue(v:Real):Real
  (* *)
{_raiseCoerceError2(v)}

close :Void
  (* *)
{
  if( handle.isNotNil then:
  {
    tycoon.ansiC.free(handle)
    handle:=nil
  })
}

private

_allocate(size:Int) :Void
  (* *)
{
  handle:=tycoon.ansiC.malloc(size)
}

_raiseCoerceError2(v:Object) :Nil
  (* *)
{
  _raiseCoerceError(v,valueClass)
}

}
