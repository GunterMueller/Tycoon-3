class ServerSocket
super Socket
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Server Sockets: Sockets listening on a port and accepting connections

Author:  Andreas Gawecki
Date:    05-Dec-1996
Updates: 30-Dec-1996 Axel Wienberg: added reopen

*)
meta ServerSocketClass()

{
accept :StreamSocket
  (* *)
{
  _synchronizeBlockingCall({
    StreamSocket.fromHandle(_checkReturnCode(_dll.socket_accept(_handle)))
  })
}

private

_queueLength :Int

_init :Void
  (* *)
{
  _queueLength := 5
  super._init
}

_bind :Int
  (* *)
{
  synchronize({
    ret ::= if( _address.isNil then: {
      _checkReturnCode(_dll.socket_bind(_handle, nil, 0, _port))
    } else: {
      _checkReturnCode(
        _dll.socket_bind(_handle, _address.bytes , _address.bytes.size, _port))
    })
    if( _port = 0 then: {
       _initPort
    })
    ret
  })
}

_listen :Void
  (* *)
{
  synchronize({
    _checkReturnCode(_dll.socket_listen(_handle, _queueLength))
  })
}

_reopen :Void
  (* *)
{
  _handle := _checkReturnCode(_dll.socket_newServerSocket())
  _bind
  _listen
}

_open :Self
  (* *)
{
  _reopen
  super._open
}

}
