class IPAddressClass
super SimpleConcreteClass(IPAddress)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Metaclass of IPAddress

Author:  Andreas Gawecki
Date:    05-Dec-1996
Updates: 30-Apr-1999 A.Willomat: New TycoonOS bindings

*)
meta MetaClass
{
byName(name :String) :IPAddress
  (* *)
{
  addr ::= new
  result ::= tycoon.tycoonOS.net_getHostByName(name, addr.bytes, addr.bytes.size)
  if( result !== 0 then: {
    UnknownHostError.new(name).raise
  })
  addr
}

allByName(name :String) :Sequence(IPAddress)
  (* *)
{ nil }

localHostName :String
  (* *)
{
  buffer ::= MutableString.new(tycoon.tycoonOS.net_getMaxHostNameLen)
  result ::= tycoon.tycoonOS.net_getHostName(buffer, buffer.size)
  assert({ result == 0 })
  buffer.subString(0, tycoon.ansiC.strlen(buffer))
}

localHost :IPAddress
  (* *)
{
  byName(localHostName)
}

fromString(bytesString :String) :IPAddress
  (* for convenience, parses a string in dot-notation *)
{
  bytes ::= ByteArray.fromReader(
    Tokenizer.new(bytesString.reader, ".").
      map(fun(byteString :String) {
        byte ::= byteString.asInt
	if( ((byte < 0) || byte > 255) then: {
	  CoerceError.new(bytesString, ByteArray).raise
	})
	byte
      })
  )

  address ::= _new
  address.bytes := bytes

  address
}

private

}
