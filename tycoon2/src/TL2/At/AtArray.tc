class AtArray(E <: Object)
super Array(E), AtMutableSequence(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Mutable arrayed sequence of components
with indexed access in O(1) to every element
and a fixed size.

### AtMutableArray: more accurate, but too long

Author:  Axel Wienberg
Date:    25-Jun-1998
*)
meta AtArrayClass(E)
{

"[]:="(i :Int, e @: E) :Void
  (* *)
  require validKey(k)
  ensure self[k] == old e 
builtin

"[]@"(i :Int) :E
  (* Take out the component stored at index i
     The key <i> remains, and its associated value becomes nil@.
     All other elements stay at their old positions. *)
  require includesKey(i)
  ensure result == old self[i] && self[i].isNil && size = old size
builtin
{ nil@ }

__basicAtPut(i :Int, value :Object) :Object
  (* overwrite methods inherited from Object to call the right primitives: *)
{
  self[i] := fetch(_typeCast(value, :E))@
  value
}

__deepHollowCopy(mapping: IdDictionary(Object, Object)) :Void
  (* recursively allocate hollow copies for all transitive components,
     and set mapping[original] := hollow copy.
     Helper method for componentCopy. *)
{
  ;; arrays usually do not contain components (redefined in AtArray)
  mapping[self] := __hollowCopy
  for(0 to: size-1 do: fun(i:Int) {
    self[i].__deepHollowCopy(mapping)
  })
}

}
