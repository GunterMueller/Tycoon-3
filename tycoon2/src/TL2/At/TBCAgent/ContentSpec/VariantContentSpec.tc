class VariantContentSpec
super CompoundContentSpec
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 VariantContentSpec.tc

   Tycoon Business Conversation (TBC) for Tycoon 2
   -----------------------------------------------
   Content-specification for variants.  Technically, variant specs are the 
   same as record specs.  Each element represents a *possible* content-spec.  
   The content, however, only has one of these possibilities instantiated at 
   a time.  Therefore, the new()-method of VariantContent has to instantiate 
   (per convention) the first element only.  Switching between variants is 
   done by VariantContent.

   09.08.97 hw : created
   14.08.97 hw : inherits now from CompoundContentSpec
   
*)
meta CompoundContentSpecClass(VariantContentSpec)
{

visit(visitor :ContentSpecVisitor) :Void
  (* *)
{
  visitor.variantContentSpec(self)
}

instance() @:VariantContent
  (* *)
{
  VariantContent.new(self)@
}

varS():VariantContentSpec
  (* *)
{
  self
}

matches(other :ContentSpec) :Bool
  (* Return true iff other is a subtype of self, i.e. iff every value of
     type other may be treated like a value of type self.

     For Variants, this is the case iff other is a variant type,
     self and other offer the same variant names,
     and for corresponding variants, the entry in other is a subtype of the
     corresponding entry in self.
   *)
{
  (other.clazz = self.clazz) && (
    other2 ::= _typeCast(other, :Self)
			     ; safe, since same class and no type parameters!
    size = other2.size &&
    keys.all(fun(k :String){
      other2.includesKey(k) && self[k].matches(other2[k]) 
    })
  )
}

}
