class ContentSpecPrettyPrinter
super ContentSpecVisitor, PrettyPrintMixin
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ContentSpecPrettyPrinter.tc

   Tycoon Business Conversations (TBC) for Tycoon 2
   ------------------------------------------------
   An visitor for content-specs, which pretty-prints the specification.
   This visitor is used e.g. by "ContentSpec::printOn".

   09.08.97 hw : created
   06.10.97 hw : out
   23.10.97 hw : PPClass as metaclass
   01.11.97 hw : added "currencyContentSpec"
   03.03.98 hw : added .*SpecContentSpec

*)
meta PrettyPrinterClass(ContentSpecPrettyPrinter)
{

boolContentSpec( :BoolContentSpec) :Void
  (* *)
{
  out << "BOOL"
}

dateContentSpec( :DateContentSpec) :Void
  (* *)
{
  out << "DATE"
}

intContentSpec( :IntContentSpec) :Void
  (* *)
{
  out << "INT"
}

realContentSpec( :RealContentSpec) :Void
  (* *)
{
  out << "REAL"
}

stringContentSpec( :StringContentSpec) :Void
  (* *)
{
  out << "STRING"
}

currencyContentSpec( :CurrencyContentSpec) :Void
  (* *)
{
  out << "CURRENCY"
}

convSpecContentSpec( :ConvSpecContentSpec) :Void
  (* *)
{
  out << "CONVSPEC"
}

dialogSpecContentSpec( :DialogSpecContentSpec) :Void
  (* *)
{
  out << "DIALOGSPEC"
}

contentSpecContentSpec( :ContentSpecContentSpec) :Void
  (* *)
{
  out << "CONTENTSPEC"
}

recordContentSpec(spec :RecordContentSpec) :Void
  (* *)
{
  out << "RECORD\n"
  printNamedFields(spec)
  out << tab << "END"
}

variantContentSpec(spec :VariantContentSpec) :Void
  (* *)
{
  out << "VARIANT\n"
  printNamedFields(spec)
  out << "END"
}

singleChoiceContentSpec(spec :SingleChoiceContentSpec) :Void
  (* *)
{
  out << "SINGLE_CHOICE OF "
  spec.choiceSpec.visit(self)         ; just print out the choices type 
}

multipleChoiceContentSpec(spec :MultipleChoiceContentSpec) :Void
  (* *)
{
  out << "MULTIPLE_CHOICE OF "
  spec.choiceSpec.visit(self)        
}

sequenceContentSpec(spec :SequenceContentSpec) :Void
  (* *)
{
  out << "SEQUENCE OF "
  spec.seqSpec.visit(self)        
}

private

printNamedFields(spec :CompoundContentSpec) :Void
{
  tabInc
  spec.keysAndElementsDo(fun(key :String, c :ContentSpec):Void {
    out << tab << key << " OF "
    c.visit(self)
    out << '\n'
  })
  tabDec
}

}
