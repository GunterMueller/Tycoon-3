class ContentSpec
super Object
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ContentSpec.tc

   Tycoon Business Conversation (TBC) for Tycoon 2
   -----------------------------------------------
   ContentSpec is the abstract root-class for all other ContentSpecs.
   Three main types of content-specs are distinguishable:
   1)  Atomic content-specs are expressed as subclasses of abstract class 
       AtomicContentClass.
   2)  Named content-specs are necessary for record- and variant-specs only 
       and are implemented via dictionaries in the related abstract 
       superclass CompoundContentSpec, from which RecordContentSpec and 
       VariantContentSpec inherit.  In fact, they are all dictionaries by 
       inheritance.  So the "key" entry is the name of the spec (:String) and 
       the main entries are other :ContentSpec.  Note: The list of named 
       ContentSpecs of a dialog will be for simplicity a RecordContentSpec,so 
       each ContentSpec of a dialog is named as the grammar for TBC requires.
   3)  Choices are implemented as subclasses of abstractclass ChoiceContentClass.
       They are similar to compounds in being dictionaries as well, but differ 
       in their dictionary element type: they aggregate contents, not 
       content-specs as possible values for a concrete content.

   08.08.97 hw : created
   17.10.97 hw : print
   
*)
meta AbstractClass
{

visit(visitor :ContentSpecVisitor) :Void
  (* Deferred method for applying visitor-pattern. *)
  deferred

matches(other :ContentSpec) :Bool
  (* Return true iff other is a subtype of self, i.e. iff every value of
     type other may be treated like a value of type self.

     Checks conformance between two ContentSpec using RTTI.  (i.e. ###?)
   *)
  deferred

instance() @:Content
  (* Return a new instance that satisfies this specification, initialized 
     with a default value.  Since ContentSpecs are trees, and Contents too, 
     the constructor of each non-atomic content must create the sub-tree 
     specified in the related Spec.  Therfore, each new-method of any 
     content-class must be passed its Spec.  *)
  deferred

recS():RecordContentSpec
  deferred

varS():VariantContentSpec
  (* *)
  deferred

schS():SingleChoiceContentSpec
  (* *)
  deferred

mchS():MultipleChoiceContentSpec
  (* *)
  deferred

printOn(o :Output) :Void
  (* *)
{
  visit(ContentSpecPrettyPrinter.new(o))
}

}
