class Message
super ITCMessage
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 Message.tc

   Tycoon Business Conversation (TBC) for Tycoon 2
   -----------------------------------------------
   Abstract rootclass for all messages understood by Agents/Roles.
   The entire communication between the Framework, Places, Agents and Roles is 
   accomplished by sending subclasses of Message.  The ITC-subsystem is used 
   for transport.  Therefore, TBCMessage is subclass of ITCMessage and cares of
   sender, receiver and names this way.
   To dispatch messages, a pattern similar to the visitor-pattern is used.
   Receiver are always instances of subclasses of :Role.
   Message defines a deferred method 'handle(:Role):Message',
   which gets an actual dispatch-object as argument.  In each (concrete) 
   subclass of Message, 'handle' must be overridden to call the right
   method of the dispatcher. Therfore, self is the argument to it, and the
   dispatcher-method can return a reply-msg (or nil, indicating there is no 
   reply). For every subclass of Message there must be an appropriate method 
   in the dispatcher (may be leaved out, causing an exception).
   See abstract rootclass :MessageHandler for definitions.
   
   22.08.97 hw : created
   
*)
meta AbstractClass
{

handle(h :MessageHandler) @:Message
  (* *)
deferred

asMessagePerformerDialog :MessagePerformerDialog
  (* safe downcast *)
{
  ;; to be redefined in class MessagePerformerDialog
  TBCError.new("not a performer dialog message", nil, nil).raise
}

asMessageCustomerDialogRequest :MessageCustomerDialogRequest
{
  ;; to be redefined in class MessagePerformerDialog
  TBCError.new("not a customer dialog request message", nil, nil).raise
}

}
