class TestMore
super Trace
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 TestMore.tc

   Tycoon Business Conversations (TBC) for Tycoon 2
   ------------------------------------------------
   Test-class. Examples for TBC are in this methods.
   Used a class to be able to typecheck this.

   17.09.97 hw : created
  
*)
meta SingletonClass(TestMore)
{

test2():RecordContentSpec
  (*-------------------------------------------------------------------------*)
{
  myAdressSpec @::= RecordContentSpec.new@
  myAdressSpec["person"]    := RecordContentSpec.new@

  myAdressSpec["person"].recS["name"]    := StringContentSpec.new@
  myAdressSpec["person"].recS["vorname"] := StringContentSpec.new@

  myAdressSpec["anschrift"]            := RecordContentSpec.new@
  myAdressSpec["anschrift"].recS["str"]:= StringContentSpec.new@
  myAdressSpec["anschrift"].recS["plz"]:= IntContentSpec.new@
  myAdressSpec["anschrift"].recS["ort"]:= SingleChoiceContentSpec.new(StringContentSpec.new@)@

  myAdressSpec["besuche"] := MultipleChoiceContentSpec.new(StringContentSpec.new@)@

  myAdressSpec
}

test3 :Void
  (*-------------------------------------------------------------------------*)
{
  x @::= test2.instance@

  x["person"].rec["vorname"].str := "Karin"

  x["person"].rec["vorname"].str

  string @::= StringContentSpec.new@
  hh @::= string.instance@ hh.str := "Hamburg"
  s  @::= string.instance@ s.str := "Stuttgart"
  ni @::= string.instance@ ni.str := "Nienburg a.d. Weser"

  x["anschrift"].rec["ort"].sch["2000"] := hh.componentCopy@
  x["anschrift"].rec["ort"].sch["7000"] := s.componentCopy@
  x["anschrift"].rec["ort"].sch["3000"] := ni.componentCopy@

  x["besuche"].mch["2000"] := hh@
  x["besuche"].mch["3000"] := ni@
  x["besuche"].mch["7000"] := s@

  x["anschrift"].rec["ort"].sch.choose("2000")    
  x["anschrift"].rec["ort"].sch.choose("3000")
;  x["anschrift"].rec["ort"].sch.chosenContent.str    --> "Nienburg.." 

  x["besuche"].mch.choose("2000")
  x["besuche"].mch.choose("3000")
  x["besuche"].mch.choose("3000")
  x["besuche"].mch.choose("1234")
  x["besuche"].mch.choose("7000")
  x["besuche"].mch.dechoose("7000")
;  x["besuche"].mch.chosen    --> "2000", "3000"   

  x
}

test4 :Void
  (*-------------------------------------------------------------------------*)
{
  test2.visit(ContentSpecPrettyPrinter.new(tycoon.stdout))
}

testCvSpc():ConversationSpec
  (*-------------------------------------------------------------------------*)
{
  x @::= ConversationSpec.new("Kuchen kaufen", "Anmelden")@

  x.newDialog("Anmelden")
  x.newDialog("Hauptmenu")
  x.newDialog("Bezahlen")
  x.newDialog("Tschuess")

  x["Anmelden"].contentSpec["Name"]     := StringContentSpec.new@
  x["Anmelden"].contentSpec["Kennwort"] := StringContentSpec.new@
  x["Anmelden"].newRequest("Login")
  x["Anmelden"].newRequest("Abort")
  x["Anmelden"].replies["Login"].add(x["Anmelden"])
  x["Anmelden"].replies["Login"].add(x["Hauptmenu"])
  x["Anmelden"].replies["Abort"].add(x["Tschuess"])

  x["Hauptmenu"].contentSpec["Nachricht"]   := StringContentSpec.new@
  x["Hauptmenu"].contentSpec["Kuchensorte"] := StringContentSpec.new@
  x["Hauptmenu"].contentSpec["Stuecke"]     := IntContentSpec.new@
  x["Hauptmenu"].newRequest("Kaufen")
  x["Hauptmenu"].newRequest("Nicht kaufen")
  x["Hauptmenu"].replies["Kaufen"].add(x["Bezahlen"])
  x["Hauptmenu"].replies["Kaufen"].add(x["Hauptmenu"])
  x["Hauptmenu"].replies["Nicht kaufen"].add(x["Tschuess"])

  x["Bezahlen"].contentSpec["Nachricht"]:= StringContentSpec.new@
  x["Bezahlen"].contentSpec["Preis"]:= RealContentSpec.new@
  x["Bezahlen"].contentSpec["Kreditkartnennummer"]:= IntContentSpec.new@
  x["Bezahlen"].newRequest("Zahlen")
  x["Bezahlen"].newRequest("Hauptmenu")
  x["Bezahlen"].replies["Zahlen"].add(x["Tschuess"])
  x["Bezahlen"].replies["Hauptmenu"].add(x["Hauptmenu"])

  x["Tschuess"].contentSpec["Nachricht"] := StringContentSpec.new@

  x
}

test5():Void
  (*-------------------------------------------------------------------------*)
{
  testCvSpc.visit(TBCSpecPrettyPrinter.new(tycoon.stdout))
}

test6 :Void
  (*-------------------------------------------------------------------------*)
{
  oldAddressSpec @::= RecordContentSpec.new@
  oldAddressSpec["person"]    := RecordContentSpec.new@

  oldAddressSpec["person"].recS["name"]    := StringContentSpec.new@

  newAddressSpec ::= test2

  assert({ oldAddressSpec.matches(newAddressSpec) })
  assert({ !newAddressSpec.matches(oldAddressSpec) })

  oldI @::= oldAddressSpec.instance@
  newI @::= newAddressSpec.instance@

  oldI["person"] := newI["person"].componentCopy@  ;; ### take out?
  oldI
}


testP():ITCMessagePort(String)
  (*-------------------------------------------------------------------------*)
{
  port:ITCMessagePort(String) := ITCMessagePort.new
  Thread.new({
    m @::= port.get@
    tycoon.stdout << "got <" << m << ">\n"
  })
  port
}

}
