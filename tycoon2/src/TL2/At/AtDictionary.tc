class AtDictionary(K <: Object, E <: Object)
super AtMutableKeyedContainer(K, E), AtIndex(K,E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Dynamic mapping of keys to components

mostly copy & paste from Dictionary

Author:  Axel Wienberg
Date:    25-Jun-1998
*)
meta AtDictionaryClass(K, E)
{

memoize(k :K, ifAbsent :Fun()@:E) :E
  (* overrides MutableKeyedContainer.memoize for efficiency 
 memoize the result of calling <ifAbsent> for <k>.
   <ifAbsent> is called iff  !includesKey(k) || { self[k].isNil }
   If called, <ifAbsent> must return a non-nil value, which is stored under key <k>. 
 & result == self[k] *)
require validKey(k)
  ensure includesKey(k) & self[k].isNotNil
    
{
  i ::= _findIndex(k)
  e ::= _elements[i]
  if( e.isNil then: {
    c @::= ifAbsent[]@
    e := c  ;; save a reference to the component
    self[k] := c@
  })
  e
}

"[]@"(k :K) :E
  (* Take out the component stored at key k
     The key remains, and the value assigned to <k> becomes nil@.
     Other elements stay at their old key positions. *)
  require includesKey(k)
  ensure result == old self[k] && self[k].isNil && size = old size
{
  i ::= _findIndex(k)
  if( _keys[i].isNil then: { _raiseKeyNotFoundError(k) })
  _elements[i]@
}


"[]:="(k :K, e @:E) :Void
  (* *)
require validKey(k)
  ensure self[k] == e
{
  _add(k,e@)
}

swap(k1 :K, k2 :K) :Void
  (* Exchange elements with keys k1 and k2 *)
require includesKey(k1) & includesKey(k2)
{
  i1 ::= _findIndex(k1)
  if( _keys[i1].isNil then: { _raiseKeyNotFoundError(k1) })
  i2 ::= _findIndex(k2)
  if( _keys[i2].isNil then: { _raiseKeyNotFoundError(k2) })
  
  temp@ ::= _elements[i1]@
  _elements[i1] := _elements[i2]@
  _elements[i2] := temp@
}

private

}
