class AtReader(E <: Object)
super Object
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Streams producing objects of type E

Note: we would like 

  E1 <: E2 => AtReader(E1) <: AtReader(E2)

  i.e. AtReader(Student) <: AtReader(Person)

Author:  Axel Wienberg
Date:    09-Oct-1998
Original: Reader.tc by Andreas Gawecki
*)
meta AbstractClass
{

read @:E
  (* *)
deferred

;;as(T <: Object,
;;   atContainerClass :AbstractAtContainerGenerator(E,T)):T
;;  (* Stream over the elements of the container.
;;     ## monitor readers wich must be closed
;;	  with WeakRef and finalize it...
;;   *)
;;{ atContainerClass.fromAtReader(self) }

do(statement :Fun(@:E):Void) :Void
  (* Perform statement for each e in the receiver *)
{
  e @::= read@
  while({ e.isNotNil } do: {
    statement[e@]
    e := read@
  })
}

map(F <:Object, f :Fun(@:E):F) :Reader(F)
  (* Return an iteration over f(e) for each e in the receiver. *)
{
  FunReader.new({
    e @::= read@
    if( e.isNil
      then: fun():F { nil }
      else: { f[e@] }) })
}

mapC(F <:Object, f :Fun(@:E)@:F) :AtReader(F)
  (* Return an iteration over f(e) for each e in the receiver. *)
{
  FunAtReader.new({
    e @::= read@
    if( e.isNil
      then: fun()@:F { nil@ }
      else: { f[e@]@ })@ }) 
}

inject(T <:Object, base :T, g :Fun(:T,@:E):T) :T
  (* Accumulate each element of the receiver using g, starting with 'base'. *)
{
  e @::= self.read@
  if( e.isNil
    then: fun(){base}
    else: {inject(g[base,e@], g)})
}

injectC(T <:Object, base @:T, g :Fun(@:T,@:E)@:T) @:T
  (* Accumulate each element of the receiver using g, starting with 'base'. *)
{
  e @::= self.read@
  if( e.isNil
    then: fun(){base@}
    else: {injectC(g[base@,e@]@, g)@})@
}

fold(T <: Object , f :Fun(@:E):T , g :Fun(:T, :T):T) :T
  (* fold g left-associatively around all elements after applying f 
 g[ g[ g[f[e1@],f[e2@]], f[e3@]], f[e4@]] 
 returns nil, if no elements *)
{
  first @::= read@
  if( first.isNil then: fun(): T { nil } else: {
    acc ::= f[first@]
    elem @::= read@
    while({elem.isNotNil} do: {acc := g[acc, f[elem@]] elem := read@ })

    acc
  })
}

private

}
