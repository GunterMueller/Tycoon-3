class ResourceManager
super Monitor
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Helper for ResourceClass. See documentation there.

Author:  Andreas Gawecki
Date:    31-Jan-1997
Updates: (Date)	  (Name)	(Description)
*)
meta SimpleConcreteClass(ResourceManager)
{
openResourceTransaction(T <:Resource, statement :Fun():T) :T
  (* *)
{
  synchronize(fun() {
    resource ::= statement[]
    if( resource.isNotNil then: {
      _add(resource.weakRef)
    })
    resource
  })
}

closeResourceTransaction(T <:Resource, resource :T, statement :Fun():Void) :Void
  (* *)
{
  synchronize(fun() {
    statement[]
    _remove(resource.weakRef)
  })
}

allOpenResources :List(WeakRef(Resource))
  (* *)
{
  _extent
}

commit(commitment :Commitment, statement :Fun():Void) :Void
  (* notify all open reources to prepare for a commit,
     and execute 'statement'.
     if the system has been restarted,
     all resources must be re-opened in chronological order.
   *)
{
  synchronize(fun() {
    _commit(commitment, statement, _extent)
  })
}

private

_extent :MutableList(WeakRef(Resource))
  (* a list of all open resources, ordered by opening time.
     includes at least an instance of AnsiC and TycoonOS *)

_init :Void
  (* *)
{
  super._init
  _extent := EmptyList.instance
  self
}

_add(wr :WeakRef(Resource)) :Void
  (* *)
{
  if( !_extent.includes(wr) then: {
    _extent := MutableList.cons(wr, _extent)
  })
}

_remove(wr :WeakRef(Resource)) :Void
  (* we never actually remove ALL resources, at least TycoonOS and AnsiC must remain open!
  *)
{
  if( _extent.head == wr
    then: { _extent := _extent.tail void }
    else: { _remove1(wr, _extent, _extent.tail) })
}

_remove1(wr :WeakRef(Resource), pred :MutableList(WeakRef(Resource)), this :MutableList(WeakRef(Resource))) :Void
  (* *)
{
  if( !this.isEmpty then: {
    if( this.head == wr
      then: { pred.tail := this.tail void }
      else: { _remove1(wr, this, this.tail) })
  })
}

_commit(commitment :Commitment, statement :Fun():Void, resources :List(WeakRef(Resource))) :Void
  (* *)
{
  if( resources.isEmpty
    then: { statement[] }
    else: { resource ::= resources.head.value
        assert({ resource.isNotNil })
	resource.commit(commitment, fun() {
                _commit(commitment, statement, resources.tail)
	      })
      })
}

}
