class Writer(E <: Object)
super Stream(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Streams consuming objects.

Note: we would like 

  E1 <: E2 => Writer(E2) <: Writer(E1)

  i.e. Writer(Person) <: Writer(Student)

Author:  Andreas Gawecki
Date:    13-Feb-1996
Updates: (Date)	  (Name)	(Description)
*)
meta AbstractClass
{
write(e :E) :Void
  (* *)
deferred

writeAll(aCollection :Collection(E)) :Void
  (* write the given object into the receiver 
 write all objects in aCollection  into the receiver *)
{
  aCollection.do(fun(e :E){
    write(e)})
  }

flush :Void
  (* 'write out' buffered objects, if any.
     Default: do nothing. *)
{
  }

}
