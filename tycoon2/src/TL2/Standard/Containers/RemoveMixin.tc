class RemoveMixin(E <: Object)
super Container(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

  remove for containers with variable extent

Author: Axel Wienberg
Date:   09-Jun-1998
Updates: (Date)	  (Name)	(Description)
*)
meta AbstractClass
{

clear :Void
  (* *)
  ensure isEmpty
  deferred

remove(e :Object) :E
  (* *)
  ensure result == old find(e)
      && (!old includes(e)
	  || (size = old size - 1
              && occurrencesOf(e) = old occurrencesOf(e) - 1))
  deferred

without(e :Object) :Self
  (* *)
{ c ::= copy
  c.remove(e)
  c
}

removeAll(aCollection :Collection(Object)) :Void
  (* Destructive difference
     normative implementation *)
{
  aCollection.do(fun(e :Object) { remove(e) })    
}

removeWhere(pred :Fun(:E):Bool) :Void
{
  removeAll(_removeSafeCollection(select(pred)))
}

private

_removeSafeCollection(r :Collection(E)) :Collection(E)
{
  ;; may be redefined to return r in subclasses
  ;; in which remove does not affect active iterations
  r.as(GapArray)
}

}
