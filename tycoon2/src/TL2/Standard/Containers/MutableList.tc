class MutableList(E <:Object)
super AbstractList(E,MutableList(E)), MutableSequence(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Mutable recursive lists
	 
Author:  Andreas Gawecki
Date:    14-Feb-1996
Version: 1.0
Updates: (Date)	  (Name)	(Description)
*)
meta MutableListClass(E )

{
asList :List(E)
  (* *)
{
  self
  }

"head:="(e :E) :E
  (* *)
require !isEmpty
  {
  _head := e
  }

"tail:="(l :MutableList(E)) :MutableList(E)
  (* *)
require !isEmpty
  {
  _tail := l
  }

"[]:="(i :Int, e :E) :E
  (* *)
{ if( i = 0 then: {
    _head := e
  } else: {
    _tail[i-1] := e
  })
}

reverse :Void
  (* *)
{ l :MutableList(E) := self
  ; this works because reverseReader creates a copy 
  reverseReader.do(fun(e:E) {
    l.head := e
    l := l.tail
  })
}

copy :Self
  (* *)
{ c ::= shallowCopy
  c.tail := c.tail.copy
  c
}

private

}
