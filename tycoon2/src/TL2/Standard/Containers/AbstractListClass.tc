class AbstractListClass(E <:Object, Instance <:AbstractList(E,Instance))
super ConsGeneratorMixin(E, Instance),
      AbstractSequenceGenerator(E, Instance),
      ConcreteClass(Instance)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Abstract Metaclass for Lists

Author:  Andreas Gawecki
Date:    17-Mar-1996
Updates: (Date)	  (Name)	(Description)
	 9-May-96 Axel Wienberg is subclass of AbstractContainerClass now
	 09-Jun-1998 Axel Wienberg implements AbstractSequenceGenerator now
*)
meta MetaClass
{
new :Instance
  (* create empty list *)
deferred

cons(e :E, list :Instance) :Instance
  (* *)
{
  l ::= _new
  l._head := e
  l._tail := list
  l
}

concatAll( sequences: Sequence(Sequence(E)) ) :Instance
  (* The result is a concatenation of the given sequences at the time of creation
     (i.e. there is no sharing of structure). *)
{
  sequences.reverseReader.inject(new,
    fun(accu :Instance, s :Sequence(E)) {
      _reversePrepend(s.reverseReader, accu)
    })
}

concat(s1 :Sequence(E), s2 :Sequence(E)) :Instance
{
  _reversePrepend(s1.reverseReader,
    _reversePrepend(s2.reverseReader,
      new))
}

reverse(s :Sequence(E)) :Instance
  (* *)
{
  _reversePrepend(s, new)
}

fromReader(reader :Reader(E)) :Instance
  (* *)
{
  reverse(fromReverseReader(reader))
}

fromReverseReader(reader :Reader(E)) :Instance
  (* *)
{
  _reversePrepend(reader, new)
}

fromContainer(container :Container(E)) :Instance
  (* result will contain exactly the elements contained in container
     at the time of creation. *)
{
  ;; order is not specified, so we use the reverse of container.do
  _reversePrepend(container, new)
}

fromContainerWithMap(F <:Object, container :Container(F), map :Fun(:F):E) :Instance
  (* result will contain the elements obtained by applying map to
     each element of container at the time of creation. *)
{
  ;; order is not specified, so we use the reverse of container.do
  result ::= new
  container.do(fun(f:F){
    result := cons(map[f], result)
  })
  result
}

fromSequence(sequence :Sequence(E)) :Instance
  (* result will contain exactly the elements contained in sequence
     at the time of creation, in the same order. *)
{
  fromSubSequence(sequence, 0, sequence.size)
}

fromSubSequence(sequence :Sequence(E), start :Int, n :Int) :Instance
  (* *)
{
  result ::= new
  i ::= start+n-1
  while({ i >= start } do: {
    result := cons(sequence[i], result)
    i := i - 1
  })
  result
}

with0 :Instance
  (* *)
{ new }

private

_reversePrepend(c :Collection(E), accu :Instance) :Instance
  (* prepend all elements of c in reversed order *)
{
  accu ::= accu
  c.do(fun(e:E){
    accu := cons(e, accu)
  })
  accu
}

}
