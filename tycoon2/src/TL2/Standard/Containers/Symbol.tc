class Symbol
super String
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta SymbolClass
{
_brand_Symbol :Void
  (* *)
{ }

name :String
  (* ### compatibility with pre-bootstrap system *)
{ self }

asSymbol :Symbol
  (* *)
{
  self
}

printOn(out :Output) :Void
  (* *)
{ out.writeAll(self)
}

"="(x :Object) :Bool
  (* *)
{
  self == x || (
    clazz ::= x."class"
    (clazz == String || clazz == MutableString ) &&
      (  ; if clazz == Symbol, we know stringEqual will be false, so we dont have to check 
      x ::= _typeCast(x, :String)
      stringEqual(x)
      ))
}

equalityHash :Int
  (* *)
{ identityHash }

initHash :Void
  (* to be called by the superclass before releasing the symbol to the general public
     (could as well be private if the typechecker were clever enough) *)
{
  _setHash(super.equalityHash)
}
}
