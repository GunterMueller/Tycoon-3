class OrderedSequence(E <: Ordered(E), S <:OrderedSequence(E, S))
super Sequence(E), Ordered(S)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 lexical order on the elements of a sequence *)
Self <: S
meta AbstractClass
{
order(x :S) :Int
  (* *)
{
  r1 ::= reader
  r2 ::= x.reader
  _order(r1,r2)
}

private

_order(r1 :Reader(E), r2 :Reader(E)) :Int
  (* *)
{
  e1 ::= r1.read
  e2 ::= r2.read
  if( e1.isNil
  then: { if( e2.isNil
      then: { 0 }
      else: { (-1 )}) }
  else: { if( e2.isNil
      then: { 1 }
      else: { o ::= e1.order(e2)
          if( o = 0
	  then: { _order(r1, r2) }
	  else: { o }) }) })
}

}
