class DictionaryClass(K <: Object, E <: Object)
super ConcreteClass(Dictionary(K,E))
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Metaclass of class Dictionary
	 
Author:  Andreas Gawecki
Date:    15-Feb-1996
Updates: (Date)	  (Name)	(Description)

*)
meta MetaClass
{

new @:Dictionary(K,E)
  (*##initialCapacity will become an optional parameter*)
{
  fetch(new)@
}

new1(initialCapacity :Int) @:Dictionary(K,E)
{
  fetch(new1(initialCapacity))@
}

new :Dictionary(K,E)
  (*##initialCapacity will become an optional parameter*)
{
  new1(0)
}

new1(initialCapacity :Int) :Dictionary(K,E)
  (*##initialCapacity will become an optional parameter*)
{
  instance ::= _new
  instance._init1(initialCapacity)
  instance
}

fromPairs(pairs :Collection(Pair(K,E))) :Dictionary(K,E)
  (* construct a Dictionary from a collection of key/value pairs.
     For each key <k>, the resulting dictionary contains the last value
     associated with <k> in <pairs>. *)
{
  d ::= new
  pairs.do(fun(p :Pair(K,E)) {
    d[p.first] := p.second
  })
  d
}

fromMultiPairs(pairs :Collection(Pair(K,E))) :Dictionary(K,List(E))
  (* construct a Dictionary from a collection of key/value pairs.
     For each key <k>, the Dictionary contains a list of all values
     associated with <k> in <pairs> (in no particular order). *)
{
  d ::= Dictionary.new
  pairs.do(fun(p :Pair(K,E)) {
    key ::= p.first
    element ::= p.second
    d.lookup(key,
      fun(l :List(E)) {
        d[key] := List.cons(element, l)
      }, {
        d[key] := List.with1(element)
      })
  })
  d
}

}
