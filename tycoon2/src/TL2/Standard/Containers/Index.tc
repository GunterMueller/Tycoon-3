class Index(K <: Object, E <: Object)
super RemoveKeyMixin(K, E), LinearProbingMixin(K, E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Dynamic mapping of keys to values

Subclasses have to define a way to add key/value-pairs (using _add)

Author:  Axel Wienberg
Date:    02-Oct-1998
History: Mostly moved here from Dictionary
*)
meta AbstractClass
{

includesKey(k :K) :Bool
  (* *)
{
  _keys[_findIndex(k)].isNotNil
}

"[]"(k :K) :E
  (* *)
{
  i ::= _findIndex(k)
  if( _keys[i].isNotNil then: {
    _elements[i]
  } else: {
    _raiseKeyNotFoundError(k)
  })
}

lookup(k :K, T <:Void,
    ifPresent :Fun(:E):T,
    ifAbsent :Fun():T) :T
  (* *)
{
  i ::= _findIndex(k)
  if( _keys[i].isNotNil then: {
    ifPresent[_elements[i]]
  } else: {
    ifAbsent[]
  })
}

clear :Void
  (* *)
  ensure isEmpty
{
  for(0 to: _keys.size-1 do: fun(i :Int) {
    _keys[i] := nil
    _elements[i] := nil
  })
  _elementCount := 0
}

locate(e :Object) :K
  (* more efficient reimplementation.

     Answer the key of the given element, or nil if absent.
     If more than one element is equal to 'e', Containers that impose
     an ordering of their elements answer the key of
     the 'first' element, others choose an arbitrary element. *)
{
  if( e.isNotNil then: {
    i ::= _elements.locate(e)
    if( i.isNotNil then: { _keys[i] } else: { nil })
  } else: {
    super.locate(e)
  })
}

detectKey(p :Fun(:E):Bool) :K
  (* Answer the key of an element for which 'p' evaluates
     to true, or nil if no such element exists.
     If more than one such element exists, Containers that impose
     an ordering of their elements answer the key of
     the 'first' element, others choose an arbitrary element. *)
{
  i ::= 0
  _keys ::= _keys
  _elements ::= _elements
  n ::= _keys.size
  while({ i < n
	  && ( _keys[i].isNil ||  !p[_elements[i]] ) } do: {
    i := i + 1
  })
  if( i < n then: { _keys[i] } else: { nil })
}

keys :Reader(K)
  (* *)
{
  i ::= (-1)
  n ::= _keys.size
  FunReader.new({
    k :K := nil
    while({(i := i + 1) < n && (k := _keys[i]).isNil} do:
      {})
    k
  })
}

keysAndElementsDo(statement :Fun(:K,:E):Void) :Void
  (* Perform statement for each k with element e in the receiver. 
 more efficient redefinition *)
{
  for(0 to: _keys.size-1 do: fun(i :Int) {
    k ::= _keys[i]
    if( k.isNotNil then: {
      statement[k, _elements[i]]
    })
  })
}

removeKey(k :K) :E
  (* remove the element with key 'k' *)
  require validKey(k)
  ensure !includesKey(k)
{
  i ::= _findIndex(k)
  if( _keys[i].isNotNil then: {
    _keys[i] := nil
    e ::= _elements[i]
    _elements[i] := nil
    _elementCount := _elementCount-1
    _fixCollisions(i)
    e
 } else: {
   nil
 })
}

printOn(out :Output) :Void
  (* *)
{
  className :String := self."class".name  ;##allow 'class' as identifier 
  out.writeAll(className)
  out.write('{')
  isFirst ::= true
  keysAndElementsDo( fun(k :K, e :E){
    if( !isFirst then: {out.write(' ')})
    isFirst := false
    out.write('[')
    k.printOn(out)
    out.writeAll("]:=")
    e.printOn(out)})    
  out.write('}')
}

copy :Self
  (* *)
{ ref(componentCopy@)
}

private

_keys @:MutableArray(K)

_elements @:MutableArray(E)

_moveTo(i :Int, ii :Int) :Void
  require _keys[ii].isNil
       && _elements[ii].isNil
  ensure _keys[ii] == old _keys[i]
      && _elements[ii] == old _elements[i]
      && _keys[i].isNil
      && _elements[i].isNil
{
  _keys[ii] := _keys[i]
  _elements[ii] := _elements[i]
  _keys[i] := nil
  _elements[i] := nil
}

_init1(initialSize :Int) :Void
  (* *)
{
  n ::= 2
  while({n <= initialSize} do:{n := 2*n })
  _keys := MutableArray.new(n)@
  _elements := MutableArray.new(n)@
  _elementCount := 0
  super._init
}

_add(k :K, e :E) :Void
  (* *)
{
  i ::= _findIndex(k)
  oldKey ::= _keys[i]
  _keys[i] := k
  _elements[i] := e
  if( oldKey.isNil then: {
    _elementCount := _elementCount+1
    _adjustSize
  })
}

_grow :Void
  (* *)
{
  oldKeys ::= _keys
  oldElements ::= _elements
  oldElementCount ::= _elementCount
  oldSize ::= oldKeys.size
  _init1(oldSize) ; this doubles size 

;
;  for(0, oldSize-1, fun(i :Int) {
;    tycoon.stdout.write(oldKeys[i].isNotNil
;      ? { '@' } : { ':' })
;      }),
;

  for(0 to: oldSize-1 do: fun(i :Int) {
    k ::= oldKeys[i]
    if( k.isNotNil then: {
      j ::= _findIndex(k)
      assert({ _keys[j].isNil })
      _keys[j] := k
      _elements[j] := oldElements[i]
    })
  })
  _elementCount := oldElementCount
}

}
