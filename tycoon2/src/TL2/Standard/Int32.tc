class Int32
super Integer(Int32)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

32 bit Integer values

##will be obsolete after Bootstrap 
##will become obsolete after bootstrap
##will further be needed ???? (handles ?)

   Updates: (Date)    (Name)            (Description)
            03-Mar-99 Andre Willomat    new tycoonOS

*)
Self = Int32
meta Int32Class
{

printOn(out :Output) :Void
  (* *)
{
  out.writeAll("Int32:")
  super.printOn(out)
}

asInt :Int
  (* *)
{ tycoon.tycoonOS.int32_asInt(self) }

zero :Self
  (* *)
{Int32.fromInt(0)}

one :Self
  (* *)
{Int32.fromInt(1)}

ten :Self
  (* *)
{Int32.fromInt(10)}

order(x :Int32) :Int
  (* *)
{ tycoon.tycoonOS.int32_order(self, x) }

"+"(x :Int32) :Int32
  (* *)
{ tycoon.tycoonOS.int32_add(self, x) }

"-"(x :Int32) :Int32
  (* *)
{ tycoon.tycoonOS.int32_sub(self, x) }

"*"(x :Int32) :Int32
  (* *)
{ tycoon.tycoonOS.int32_mul(self, x) }

"/"(x :Int32) :Int32
  (* *)
{
  if( x != zero
    then: {privateDiv(x)}
    else: {  ArithmeticError.new("division by zero").raise })
  }

"%"(x :Int32) :Int32
  (* *)
{
  if( x != zero
    then: {privateMod(x)}
    else: {  ArithmeticError.new("division by zero").raise })
  }

private

privateDiv(x :Int32) :Int32
  (* *)
{ tycoon.tycoonOS.int32_div(self, x) }

privateMod(x :Int32) :Int32
  (* *)
{ tycoon.tycoonOS.int32_mod(self, x) }

}
