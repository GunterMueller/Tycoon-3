class OSError
super Exception
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Updates: (Date)		(Name)		(Description)
         03-Mar-99	Andre Willomat	New tycoonOS subsystem
*)
meta OSErrorClass()

{
os :OS
  (* the OS the error occurred (not necessarily
     the same as the current OS due to race conditions
   *)

error :Int
  (* the OS-dependent error number, comparable to the values
     returned by the self.os.E* family of methods *)

errorDetail :Int
  (* Subsystem specific error code (Win32, WinSocket, ...) *)

msg :String
  (* a message describing the error, or nil *)

subject :Object
  (* the complaining object *)

source :DLL
  (* the external source subsystem *)

printOn(out :Output) :Void
  (* *)
{
  out.writeString(clazz.name + ": ")
  subject.printOn(out)
  out.nl
  ; Errors >= 6000 has a detailed subsystem error code ...
  if( error >= 6000 then: {
     out.writeString(os.clazz.name + "(" + error.printString + "." + errorDetail.printString + "): ")
  } else: {
     out.writeString(os.clazz.name + "(" + error.printString + "): " )
  })
  out.writeString(msg)  
}


private

_init :Void
  (* *)
{
  super._init
  os := tycoon.os
  error := source.errorCode()
  errorDetail := source.errorCodeDetail()
  msg := source.getErrorText()
  source.resetError()
  self
}

}
