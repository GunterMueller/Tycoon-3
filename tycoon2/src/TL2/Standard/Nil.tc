class Nil
super Object
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Protocol for the undefined object 'nil'

Author:  Andreas Gawecki
Date:    01-Mar-1995
Version: 1.0
Updates: (Date)	  (Name)	(Description)

*)
meta OddballClass
{
printString :String
  (* *)
{
  "nil"
  }

printOn(out :Output) :Void
  (* *)
{
  printString.do(fun(ch :Char) {out.write(ch)})
  }

isNil :Bool
  (* *)
{
  true
  }

isNotNil :Bool
  (* *)
{
  false
  }

__deepHollowCopy(:IdDictionary(Object, Object)) :Void
  (* recursively allocate hollow copies for all transitive components,
     and set mapping[original] := hollow copy.
     Helper method for componentCopy. *)
{  ;; nil has a special meaning for components (means no component)
   ;; so there is nothing to do!
}

componentCopy @: Self
  (* *)
{ nil@ }

private

_hash :Int
  (* not handled by tvm *)
{ 0 }

_setHash(hash :Int) :Int
  (* *)
{ assert({ self.isNotNil }) }

__hollowCopy : Self
  (* not handled by tvm *)
{ nil }

shallowCopy :Self
  (* *)
{
  self
}

}
