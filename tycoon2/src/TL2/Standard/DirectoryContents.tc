class DirectoryContents
super Object
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *


Author:  Hubertus Koehler
Date:    22-Aug-1996
Updates: (Date)   (Name)       (Description)
	 30-Aug-1996 ag: renamed twlfile.c -> tystdio.c
	 13-Jan-1997 ag: introduced metaclass
         03-Mar-1999 Andre Willomat: new tycoonOS
*)
meta DirectoryContentsClass()

{
case(T <:Void,
     ifDirectory :Fun(:Directory):T,
     ifFile :Fun(:File):T) :T
  (* *)
deferred

visit(T <:Object, visitor :DirectoryContentsVisitor(T)) :T
  (* *)
deferred

exists :Bool
  (* *)
{
  tycoon.tycoonOS.file_exists(_path)
}

type :Int
  (* 0 represents Files, 1 represents Directories *)
{
  buffer ::= MutableString.new(tycoon.tycoonOS.fileinfo_bufferSize)
  _getInfo(buffer)
  if( tycoon.tycoonOS.fileinfo_isFile(buffer)
    then: { 0 } else: { 1 }
  )
}


lastModified :Long
  (* *)
{
  buffer ::= MutableString.new(tycoon.tycoonOS.fileinfo_bufferSize)
  _getInfo(buffer)
  tycoon.tycoonOS.fileinfo_lastModified(buffer)
}

lastAccessed :Long
  (* *)
{
  buffer ::= MutableString.new(tycoon.tycoonOS.fileinfo_bufferSize)
  _getInfo(buffer)
  tycoon.tycoonOS.fileinfo_lastAccessed(buffer)
}

lastStatusChange :Long
  (* *)
{
  buffer ::= MutableString.new(tycoon.tycoonOS.fileinfo_bufferSize)
  _getInfo(buffer)
  tycoon.tycoonOS.fileinfo_lastStatusChange(buffer)
}

contentSize :Long
  (* *)
{
  buffer ::= MutableString.new(tycoon.tycoonOS.fileinfo_bufferSize)
  _getInfo(buffer)
  tycoon.tycoonOS.fileinfo_size(buffer)
}

symLink(new :String) :Void
  (* *)
{
  if( if( _path[path.size-1] = tycoon.os.fs.pathSeparator
    then: {tycoon.tycoonOS.file_mkSymLink(_path.subString(0, _path.size-1), new)}
    else: {tycoon.tycoonOS.file_mkSymLink(_path, new)}) < 0 then: {IOError.new(self, tycoon.tycoonOS).raise})
}

rename(destination :String) :Void
  (* *)
{
  if( tycoon.tycoonOS.file_rename(_path, destination) >= 0
    then: { _path := destination }
    else: { IOError.new(self, tycoon.tycoonOS).raise })
}

remove :Void
  (* *)
deferred

path :String
  (* *)
{ _path }

name :String
  (* *)
{ tycoon.os.fs.lastArc(path) }

private

_path :String

_getInfo(buffer :MutableString) :Void
  (* *)
{
  if( tycoon.tycoonOS.fileinfo_getBuffer(_path, buffer) < 0
    then: { IOError.new(self, tycoon.tycoonOS).raise }
  ) 
}

}
