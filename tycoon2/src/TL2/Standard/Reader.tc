class Reader(E <: Object)
super Stream(E), Collection(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Streams producing objects of type E

Note: we would like 

  E1 <: E2 => Reader(E1) <: Reader(E2)

  i.e. Reader(Student) <: Reader(Person)

Author:  Andreas Gawecki
Date:    13-Feb-1996
Updates: (Date)	  (Name)	(Description)
	 18.11.96 Matthias Ernst  fold implementiert
*)
meta ReaderClass(E )

{
read :E
  (* *)
deferred

includes(x :Object) :Bool
  (* Read the next element.
     Return nil if exhausted. 
 Test for membership of e (based on equality). *)
{
  e ::= self.read
  if( e.isNil
    then: {false}
    else: {_elementEqual(e,x) || includes(x)})
  }

do(statement :Fun(:E):Void) :Void
  (* Perform statement for each e in the receiver *)
{
  e ::= self.read
  if( e.isNotNil then: { statement[e] do(statement) })
  }

map(F <:Object, f :Fun(:E):F) :Reader(F)
  (* Return an iteration over f(e) for each e in the receiver. *)
{
  FunReader.new(fun(){
    e ::= read
    if( e.isNil
      then: {result :F := nil} ;##enhance type inferencer
      else: {f[e]}) })
  }

some(p :Fun(:E):Bool) :Bool
  (* answer true if p(e) holds for some element in the receiver *)
{
  e ::= read
  if( e.isNil
    then: {false}
    else: {if( p[e]
        then: {true}
	else: {some(p)})})
  }

detect(p :Fun(:E):Bool) :E
  (* returns an arbitrary element of the receiver that
     fulfills <p>, or nil if there is no such element. *)
{
  ; select(p).read 
  e ::= read
  if( e.isNil ||  p[e]  then: { 
    e 
  } else: {
    detect(p)
  })
}

count(p :Fun(:E):Bool) :Int
  (* *)
{
  inject(0, fun(n :Int, e :E){
    if( p[e] then: {n+1} else: {n}) })
  }

select(p :Fun(:E):Bool) :Reader(E)
  (* Return an iteration over the elements in the receiver
     that fullfill p.
  *)
{
  ; Simulate recursive bindings with the store: 
  f :Fun():E := nil
  f := {
    e ::= read
    if( e.isNil
      then: {result :E := nil}
      else: {if( p[e] then: {e} else: {f[]})})}
  FunReader.new(f)
  }

inject(T <:Object, base :T, g :Fun(:T,:E):T) :T
  (* Accumulate each element of the receiver using g, starting with 'base'. *)
{
  e ::= self.read
  if( e.isNil
    then: fun(){base}
    else: {inject(g[base,e], g)})
  }

fold(T <: Object , f :Fun(:E):T , g :Fun(:T, :T):T) :T
  (* fold g leftwise around all elements after applying f 
 g[ g[ g[f[e1],f[e2]], f[e3]], f[e4]] 
 returns nil, if no elements *)
{
  first ::= read
  if( first == nil then: fun(): T { nil } else: {
    acc ::= f[first]
    elem ::= read
    while({elem != nil} do: {acc := g[acc, f[elem]] elem := read })

    acc
  })
}

readerEqual(r2 :Reader(Object)) :Bool
  (* *)
{ e1 ::= read
  e2 ::= r2.read
  _elementEqual(e1, e2) && ( e1.isNil ||  readerEqual(r2)  )
}

reader :Reader(E)
  (* *)
{ self }

private

}
