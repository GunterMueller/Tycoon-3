class Tokenizer
super Reader(String)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

   A Tokenizer is capable of cutting a stream of characters into
   a stream of 'tokens', i.e. character strings separated
   by some specified separators.

   Author:  Andreas Gawecki
   Date:    02-Sep-1996
   Updates: (Date)	  (Name)	(Description)
*)
meta TokenizerClass()

{
separators :Container(Char)

read :String
  (* read the next token, i.e. skip all characters included in
     'separators', gather the following sequence of characters not
     included in 'separators', and return the sequence as a String
  *)
{
  _buffer.clear
  ch ::= _in.read
  while({ch !== nil && separators.includes(ch)} do: {
    ch := _in.read
    })
  if( ch !== nil then: {
      _buffer.write(ch)
      ch := _in.read
      while({ch !== nil && !separators.includes(ch)} do: {
	_buffer.write(ch)
	ch := _in.read
	})
      _buffer.contents
      }
    else: { nil })
  }

private

_in :Reader(Char)

_buffer @:StringBuilderOutput

_init :Void
  (* *)
{
  _buffer := StringBuilderOutput.new1(100)@
  super._init
  }

}
