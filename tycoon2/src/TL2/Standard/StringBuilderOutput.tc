class StringBuilderOutput
super BufferOutput
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta StringBuilderOutputClass
{
contents :String
  (* *)
{ contentsAsSequence(String) }

contentsAsSequence(Seq <: Sequence(Char),
           sequenceClass :AbstractSequenceGenerator(Char, Seq)) :Seq
  (* get a copy of everything written on me since creation or since the last clear *)
{
  if( chunks.isEmpty
  then: { sequenceClass.fromSubSequence(_buffer,0,_pos) }
  else: { buf ::= _buffer.subString(0,_pos)
      sequenceClass.concatAll(
        List.reverse(
	  List.cons(buf, chunks))) })
}

clear :Void
  (* *)
{ chunks := EmptyList.new
  _pos := 0
}

private

chunks :List(String)

minimumChunkSize :Int

_needBuffer(n :Int) :Void
  (* *)
{
  chunks := List(:String).cons(_buffer, chunks)
  bufferSize ::= n.max(minimumChunkSize)
  _buffer := MutableString.new(bufferSize)@
  _pos := 0
}

_init :Void
  (* *)
{ super._init
  chunks := EmptyList.new
  _buffer := MutableString.new(minimumChunkSize)@
  _pos := 0
  self
}

}
