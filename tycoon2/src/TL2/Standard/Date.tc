class Date
super Ordered(Date)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *


A moment in Time, expressed according to the standard (Gregorian) calendar,
as observed in some time zone.

Author:  Andreas Gawecki
Date:    17-May-1996
Updates: (Date)    (Name)          (Description)
         03-Mar-99 Andre Willomat  new tycoonOS
*)
meta DateClass()

{
year :Int
  (* year, e.g., 1992 *)

month :Int
  (* month of the year - [1, 12] *)

day :Int
  (* day of the month - [1, 31] *)

hour :Int
  (* hour since midnight - [0, 23] *)

minute :Int
  (* minutes after the hour - [0, 59] *)

second :Int
  (* seconds after the minute - [0, 61] for leap seconds *)

weekDay :Int
  (* days since Sunday - [0, 6] *)

yearDay :Int
  (* days since January 1 - [1, 366] for leap years *)

offset :Int
  (* seconds west of UTC:
    offset specifies the difference in the readings of two clocks, one
    set to UTC and one set to local time, at the moment the date occured,
    and thus reflects daylight (savings) time when appropriate. This
    Difference is specified in seconds, with positive values corresponding
    to local zones behind (west of) UTC.
  *)

isDST :Bool
  (* answer true if daylight saving time is in effect,
     false if it is not, and nil if the information is not available *)

zoneName :String
  (* zone :TimeZone

     specifies a name (often a three-letter abbreviation) for the time
     zone in which the date is observed, e.g. "GMT", "MET"
   *)
{
  _zoneName
}

"zoneName:="(name :String) :String
  (* *)
{
  if( name = "MET"
    then: { offset := (-3600 )}
    else: { if( name = "GMT"
          then: { offset := 0 }
	  else: { DateError.new.raise })})
  _zoneName := name
}

order(x :Date) :Int
  (* *)
{
  asTime.order(x.asTime)
}

equalityHash :Int
  (* *)
{
  asTime.equalityHash
}

asTime :Long
  (* answer the time value as it would have been observed by a Tycoon
     clock (see Tycoon::time) at the moment the date occured *)
{
  handle ::= _handle
  result ::= tycoon.tycoonOS.date_asTime(handle)
  _free(handle)
  result
}

normalize :Void
  (* adjust the fields of the receiver into their legal ranges *)
{
  handle ::= _handle
  tycoon.tycoonOS.date_normalize(handle)
  _fromHandle(handle)
  _free(handle)  
}

printOn(out :Output) :Void
  (* *)
{
  out.writeAll(printString)  
}

printString :String
  (* *)
{
  format("%c")
}


format(fmt :String) :String
  (* format the receiver according to the format specification
     fmt. Ordinary characters placed in the format string are
     copied to the result without conversion.
     Conversion specifiers are introduced  by  a  `%' character,
     and are replaced in s as follows:

     %a     The abbreviated weekday name according to the  cur-
	    rent locale (see Locale, Tycoon::locale).

     %A     The  full  weekday  name  according  to the current
	    locale.

     %b     The abbreviated month name according to the current
	    locale.

     %B     The  full  month  name  according  to  the  current
	    locale.

     %c     The preferred date and time representation for  the
	    current locale.

     %d     The  day  of the month as a decimal number (range 0
	    to 31).

     %H     The hour as a decimal number using a 24-hour  clock
	    (range 00 to 23).

     %I     The  hour as a decimal number using a 12-hour clock
	    (range 01 to 12).

     %j     The day of the year as a decimal number (range  001
	    to 366).

     %m     The month as a decimal number (range 10 to 12).

     %M     The minute as a decimal number.

     %p     Either  `am'  or  `pm'  according to the given time
	    value, or the corresponding strings for the current
	    locale.

     %S     The second as a decimal number.

     %U     The  week  number  of the current year as a decimal
	    number, starting with the first Sunday as the first
	    day of the first week.

     %W     The  week  number  of the current year as a decimal
	    number, starting with the first Monday as the first
	    day of the first week.

     %w     The day of the week as a decimal, Sunday being 0.

     %x     The  preferred  date representation for the current
	    locale without the time.

     %X     The preferred time representation for  the  current
	    locale without the date.

     %y     The  year  as  a  decimal  number without a century
	    (range 00 to 99).

     %Y     The year as a decimal number including the century.

     %Z     The time zone or name or abbreviation.

     %%     A literal `%' character.

    *)
{
  n ::= 1000
  buffer ::= MutableString.new(n)
  handle ::= _handle
  len ::= tycoon.tycoonOS.date_format(handle, fmt, buffer, n)
  result ::= String.fromSubSequence(buffer,0,len)
  _free(handle)
  result
}


private

_zoneName :String

_init :Void
  (* *)
{
  ; necessary for C argument passing 
  year := month := day := hour := minute := second := offset := 0
  self
}


_fromTime(time :Long) :Self
  (* create a Date from a time value as returned by tycoon.time *)
{
  handle ::= _handle
  tycoon.tycoonOS.date_fromTime(handle, time)
  _fromHandle(handle)
  _free(handle)
  self
}


_fromString(s :String, fmt :String) :Self
  (* set the Fields of the receiver from a string s
     which should be formatted according to fmt, else raise a DateError *)
{
  handle ::= _handle
  result ::= tycoon.tycoonOS.date_fromString(handle, s, fmt)
  if( result !== 0 then: {
    _free(handle)
    DateError.new.raise
    })  
  _fromHandle(handle)
  _free(handle)
  self
}


_handle :Int32
  (* *)
{
  result ::= tycoon.ansiC.malloc(tycoon.tycoonOS.date_sizeOfHandle)
  tycoon.tycoonOS.date_setHandle(result,year,month,day,hour,minute,second,offset,
    if( isDST.isNil then: {(-1)} else: {
      if( isDST then: {1} else: {0})})
    )
  result
}


_fromHandle(handle :Int32) :Void
  (* *)
{
  tos ::= tycoon.tycoonOS

  year := tos.date_year(handle)
  month := tos.date_month(handle)
  day := tos.date_day(handle)
  hour := tos.date_hour(handle)
  minute := tos.date_minute(handle)
  second := tos.date_second(handle)
  
  weekDay := tos.date_weekDay(handle)
  yearDay := tos.date_yearDay(handle)
  
  offset := tos.date_offset(handle)
  _zoneName := tos.date_zone(handle)

  dst ::= tos.date_isDST(handle)
  ; 1 for Daylight Savings Time, 0 for not, -1 if  the information is not available 

  isDST := if( dst = 1 then: {true} else: {if( dst = 0 then: {false} else: {nil})}) 
  
  self
}


_free(handle :Int32) :Void
  (* *)
{
  tycoon.ansiC.free(handle)
}

}
