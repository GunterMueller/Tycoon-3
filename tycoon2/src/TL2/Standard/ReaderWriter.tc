class ReaderWriter
super MutexHolder
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{

lockRead(T <: Void, statement :Fun():T) :T
  (* *)
{
  lock({
    while({ _exclusiveWaiting > 0 } do: {
      _writerLeaving.wait(_mx)
    })
    _activeReaders := _activeReaders + 1
  })
  protect(statement, {
    lock({
      _activeReaders := _activeReaders - 1
      _readerLeaving.signal
    }) })
}

lockWrite(T <: Void, statement :Fun():T) :T
  (* *)
{
  lock({
    _exclusiveWaiting := _exclusiveWaiting + 1
    while({ _activeReaders > 0 } do: {
      _readerLeaving.wait(_mx)
    })
    protect(statement, {
      _exclusiveWaiting := _exclusiveWaiting - 1
      _writerLeaving.signal
    })
  })
}

private

_exclusiveWaiting :Int

_activeReaders :Int

_readerLeaving @:BroadcastingCondition

_writerLeaving @:BroadcastingCondition


_init :Void
  (* *)
{ super._init
  _exclusiveWaiting := 0
  _activeReaders := 0
  _readerLeaving := BroadcastingCondition.new@
  _writerLeaving := BroadcastingCondition.new@
  self
}

}
