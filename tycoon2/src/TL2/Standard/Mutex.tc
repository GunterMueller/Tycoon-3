class Mutex
super Finalized
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *


  Author:  Andreas Gawecki, Marc Weikard
  Date:    27-Jan-1997

  Mutex objects are typically used to protect some resource shared by multiple
  threads from race conditions. Mutex is a shortcut of Mutual Exclusion, i.e.:
  Mutex objects provide threads exclusive access to some shared data.

  Taking a different perspective, Mutex objects are used to provide exclusive
  access to some piece of code (critical section) that manipulates shared data.

  Although Tycoon Mutex objects use the multitasking services of the underlying
  operating system, they are persistent and fully portable. 

*)
meta SimpleCStructClass(Mutex)
{

lock :Void
  (* acquire the receiver.
     if the receiver is already locked (owned) by some thread,
     the calling thread blocks until the owner thread releases the receiver
     by calling Mutex::unlock.
     Note that a Mutex is not re-entrant, i.e. if the calling thread is the
     same as the owner thread, a deadlock occurs.
   *)
  builtin

tryLock :Bool
  (* if the reciever is already locked (owned) by some thread,
     answer false, else acquire the receiver.
   *)
  builtin

unlock :Void
  (* release the receiver *)
  builtin

finalize :Void
  (* release the operating system handle *)
{
  __finalize
  super.finalize
}

withLock(T <:Void, statement :Fun():T) :T
  (* aquire the receiver, execute statement, release the receiver finally *)
{
  lock
  protect(statement,
    { unlock })
}

withLock(T <:Void, statement :Fun()@:T) @:T
  (* aquire the receiver, execute statement, release the receiver finally *)
{
  lock
  protect(statement,
    { unlock })@
}


private

_handle :Int32
  (* the OS handle *)

_owner :Thread(Void)
  (* the thread holding this mutex, or nil if unlocked *)

__finalize :Void
  (* *)
  builtin

__init :Bool
  (* *)
  builtin

_init :Void
  (* register the receiver with the TVM *)
{
  super._init
  success ::= __init
  assert({ success })
  self
}

}
