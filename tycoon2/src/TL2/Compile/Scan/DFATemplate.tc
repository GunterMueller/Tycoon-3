class DFATemplate(State <: Object, Action <: Object)
super Scan
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
scan(in :TokenBuffer) :Action
  (* *)
{
  state ::= initialState
  ch :Char := nil
  final :State := nil
  initialTokenSize ::= in.tokenSize
  finalTokenSize ::= initialTokenSize ; token size at longest match 

  assert({ state !== deadEndState })
  while({state !== deadEndState} do:{

    if( isFinal(state) then: {
      finalTokenSize := in.tokenSize
      final := state
    })

    ch := in.read
; 
;    tycoon.stdout<<state<<"--["<<ch.printString<<"]-->\n",
;
    if( ch.isNotNil
    then: { state := transition(state, ch) }
    else: { state := deadEndState })
  })
  if( final.isNotNil
  then: { in.unread(in.tokenSize - finalTokenSize)
      action(final) }
  else: { if( ch.isNotNil
      then: { ; skip unexpected char and raise exception 
	  ScannerError.new(ch).raise }
      else: { if( in.tokenSize > initialTokenSize
	  then: { ; unexpected end of input 
	      ScannerError.new(ch).raise })
	  ; else: eof 
	  nil })
      nil })
}

private

initialState :State
  (* *)
deferred

deadEndState :State
  (* *)
deferred

isFinal(s :State) :Bool
  (* *)
deferred

transition(fromState :State, on :Char) :State
  (* *)
deferred

action(final :State) :Action
  (* *)
require isFinal(final)
  deferred

}
