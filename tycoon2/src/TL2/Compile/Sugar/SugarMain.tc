class SugarMain
super Sugar, Filter
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 *)
meta SimpleConcreteClass(SugarMain)
{
terminals: SugarTerminals

scanner :ReentrantSugarScanner

parser :AbstractParser(String)

sugarGram :SugarGram
  (* for development *)

grammar :Grammar(String)
  (* for development *)

parserBuilder :ParserGen(ReentrantCompactParser)
  (* for development *)

filter(input :Input, output :Output) :Void
  (* *)
{
  tokenStream ::= scanner.scan(input)
  string ::=
    parser.parse(tokenStream,
	    fun(tok :Token(Object)) {
	      tycoon.stdout << "Parse error on "<<tok<<"\n"
	    })
  output.writeString(string)
}

newParser :Void
  (* *)
{
  grammar ::= SugarGram.new(terminals)
  sugarGram := grammar  ;; for development
  self.grammar := sugarGram.gram  ;; for development
  parserBuilder ::=
    ParserGen(:ReentrantCompactParser).new(CompactParserBuilder.new)
  self.parserBuilder := parserBuilder  ;; for development
  parser := parserBuilder.generate(grammar.gram)
}

newScanner :Void
  (* *)
{
  scanner := ReentrantSugarScanner.new(terminals)
}

private

_init :Void
  (* *)
{ super._init
  terminals := SugarTerminals.new
  newParser
  newScanner
}

}
