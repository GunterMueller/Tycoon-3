class SugarMain
super Sugar, Filter
metaclass SimpleConcreteClass(SugarMain)
public

terminals: SugarTerminals,
scanner :ReentrantSugarScanner,
parser :AbstractParser(String),

sugarGram :SugarGram,

(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 for development: *)
grammar :Grammar(String),
parserBuilder :ParserGen(ReentrantCompactParser)

methods

filter(input :Input, output :Output)
{
  let tokenStream = scanner.scan(input),
  let string =
    parser.parse(tokenStream,
	    fun(tok :Token(Object)) {
	      tycoon.stdout << "Parse error on "<<tok<<"\n"
	    }),
  output.writeString(string)
}


newParser
{
  let grammar = SugarGram.new(terminals),
  (*###*) sugarGram := grammar,
  (*###*) self.grammar := sugarGram.gram,
  let parserBuilder =
    ParserGen(:ReentrantCompactParser).new(CompactParserBuilder.new),
  (*###*) self.parserBuilder := parserBuilder,
  parser := parserBuilder.generate(grammar.gram)
}

newScanner
{
  scanner := ReentrantSugarScanner.new(terminals)
}

private methods

_init :Void
{ super._init,
  terminals := SugarTerminals.new,
  newParser,
  newScanner,
  self
}
;
