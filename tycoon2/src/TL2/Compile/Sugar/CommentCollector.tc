class CommentCollector
super Sugar
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 *)
meta SingletonClass(CommentCollector)
{
collect(input :Input, commentOut :Output, otherOut :Output) :Void
  (* For method/class header comments:
     write comment content to <comment>, everything else to
     <other>. *)
{
  ; we are slightly abusing the scanner idea here:
  ;   everything is done via side effects. 
  scanner ::=
    UserScanner.new(tables, input,
       CommentCollectorState.new(commentOut, otherOut))
  scanner.read
}

private

tables :UserScannerTables(Nil, CommentCollectorState)

buildScannerTables(S = UserScanner(Nil, CommentCollectorState)) :Void
  (* *)
{
  sb ::= ScannerBuilder(:Nil, :CommentCollectorState).new
  normMode ::= 0
  commentMode ::= sb.newMode

  sb.addTokenMode(normMode, "\\(\\*", fun(s :S) {
      s.mode := commentMode
      s.userState.nesting := 1
      if( s.userState.nComments > 0 then: { s.userState.commentOut.nl })
      s.read
    })
  sb.addTokenMode(normMode, "[^]", fun(s :S) {
    s.userState.otherOut.write(s.token[0])
    s.read
  })

  sb.addTokenMode(commentMode, "[^]", fun(s:S) {
    s.userState.commentOut.write(s.token[0])
    s.read
  })
  sb.addTokenMode(commentMode, "\\(\\*", fun(s:S) {
    s.userState.nesting := s.userState.nesting + 1
    s.userState.commentOut.writeString("[*")
    s.read
  })
  sb.addTokenMode(commentMode, "\\*\\)", fun(s:S) {
    s.userState.nesting := s.userState.nesting -1
    if( s.userState.nesting = 0
    then: { s.userState.nComments := s.userState.nComments + 1
        s.mode := normMode }
    else: { s.userState.commentOut.writeString("*]") })
    s.read
  })

  tables := sb.generate
}

_init :Void
  (* *)
{ super._init
  buildScannerTables
  self
}

}
