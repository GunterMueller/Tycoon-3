class CommentTransformer
super Sugar
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 *)
meta SingletonClass(CommentTransformer)
{
transform(s :String) :String
  (* For method body comments:
     turn [*...*] into ;... *)
{
  ; we are slightly abusing the scanner idea here:
  ;   everything is done via side effects. 
  input ::= StringInput.new(s)
  out ::= StringBuilderOutput.new
  scanner ::=
    UserScanner.new(tables, input,
       CommentTransformerState.new(out))
  scanner.read
  out.contents
}

private

tables :UserScannerTables(Nil, CommentTransformerState)

buildScannerTables(S = UserScanner(Nil, CommentTransformerState)) :Void
  (* *)
{
  sb ::= ScannerBuilder(:Nil, :CommentTransformerState).new
  normMode ::= 0
  commentMode ::= sb.newMode

  sb.addTokenMode(normMode, "\\(\\*", fun(s :S) {
      s.mode := commentMode
      s.userState.nesting := 1
      s.userState.out << ';'
      s.read
    })

  ; do not transform comments inside strings! 
  sb.addTokenMode(normMode, "\"([^\"]|\\\\\")*\"", fun(s :S) {
    s.userState.out << s.token
    s.read
  })

  sb.addTokenMode(normMode, "[^]", fun(s :S) {
    s.userState.out << s.token[0]
    s.read
  })

  sb.addTokenMode(commentMode, "[^\n]", fun(s:S) {
    s.userState.out << s.token[0]
    s.read
  })
  sb.addTokenMode(commentMode, "\n", fun(s:S) {
    s.userState.out << '\n'   ; ### indentation? 
    for(1 to:s.userState.nesting do:fun(:Int){
      s.userState.out << ';'
    })
    s.read
  })
  sb.addTokenMode(commentMode, "\\(\\*", fun(s:S) {
    s.userState.nesting := s.userState.nesting + 1
    s.userState.out << ';'
    s.read
  })
  sb.addTokenMode(commentMode, "\\*\\)[ \t]*\n?", fun(s:S) {
    s.userState.nesting := s.userState.nesting -1
    s.userState.out.nl
    if( s.userState.nesting = 0
    then: { s.mode := normMode }
    else: { for(1 to:s.userState.nesting do:fun(:Int){
	  s.userState.out << ';'
	}) })
    s.read
  })

  tables := sb.generate
}

_init :Void
  (* *)
{ super._init
  buildScannerTables
  self
}

}
