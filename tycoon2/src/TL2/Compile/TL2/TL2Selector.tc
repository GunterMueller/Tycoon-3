class TL2Selector
super TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 method selectors, consisting of name and arity
   - independent of the root object, so it doesn't know it's ID *)
meta TL2SelectorClass
{
symbol :Symbol

arity :Int

sorts :Int
  (* bitvector.
     (sorts & (1<<n)) != 0 iff argument n is a component
     leftmost argument is n=0 *)

sortsSequence :Sequence(Bool)
{ FunSequence.new(
    fun(i :Int) { (sorts & (1<<i)) != 0 },
    { arity })
}

symbolSansAt :Symbol
{
  if( isComponent then: {
    ;; cut off trailing @
    Symbol.fromSubSequence(symbol, 0, symbol.size-1)
  } else: {
    symbol
  })
}

isComponent :Bool
{ symbol.size > 0 && symbol[symbol.size-1] = '@' }

printOn(out :Output) :Void
  (* *)
{ symbol.printOn(out)
  out.write('/')
  arity.printOn(out)
  out.write('/')
  sortsSequence.do(fun(isComponent :Bool) {
    out.write( if(isComponent then: {'C'} else: {'R'}) )
  })
}

"="(x :Object) :Bool
  (* *)
{
  self == x
  ||  x."class" == TL2Selector
       && ( x ::= _typeCast(x, :TL2Selector)
	    selectorEqual(x) ) 
}

selectorEqual(selector :TL2Selector) :Bool
  (* *)
{
  symbol == selector.symbol
   && arity == selector.arity
   && sorts = selector.sorts 
}

equalityHash :Int
  (* answer a hash value reflecting the receivers contents. *)
{
  symbol.equalityHash + arity + sorts
}

}
