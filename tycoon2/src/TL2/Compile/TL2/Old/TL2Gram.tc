class TL2Gram
super TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 File: TL2Gram.tc
 Author: Axel Wienberg
   Date: ??-Jun-1996
Purples: define a grammar and actions for building the TL2 abstract syntax 
	 tree.

 TL2MNO is a MutableNonterminal(Object) 
 forward decls / exports: *)
meta TL2GramClass
{
gram :Grammar(TL2ParseUnit)

private

twlTerminals :TL2Terminals

mnnew(T <: Object, name :String) :MutableNonterminal(T)
  (* ### HACK *)
{
  MutableNonterminal.new(name)
}

z(symName :String) :ValueTerminal(SourcePos)
  (* *)
{
  twlTerminals.symbol(symName)
}

k(name :String) :ValueTerminal(SourcePos)
  (* *)
{
  twlTerminals.keyword(name)
}

_init :Void
  (* *)
{
  createPrecedences
  top ::= createRules
  gram := Grammar.new(top)
  self
}

createPrecedences :Void
  (* *)
{
  z(".").precedence :=
  z("[").precedence :=
  z("]").precedence := Precedence.left(120)
  z("!").precedence := Precedence.right(110)
  z("*").precedence :=
  z("/").precedence :=
  z("%").precedence := Precedence.left(100)
  z("+").precedence :=
  z("-").precedence := Precedence.left(90)
  z("<<").precedence :=
  z(">>").precedence := Precedence.left(85)
  z("<").precedence :=
  z("<=").precedence :=
  z(">").precedence :=
  z(">=").precedence := Precedence.left(80)
  z("=").precedence :=
  z("==").precedence :=
  z("!=").precedence :=
  z("!==").precedence := Precedence.left(70)
  z("&").precedence :=
  z("&&").precedence := Precedence.left(60)
  z("|").precedence :=
  z("||").precedence := Precedence.left(50)
  z("=>").precedence :=
  z("=>=>").precedence := Precedence.left(40)
  z(":").precedence := Precedence.nonAssoc(31)
  z("?").precedence := Precedence.right(30)
  z(":=").precedence := Precedence.left(20)
  k("assert").precedence := Precedence.nonAssoc(10)
}

opt(T <: Object, T1 <: Object,
    t :Terminal(Object), nt :Nonterminal(T),
    ifFound :Fun(:T):T1,
    ifAbsent :Fun():T1) :Nonterminal(T1)
  (* *)
{
  mno ::= mnnew("opt/"+t.name+"/"+nt.name)
  mno.addRule2( t, nt,
		fun(:Object, x:T) {
		  ifFound[x]
		})
  mno.addRule0(
		ifAbsent)
  mno
}

optS(T <: Object, T1 <: Object,
    key :String, nt :Nonterminal(T),
    ifFound :Fun(:T):T1,
    ifAbsent :Fun():T1) :Nonterminal(T1)
  (* *)
{
  opt(z(key), nt, ifFound, ifAbsent)
}

optK(T <: Object, T1 <: Object,
    key :String, nt :Nonterminal(T),
    ifFound :Fun(:T):T1,
    ifAbsent :Fun():T1) :Nonterminal(T1)
  (* *)
{
  opt(k(key), nt, ifFound, ifAbsent)
}

nonEmptyCommaList(E <: Object, nt :Nonterminal(E)) :Nonterminal(List(E))
  (* *)
{
  nonempty :MutableNonterminal(List(E)) :=
    mnnew(nt.name+"/,+")
  nonempty.addRule3( nt, z(","), nonempty,
		     fun(x:E, :Object, accu :List(E)) {
		       List.cons(x, accu)
		     })
  nonempty.addRule1( nt,
		     fun(x:E) {
		       List.with1(x)
		     })
  nonempty
}

commaList(E <: Object, nt :Nonterminal(E)) :Nonterminal(List(E))
  (* *)
{
  nonempty ::= nonEmptyCommaList(nt)
  result :MutableNonterminal(List(E)) :=
    mnnew(nt.name+"/,*")
  result.addRule1( nonempty,
		   fun(x:List(E)){x})
  result.addRule0( 
		   {EmptyList.new})
  result
}

binop(sel :String) :Fun(:TL2Value,:SourcePos,:TL2Value):TL2Value
  (* *)
{
  fun(receiver :TL2Value, pos :SourcePos, arg :TL2Value) {
    TL2SendValue.new(pos, receiver, Symbol.new(sel),
      List.with1(arg))
  }
}

createRules (
    SlotsAndMethods = Pair(List(TL2Slot), List(TL2Method)),  
    O               = Object
  ) :MutableNonterminal(TL2ParseUnit)
  (* ## simulated Let-BEBindings *)
{
  ident ::= twlTerminals.ident
  string ::= twlTerminals.string
  char ::= twlTerminals.char
  int ::= twlTerminals.int
  real ::= twlTerminals.real

  type :MutableNonterminal(TL2Type) := mnnew("type")
  value :MutableNonterminal(TL2Value) := mnnew("value")
  signature :MutableNonterminal(TL2Ide) := mnnew("signature")
  typeSignature :MutableNonterminal(TL2TypeIde) := mnnew("typeSignature")
  sequence :MutableNonterminal(TL2BlockValue) := mnnew("sequence")

  optType ::= optS( ":", type, 
		      fun(t:TL2Type){ t }, 
		      { nil })

  argument :MutableNonterminal(TL2Argument) := mnnew("argument")
  argument.addRule1( value,
		     fun(v:TL2Value){
		       v
		     })
  argument.addRule2( z(":"), type,
		     fun(:O, t :TL2Type){
			t
		     })
  argument.addRule5( k("let"), ident, optType, z("="), value,
		     fun( :SourcePos,  :Positioned(String),  :TL2Type, 
			     :O, v :TL2Value) {
		       v  ; ### keyword? 
		     })

  signatures ::= commaList(signature)
  typeSignatures ::= commaList(typeSignature)
  arguments ::= commaList(argument)
  typeList ::= commaList(type)

; types 

  typeIde :MutableNonterminal(TL2TypeIde) := mnnew("typeIde")
  typeIde.addRule1( ident,
		    fun(s :Positioned(String)) {
		      TL2TypeIde.newRef(s.pos, s.value)
		    })

  selfTypeIdent :MutableNonterminal(Positioned(String)) := mnnew("Self")
  selfTypeIdent.addRule1( k("Self"),
			  fun(p:SourcePos) {
			    Positioned.new(p, "Self")
			  })

  ; created above 
  type.addRule4( type, z("("), typeList, z(")"),
		 fun(t :TL2Type, :O, args :List(TL2Type), :O) {
		   TL2ApplyType.new(t, args)
		 })
  type.addRule1( k("Void"),
		 fun(:O) {
		   TL2VoidType.instance
		 })
  type.addRule1( k("Nil"),
		 fun(:O) {
		   TL2NilType.instance
		 })
  type.addRule1( selfTypeIdent,
		 fun(ps :Positioned(String)) {
		   TL2IdeType.new(TL2TypeIde.newRef(ps.pos, ps.value))
		 })
  type.addRule1( typeIde,
		 fun(i :TL2TypeIde) {
		   TL2IdeType.new(i)
		 })
  ; p=pIde:TL2Type  ...was soll das heissen?! 

  ; no Void, Nil or Self in super type declaration;
;     no nested ApplyTypes 
  cplType :MutableNonterminal(TL2CPLType) := mnnew("cplType")
  cplTypeList ::= commaList(cplType)
  cplType.addRule4( typeIde, z("("), typeList, z(")"),
		 fun(i :TL2TypeIde, :O, args :List(TL2Type), :O) {
		   TL2CPLType.new(i, args)
		 })
  cplType.addRule1( typeIde,
		    fun(i :TL2TypeIde) {
		      TL2CPLType.new(i, List.with0)
		    })

  ; classes 

; classHeader 
  className ::= mnnew("className")
  className.addRule1( ident,
		      fun(s :Positioned(String)){ s })
  className.addRule1( k("Nil"),
		      fun(p:SourcePos){ Positioned.new(p, "Nil") })

  optClassDomain :MutableNonterminal(List(TL2TypeIde)) := mnnew("optClassDomain")
  optClassDomain.addRule3( z("("), typeSignatures, z(")"),
			   fun(:O, l :List(TL2TypeIde), :O) {
			     l
			   })
  optClassDomain.addRule0(
		           { EmptyList.new })

  optMeta ::= optK( "metaclass", cplType, 
		      fun(t :TL2CPLType){ t },
		      { nil })

  optSelfSig :MutableNonterminal(TL2TypeIde) := mnnew("optSelfSig")
  optSelfSig.addRule3( selfTypeIdent, z("="), type,
		       fun(slf:Positioned(String), :SourcePos, t :TL2Type) {
			 TL2TypeIde.new(slf.pos, slf.value, t)
		       })
  optSelfSig.addRule3( selfTypeIdent, z("<:"), type,
		       fun(slf:Positioned(String), :SourcePos, t :TL2Type) {
			 TL2SubTypeIde.new(slf.pos, slf.value, t)
		       })
  optSelfSig.addRule0(
		       { nil })  ; ### 

  optSuper ::= optK("super", cplTypeList,
		      fun(l :List(TL2CPLType)){ l },
		      { EmptyList.new })

  classHeader :MutableNonterminal(TL2ClassBuilder) := mnnew("classHeader")
  classHeader.addRule5( className, optClassDomain, optSuper, optSelfSig, optMeta,
	fun( name :Positioned(String), 
	     domain :List(TL2TypeIde), 
	     supers :List(TL2CPLType),
	     selfSig :TL2TypeIde,
	     metaclass_ :TL2CPLType) {
	  TL2ClassBuilder.new( 
	      name.pos,
	      name.value,
	      domain,
	      supers,
	      nil,
	      selfSig,
	      metaclass_)
	})

; optInv 
  optInv ::= optK( "invariant", value,
		     fun(v:TL2Value){ v },
		     { nil })

; methods 
  selector :MutableNonterminal(Positioned(Symbol)) := mnnew("selector")
  selector.addRule1( ident,
		     fun(id :Positioned(String)){ 
		       Positioned.new(id.pos, Symbol.new(id.value))
		     })
  selector.addRule1( string,
		     fun(s :Positioned(String)){ 
		       Positioned.new(s.pos, Symbol.new(s.value))
		     })

  ; fun return type: nil, will be inferred 
  optRange ::= optS( ":", type,
		       fun(t:TL2Type){ t }, { nil })  ; ### nil? 
  ; method return type: default is void 
  optMethodRange ::= optS( ":", type,
			     fun(t:TL2Type){ t },
			     { TL2VoidType.instance })

  optFormals :MutableNonterminal(List(TL2Ide)) := mnnew("optFormals")
  optFormals.addRule3( z("("), signatures, z(")"),
		       fun(:O, l :List(TL2Ide), :O) {
		         l
		       })
  optFormals.addRule0(
		       { EmptyList.new })

  methodHeader :MutableNonterminal(Fun(:TL2Method):TL2Method) := mnnew("methodHeader")
  methodHeader.addRule3( selector, optFormals, optMethodRange,
			 fun(sel :Positioned(Symbol), domain :List(TL2Ide), 
						      range :TL2Type) {
			   fun(m :TL2Method) :TL2Method {
			     m.pos := sel.pos
			     m.selector := sel.value
			     m.methodType := TL2MethodType.new(sel.pos, sel.value, domain, range)
			     m
			   }
			 })


  optPre ::= optK( "require", value,
		     fun(v:TL2Value){ v },
		     { nil })

  optPost ::= optK( "ensure", value,
		     fun(v:TL2Value){ v },
		     { nil })

  methodCond ::= mnnew("methodCond")
  methodCond.addRule2( optPre, optPost,
		       fun(:O,:O):O{ nil })


  body :MutableNonterminal(TL2BlockValue) := mnnew("body")
  body.addRule3( z("{"), sequence, z("}"),
		 fun(p:SourcePos, s :TL2BlockValue, :O) {
		   s.pos := p
		   s
		 })

  optBody ::= mnnew("optBody")
  optBody.addRule1( body,
		    fun(v:TL2Value){ v })
  optBody.addRule0(
		    { nil })

  methodBody ::= mnnew("methodBody")
  methodBody.addRule1( k("deferred"),
		       fun(:O) {
		         TL2DeferredMethod.new
		       })
  methodBody.addRule0(  ; ### missing body 
		       { TL2UnimplementedMethod.new
		       })
  methodBody.addRule1( k("extern"),
		       fun(:O) {
		         TL2ExternalMethod.new("","")
		       })
  methodBody.addRule2( k("extern"), string,
		       fun(:O, lang :Positioned(String)) {
		         TL2ExternalMethod.new(lang.value,"")
		       })
  methodBody.addRule3( k("extern"), string, string,
		       fun(:O, lang :Positioned(String), entry :Positioned(String)) {
		         TL2ExternalMethod.new(lang.value,entry.value)
		       })
  methodBody.addRule2( k("builtin"), optBody,
		       fun(p :SourcePos, body :TL2Value) {
		         TL2BuiltinMethod.new(
			   if( body.isNotNil
			    then: { body }
			    else: { TL2BlockValue.new(p,EmptyList.new) }))
		       })
  methodBody.addRule1( body,
		       fun(body :TL2Value) {
		         TL2CompiledMethod.new(body)
		       })
  ; ### externalMethod? 

  method ::= mnnew("method")
  method.addRule3( methodHeader, methodCond, methodBody,
		   fun(header :Fun(:TL2Method):TL2Method, :O, m :TL2Method) {
		     ; <body> returns a specialized method object, and <header> fills in
;		        the standard fields 
		     header[m]
		   })


  methods_ :MutableNonterminal(List(TL2Method)) := mnnew("methods_")
  methods_.addRule2( method, methods_,
		    fun(m :TL2Method, l :List(TL2Method)) {
		      List.cons(m, l)
		    })
  methods_.addRule0(
		    { EmptyList.new })

  slotDefinition ::= mnnew(:TL2Slot, "slotDefinition")
  slotDefinition.addRule3( ident, z(":"), type,
		      fun(s:Positioned(String), :SourcePos, t :TL2Type) {
		        TL2Slot.new(s.pos, s.value, false, t, nil, nil)
		      })

  slotDefinitions ::= commaList(slotDefinition)

; slotsAndMethods 
  optMethods ::= optK( "methods", methods_,
			 fun(l :List(TL2Method)){ l },
			 { EmptyList.new })


  noSlots :SlotsAndMethods := Pair.new(emptyList, emptyList)

  slotsAndMethods1 :MutableNonterminal(SlotsAndMethods) := mnnew("slotsAndMethods1")
  slotsAndMethods1.addRule2( slotDefinitions, optMethods,
			     fun(slots :List(TL2Slot), methods_ :List(TL2Method)) {
			       Pair.new(slots, methods_)
			     })

  optPublic ::= optK( "public", slotsAndMethods1,
		        fun(slom :SlotsAndMethods) {
			  slom
			},
			{ noSlots })
  optPrivate ::= optK( "private", slotsAndMethods1,
		        fun(slom :SlotsAndMethods) {
			  slom
			},
			{ noSlots })

  class_ ::= mnnew("class_")
  class_.addRule5( k("class"), classHeader, optInv, optPublic, optPrivate,
		   fun(:O, builder :TL2ClassBuilder, :O,
			   publicSloM :SlotsAndMethods,
			   privateSloM :SlotsAndMethods) :TL2ClassBuilder {
		     builder.publicSlots := publicSloM.first
		     builder.publicMethods := publicSloM.second
		     builder.privateSlots := privateSloM.first
		     builder.privateMethods := privateSloM.second
		     builder
		   })


; values 

  valueIde :MutableNonterminal(TL2ValueIde) := mnnew("valueIde")
  valueIde.addRule1( ident,
		     fun(s :Positioned(String)) {
		       TL2ValueIde.newRef(s.pos, s.value)  ; will be scoped later 
		     })


  optArguments :MutableNonterminal(List(TL2Argument)) := mnnew("optArguments")
  optArguments.addRule3( z("("), arguments, z(")"),
			fun(:O, l:List(TL2Argument), :O) {
			  l
			})
  optArguments.addRule0(
			{ EmptyList.new })

  ; created above 
  value.addRule1( k("nil"),
		  fun(p:SourcePos) {
		    TL2LiteralValue.new(p, nil)
		  })
  value.addRule1( k("true"),
		  fun(p:SourcePos) {
		    TL2LiteralValue.new(p, true)
		  })
  value.addRule1( k("false"),
		  fun(p:SourcePos) {
		    TL2LiteralValue.new(p, false)
		  })
  value.addRule1( k("self"),
		  fun(p:SourcePos) { 
		    TL2IdeValue.new(TL2ValueIde.newRef(p, "self")) 
		  })

  literalAction ::=
    fun(o:Positioned(Object)) {
      TL2LiteralValue.newPositioned(o)
    }
		  
  value.addRule1( string, literalAction )
  value.addRule1( char,   literalAction )
  value.addRule1( int,    literalAction )
  value.addRule1( real,   literalAction )
  value.addRule2( z("+"), int,
		  fun(:O, i:Positioned(Int)) {
		    TL2LiteralValue.newPositioned(i)
		  })
  value.addRule2( z("+"), real,
		  fun(:O, r:Positioned(Real)) {
		    TL2LiteralValue.newPositioned(r)
		  })
  value.addRule2( z("-"), int,
		  fun(:O, i:Positioned(Int)) {
		    TL2LiteralValue.new(i.pos, i.value.negated)
		  })
  value.addRule2( z("-"), real,
		  fun(:O, r:Positioned(Real)) {
		    TL2LiteralValue.new(r.pos, r.value.negated)
		  })


  value.addRule1( valueIde,
		  fun(i:TL2ValueIde) {
		    TL2IdeValue.new(i)
		  })
  value.addRule3( valueIde, z(":="), value,
		  fun(i:TL2ValueIde, :O, v:TL2Value) {
		    TL2AssignValue.new(i.pos, i, v)
		  })
  value.addRule4( ident, z("("), arguments, z(")"),
		  fun(sel:Positioned(String), :O, args :List(TL2Argument), :O) {
		    TL2SendValue.new(sel.pos,
		      TL2IdeValue.new(
		        TL2ValueIde.newRef(sel.pos, "self")),
		      Symbol.new(sel.value), args)
		  })
		  
  value.addRule6( k("fun"), z("("), signatures, z(")"), optRange, body,
		  fun( p :SourcePos,
		       :O, domain :List(TL2Ide), :O, range :TL2Type,
		       body :TL2Value) {
		    TL2CompiledFun.new(p, #"[]", domain,range,body)
		  })
  value.addRule1( body,
		  fun(body :TL2Value) {
		    TL2CompiledFun.new(body.pos,
				       #"[]", EmptyList.new, nil, body)
		  })
  value.addRule3( z("("), value, z(")"),
		  fun(:O,v:TL2Value,:O) {
		    v
		  })

  value.addRule4( k("super"), z("."), selector, optArguments,
		  fun(pos :SourcePos, :O, selector :Positioned(Symbol), 
				       args :List(TL2Argument)) {
                    receiver ::=
		      TL2IdeValue.new(
		        TL2ValueIde.newRef(pos, "self"))
		    TL2SuperSendValue.new(pos, receiver, selector.value, args)
		  })
  value.addRule5( k("super"), z("."), selector, z(":="), value,
		  fun(pos :SourcePos, :O, selector :Positioned(Symbol), :O, 
				       val :TL2Value) {
                    receiver ::=
		      TL2IdeValue.new(
		        TL2ValueIde.newRef(pos, "self"))
		    assignSel ::= Symbol.new(selector.value.name + ":=")
		    TL2SuperSendValue.new(pos, receiver, assignSel,
		      List.with1(val))
		  })

  value.addRule4( value, z("."), selector, optArguments,
		  fun(receiver :TL2Value, :O, selector :Positioned(Symbol), 
				       args :List(TL2Argument)) {
		    TL2SendValue.new(selector.pos, receiver, selector.value, args)
		  })
  value.addRule5( value, z("."), selector, z(":="), value,
		  fun(receiver :TL2Value, :O, selector :Positioned(Symbol), :O, 
				       val :TL2Value) {
		    assignSel ::= Symbol.new(selector.value.name + ":=")
		    TL2SendValue.new(selector.pos, receiver, assignSel,
		      List.with1(val))
		  })


  value.addRule4( value, z("["), arguments, z("]"),
		  fun(receiver:TL2Value, pos :SourcePos, args :List(TL2Argument), :O) {
		    TL2SendValue.new(pos, receiver, Symbol.new("[]"), args)
		  })
  value.addRule6( value, z("["), arguments, z("]"), z(":="), value,
		  fun(receiver :TL2Value, pos :SourcePos, args :List(TL2Argument), :O,:O, val :TL2Value) {
		    TL2SendValue.new( pos, receiver, Symbol.new("[]:="), 
				   List.append(args,
				     List.with1(val)))
		  })
		  

  value.addRule2( z("!"), value,
		  fun(p:SourcePos, v :TL2Value) {
		    TL2SendValue.new(p, v, Symbol.new("!"), List.with0)
		  })

  value.addRule3( value, z("*"), value,
		  binop("*"))
  value.addRule3( value, z("/"), value,
		  binop("/"))
  value.addRule3( value, z("%"), value,
		  binop("%"))
  value.addRule3( value, z(">>"), value,
		  binop(">>"))
  value.addRule3( value, z("<<"), value,
		  binop("<<"))

  value.addRule3( value, z("+"), value,
		  binop("+"))
  value.addRule3( value, z("-"), value,
		  binop("-"))

  value.addRule3( value, z("<"), value,
		  binop("<"))
  value.addRule3( value, z("<="), value,
		  binop("<="))
  value.addRule3( value, z(">"), value,
		  binop(">"))
  value.addRule3( value, z(">="), value,
		  binop(">="))

  value.addRule3( value, z("="), value,
		  binop("="))
  value.addRule3( value, z("=="), value,
		  binop("=="))
  value.addRule3( value, z("!="), value,
		  binop("!="))
  value.addRule3( value, z("!=="), value,
		  binop("!=="))

  value.addRule3( value, z("&"), value,
		  binop("&"))
  value.addRule3( value, z("&&"), value,
		  binop("&&"))

  value.addRule3( value, z("|"), value,
		  binop("|"))
  value.addRule3( value, z("||"), value,
		  binop("||"))

  value.addRule3( value, z("=>"), value,
		  binop("=>"))
  value.addRule3( value, z("=>=>"), value,
		  binop("=>=>"))

  value.addRule3( value, z("?"), value,
		  binop("?"))
  value.addRule( Rule.new5( value,
			    value, z("?"), value, z(":"), value,
		  fun(condition :TL2Value, pos:SourcePos, then :TL2Value, :O, else :TL2Value) {
		    TL2SendValue.new(pos, condition, Symbol.new("?:"),
		      List.with2(then,
				 else))
		  }).withPrecedence(z("?").precedence))

  value.addRule2( k("assert"), value,
		  fun(p :SourcePos, val :TL2Value) {
                    receiver ::=
		      TL2IdeValue.new(
		        TL2ValueIde.newRef(p, "self"))
		    TL2SendValue.new(p, receiver, Symbol.new("assert"),
		      List.with1(
			  TL2CompiledFun.new(val.pos, #"[]", List.with0, nil,
					     val)))
		  })

; signatures 

  optIdent :MutableNonterminal(Positioned(String)) := mnnew("optIdent")
  optIdent.addRule1( ident,
		     fun(s :Positioned(String)) {
		       s
		     })
  optIdent.addRule0(
		     { nil })


  ; created above 
  signature.addRule3( optIdent, z("="), type,
		      fun(s:Positioned(String), p:SourcePos, t :TL2Type) {
		        TL2TypeIde.new(if( s.isNotNil then: { s.pos } else: { p }),
				       if( s.isNotNil then: { s.value } else: { nil }),
				       t)
		      })
  signature.addRule3( optIdent, z("<:"), type,
		      fun(s:Positioned(String), p:SourcePos, t :TL2Type) {
		        TL2SubTypeIde.new(if( s.isNotNil then: { s.pos } else: { p }),
					  if( s.isNotNil then: { s.value } else: { nil }),
					  t)
		      })
  signature.addRule3( optIdent, z(":"), type,
		      fun(s:Positioned(String), p:SourcePos, t :TL2Type) {
		        TL2ValueIde.new(if( s.isNotNil then: { s.pos } else: { p }),
					if( s.isNotNil then: { s.value } else: { nil }),
					false,
					t)
		      })

  ; created above 
; ### reuse? 
; ### Let ? 
  typeSignature.addRule3( optIdent, z("<:"), type,
		      fun(s:Positioned(String), p:SourcePos, t :TL2Type) {
		        TL2SubTypeIde.new(if( s.isNotNil then: { s.pos } else: { p }),
					  if( s.isNotNil then: { s.value } else: { nil }),
					  t)
		      })

; sequence 

  optVar :MutableNonterminal(Bool) := mnnew("optVar")
  optVar.addRule1( k("var"),
		   fun(:O){ true })
  optVar.addRule0(
		   { false })

  sequence1 :MutableNonterminal(TL2BlockValue) := mnnew("sequence1")

  sequenceTail :MutableNonterminal(TL2BlockValue) := mnnew("sequenceTail")
  sequenceTail.addRule2( z(","), sequence1,
			 fun(:O, b :TL2BlockValue) {
			   b
			 })
  sequenceTail.addRule0( 
			 { TL2BlockValue.newIncomplete })

  sequence1.addRule2( value, sequenceTail,
		     fun(v :TL2Value, tail :TL2BlockValue) {
		       tail.values := List.cons(v, tail.values)
		       tail.pos := v.pos
		       tail
		     })

  sequence1.addRule7( k("let"), optVar, ident, optType, 
				z("="), value, sequenceTail,
		     fun(p :SourcePos, :Bool, s :Positioned(String), t :TL2Type, 
			     :O, v :TL2Value, block :TL2BlockValue) {
		       ide ::= TL2ValueIde.new(s.pos,s.value,false,t)
		       body ::=
		         if( block.values.isEmpty
			  then: { v :TL2Value := TL2IdeValue.new(ide) }
			  else: { block })
		       TL2BlockValue.new(p, List.with1(TL2LetValue.new(p, ide, v, body)))
		     })

  ; ### OBSOLETE
;
;     'Let' is no longer part of the TL2TL-2 language.
;     If you really want to bind types to identifiers, you can declare them
;     in the method signature (as the last type parameters !):
;
;     m(P = Pair(List(Int), List(Dictionary(String, Symbol))))
;     {
;
;     }
;
;     for both callee and caller this should not make any difference (except that
;     some private information is now exposed at the interface).
;
;
;     (incorrect translation to fun(...))
;     sequence1.addRule5( k("Let"), ident, z("="), type, sequenceTail,
;		     fun(p:SourcePos, s:Positioned(String), :O, t:TL2Type, 
;			     block:TL2BlockValue) {
;		       TL2BlockValue.new(p, List.with1(
;			 TL2SendValue.new(p, 
;			   TL2CompiledFun.new(p, #"[]", List.with1(TL2TypeIde.new(s.pos,s.value,t)),
;					   nil, ; result type 
;					   block),
;			   #"[]",
;			   List.with1(t))))
;		     })
;  
  
  sequence.addRule1( sequence1,
		     fun(b :TL2BlockValue) {
		       b
		     })
  sequence.addRule0( 
		     { TL2BlockValue.newIncomplete })

  doArg :MutableNonterminal(String) := mnnew("doArg")
  doArg.addRule1(string,
		 fun(ps :Positioned(String)) {
		   ps.value
		 })
  doArg.addRule1(ident,
		 fun(ps :Positioned(String)) {
		   ps.value
		 })
  doArg.addRule1(k("true"),
		 fun(:Object) {
		   "true"
		 })
  doArg.addRule1(k("false"),
		 fun(:Object) {
		   "false"
		 })

  doArgs :MutableNonterminal(List(String)) := mnnew("doArgs")
  doArgs.addRule0(
		  { EmptyList.new })
  doArgs.addRule2( doArg, doArgs,
		   fun(head :String, tail :List(String)) {
		     List.cons(head, tail)
		   })

  ; the top is the place
;     where nobody goes
;     you just imagine 

  ; export! 
  top :MutableNonterminal(TL2ParseUnit) := mnnew("top")
  top.addRule1( class_,
		fun(builder :TL2ClassBuilder) {
		  TL2PUClass.new(builder.pos, builder)
		})
  top.addRule1( sequence,
		fun(b :TL2BlockValue) {
		  if( !b.values.isEmpty
		   then: { TL2PUBindings.new(b.pos, b) }
		   else: { ; empty sequence means end of parse 
		       nil })
		})
  top.addRule2( k("define"), signatures,
		fun(pos:SourcePos, l :List(TL2Ide)) {
		  TL2PUDefine.new(pos, l)
		})
  top.addRule3( k("DO"), ident, doArgs,
		fun(pos :SourcePos, l :Positioned(String), args :List(String)) {
		  TL2PUDo.new(pos, l.value, args)
		})
  top
}

}
