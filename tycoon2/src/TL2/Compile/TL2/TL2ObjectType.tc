class TL2ObjectType
super TL2TypeImpl
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
accept(T <: Void, visitor :TL2TypeVisitor(T)) :T
  (* *)
{ visitor.visitObjectType(self) }

selfTypeSig :TL2TypeIde
  (* *)
deferred

checkSubObjectType(big :TL2ObjectType, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{
    ; to be able to keep big''s Self type, we must lookup on it, not on 'big'
;       Unfortunately, we lose the substitutions, if we use the original Self.
;       Therefore we build a new one pointing to a TL2SubstType-wrapped big.
;    
    bigSelf ::= big.selfTypeSig
    newBigSelf ::= TL2IdeType.new(TL2SubTypeIde.new(bigSelf.pos, "bigSelf", TL2SubstType.new(big, bigSubst)))
    
    mySelf  ::= self.selfTypeSig
    newMySelf ::= TL2IdeType.new(TL2SubTypeIde.new(mySelf.pos, "smallSelf", TL2SubstType.new(self, subst)))

    ; furthermore, after lookup, newBigSelf is to be equal to newMySelf 

    equalSelfs ::= TL2ConsSubst.new(newBigSelf.ide, newMySelf, TL2EmptySubst.instance)
    
    newBigSelf.methodsDo(TL2EmptySubst.instance, false, fun(mb :TL2Method, sb :TL2Subst) {
      ; equal both Selfs 
      sb ::= TL2CompositeSubst.new(sb, equalSelfs)

      newMySelf.lookup(mb.selector, TL2EmptySubst.instance, true, fun(ms :TL2Method, ss :TL2Subst) {
	if( ms.isPrivate then: {
	  raiseError
	})

	; when subtyping the methods, we must ensure that both Self types are the same.
;	   Therefore the subtitution is enlarged by [ newMySelf / newBigSelf ]
;	
	ms.methodType.checkSubType(mb.methodType, ss, sb)
      })
    })
  }

checkSubNilType(big :TL2NilType, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ raiseSubTypeError(self, big) }

checkSubApplyType(big :TL2ApplyType,  subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{
    big.expose(bigSubst, true, fun(big :TL2Type, bigSubst :TL2Subst) { checkSubType(big, subst, bigSubst) })
  }

checkSubOperType(big :TL2OperType, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{
    raiseSubTypeError(self, big)
  }

apply(T <: Void, args :List(TL2Type), subst :TL2Subst, argsSubst :TL2Subst, exact :Bool, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    if( args.isEmpty then: { cont[self, subst] } else: { raiseError }) 
  }

checkApplication(args :List(TL2Type), subst :TL2Subst) :Void
  (* *)
{
    if( args.isEmpty then: { } else: { raiseError }) 
  }

private

doExpose(T <: Void, subst :TL2Subst, exact :Bool, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    cont[self, subst]
  }

}
