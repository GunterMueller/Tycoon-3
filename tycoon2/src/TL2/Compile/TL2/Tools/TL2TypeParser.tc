class TL2TypeParser
super Tools
meta SingletonClass(TL2TypeParser)
{

scanAndParse(where :String, in :Input, errorLog :ErrorLog) :TL2Type
{
  tokenStream ::=
    tycoon.tl.newSyntax.scan(where, in, errorLog)
  try({
    _typeParser.parse(tokenStream,
      fun(tok :Token(Object)) {
	errorLog.error(tokenStream.userState.position,
		       "parse error on "+tok.printString)
	nil
      })
  } else: fun(e:Exception){
    if( e."class" == ScannerError then: {
      nil
    } else: {
      e.raise
    })
  })
}

testString(string :String) :TL2Type
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 *)
{
  errorLog ::= ErrorLog.new
  in ::= StringInput.new(string)
  scanAndParse("<string>", in, errorLog)
}

private

_typeParser :AbstractParser(TL2Type)

_init :Void
{
  super._init
  nonterminals ::= tycoon.tl.newSyntax.grammar.grammar.nonterminals
  ntType :NonterminalO :=
    nonterminals.detect(fun(nt :NonterminalO) {
      nt.name = "type"
    })
  assert({ ntType.isNotNil })
  ntType :Nonterminal(TL2Type) := _typeCast(ntType)  ;; ## happy hack
  grammar ::= Grammar.new(ntType)
  parserBuilder ::= ParserGen(:ReentrantCompactParser).new(CompactParserBuilder.new)
  _typeParser := parserBuilder.generate(grammar)
}
}
