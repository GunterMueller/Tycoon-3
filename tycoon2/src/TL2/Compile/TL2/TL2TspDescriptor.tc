class TL2TspDescriptor
super TL2
meta AbstractClass
{

layout :Int                 (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 layout of store objects. -> tsp_Object in tsp.h *) 
  deferred

format :String
  (* only meaningful for Struct. *)
{ nil }
  
layoutStruct :Int
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 0 }

layoutWeakRef :Int
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 1 }
layoutArray :Int
  (* possible value for <layout>. -> tsp_Object in tsp.h
     default case for tycoon objects.  *)
  { 2 }
layoutByteArray :Int	
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 3 }
layoutShortArray :Int	
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 4 }
layoutIntArray :Int	
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 5 }
layoutLongArray :Int	
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 6 }
layoutThread :Int	
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 7 }
layoutStack :Int	
  (* possible value for <layout>. -> tsp_Object in tsp.h *)
  { 8 }

isStruct :Bool
  (* Should the class manager generate CStruct access methods? *)
{ false  ;; redefined in Struct, for Struct and Thread
}

}
