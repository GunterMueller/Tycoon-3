class TL2Method
super TL2ProgramObject
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
selector :Symbol

methodType :TL2MethodType

documentation :String

precondition :TL2Value

postcondition :TL2Value

isPrivate :Bool

arity :Int
  (* number of value arguments, without receiver (used by TVM) *)

sorts :Int
  (* bitmap giving argument sorts (used by TVM) *)

_keywords :Array(Symbol)
  (* the expected keywords (used by TVM) *)

nativeCode :Int
  (* not used by Tycoon *)

acceptMethodVisitor(T <: Void, visitor :TL2MethodVisitor(T)) :T
  (* *)
deferred

positionalDomain :List(TL2Ide)
  (* *)
{ methodType.positionalDomain }

keywordDomain :List(TL2KeywordIde)
  (* *)
{ methodType.keywordDomain }

keywords :Array(Symbol)
  (* *)
{
  if( _keywords.isNotNil then: {
    _keywords
  } else: {
    ;; fetch from methodType if machine slot is uninitialized
    Array.fromContainerWithMap(methodType.keywordDomain, fun(kwi:TL2KeywordIde){ kwi.keyword })
  })
}

range :TL2Type
  (* *)
{ methodType.range }

"range:="(t :TL2Type) :TL2Type
  (* *)
{ methodType.range := t }

prettyPrint(out:Printer) :Void
  (* *)
{
;selector.printOn(out),
;  out.write(' '),
  out.writeAll(if( isPrivate then: {"private "} else: {"public "}))
  methodType.prettyPrint(out)
}

scopeMethod(env :TL2Scoper) :Void
  (* *)
{
  methodType := methodType.scope(env)
}

compileMethod(selfSig :TL2ValueIde, compiler :TL2Compiler) :Void
  (* *)
{
  ;; make sure the selector is known (for perform)
  ;; this also initializes arity and sorts
  compiler.getSelectorId(getSelector(compiler))
}

disassemble(reader :BEByteCodeReader) :Void
  (* *)
{ disassembleOn(Printer.new(tycoon.stdout), reader) }

disassembleOn(out :Printer, reader :BEByteCodeReader) :Void
  (* *)
{ ; TL2CompiledMethod implements this 
}

finalize :Void
  (* *)
{ ; TL2CompiledMethod implements this 
}

patchClass(compiledIn :TL2ClassPublic) :Void
  (* *)
{ ; TL2CompiledMethod implements this 
}

getSelector(compiler: TL2Compiler) :TL2Selector
{
  ;; just in case arity and sorts have not been computed yet
  computeArityAndSorts(compiler)
  TL2Selector.new1(selector, arity, sorts, _keywords)
}

private

computeArityAndSorts(compiler :TL2Compiler) :Void
  (* fill in the machine-relevant slots "arity", "sorts" and "_keywords". *)
{
  if( _keywords.isNil then: {
    arity ::= 0
    sorts ::= 0
    visitIde ::=
    fun(i :TL2Ide) {
      if( i.isValueIde then: {
	vi ::= i.asValueIde
	if( vi.component then: {
	  mask ::= (1 << arity)
	  if( mask.isZero then: {
	    compiler.errorLog.error(vi.pos, "implementation restriction: only first 32 parameters may be components")
	  })
	  sorts := sorts | mask
	})
	arity := arity + 1
      })
    }
    positionalDomain.do(visitIde)
    keywordDomain.do(fun(kwi:TL2KeywordIde){
      visitIde[kwi.ide]
    })
    self.arity := arity
    self.sorts := sorts
    self._keywords := TL2Selector.checkKeywords(keywords, pos, compiler)
  })
}

}
