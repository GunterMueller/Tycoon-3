class TL2NilType
super TL2TypeImpl, TL2LeafMixin
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 bottom element of type lattice *)
meta SingletonClass(TL2NilType)
{
accept(T <: Void, visitor :TL2TypeVisitor(T)) :T
  (* *)
{ visitor.visitNilType(self) }

reduce(T <: Void, s :TL2Subst, cont: Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    cont[self, TL2EmptySubst.instance]
  }

scope(env :TL2Scoper) :TL2NilType
  (* *)
{ self }

prettyPrint(out :Output) :Void
  (* *)
{
    out.writeAll("Nil")
  }

lookupWithSelf(T <: Void,
	 selector :Symbol,
	 subst :TL2Subst,
	 withPrivate :Bool,
	 selfType :TL2Type,
	 selfTypeSubst :TL2Subst,
	 cont :Fun(:TL2Method, :TL2Subst):T) :T
  (* typechecker *)
{
    raiseError
  }

checkSubNilType   (big :TL2NilType,    subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ ; success 
}

checkSubObjectType(big :TL2ObjectType, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ ; success 
}

checkSubApplyType (big :TL2ApplyType,  subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* TL2Type applications are never opers *)
{ ; success 
}

checkSubIdeType   (big :TL2IdeType,    subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{
    ; Nil <: T gdw. T <: Void 
    
    big.checkSubType(TL2VoidType.instance, subst, TL2EmptySubst.instance)
  }

checkSubOperType  (big :TL2OperType,   subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{
    raiseSubTypeError(self, big)
  }

checkSubSubstType (big :TL2SubstType,  subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{
    checkSubType(big.type, subst, TL2CompositeSubst.new(big.substi, bigSubst))
  }

checkApplication(args :List(TL2Type), subst :TL2Subst) :Void
  (* *)
{
    raiseError
  }

private

doExpose(T <: Void, subst :TL2Subst, exact :Bool, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    cont[self, subst]
  }

}
