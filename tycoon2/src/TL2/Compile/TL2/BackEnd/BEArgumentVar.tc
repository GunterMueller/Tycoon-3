class BEArgumentVar
super BEVariable
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta BEArgumentVarClass
{
idx :Int

genLoad(writer :BEByteCodeWriter) :Void
  (* *)
{ writer.loadArgument(idx)
  assert({ !ide.mutable })
}

genStore(writer :BEByteCodeWriter) :Void
  (* *)
{ ; #### 
   tycoon.stdout.writeln("May not modify arguments")
   assert({ false })
}

genLoadRef(writer :BEByteCodeWriter) :Void
  (* *)
{ writer.loadArgument(idx) }

genReference(writer :BEByteCodeWriter) :Void
  (* *)
{
  assert({ ide.component })
  writer.referenceArgument(idx)
}

genTakeFrom(writer :BEByteCodeWriter) :Void
  (* *)
{
  assert({ ide.component })
  writer.takeFromArgument(idx)
}

genMoveTo(writer :BEByteCodeWriter) :Void
  (* *)
{
  assert({ ide.component })
  tycoon.stdout.writeln("May not modify arguments")
  assert({ false })
}
}
