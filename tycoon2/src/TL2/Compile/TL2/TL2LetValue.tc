class TL2LetValue
super TL2Value
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta TL2LetValueClass
{
ide :TL2ValueIde

value :TL2Value

body :TL2Value

accept(T <: Void, v :TL2ValueVisitor(T)) :T
  (* *)
{ v.visitLet(self) }

isLet :Bool
  (* *)
{ true }

asLet :TL2LetValue
  (* *)
{ self }

prettyPrint(out :Printer) :Void
  (* *)
{
  out.writeString("let ")
  ide.printOn(out)
  if( ide.component then: {
    out.writeString(" @= ")
  } else: {
    out.writeString(" = ")
  })
  if( value.isSimple
   then: { value.prettyPrint(out) }
   else: { out.withRelIndent(2, {
         out.nl
	 value.prettyPrint(out)
       }) })
  out.writeln(",")
  body.prettyPrint(out)
}

isComponent :Bool
{ body.isComponent }

isSimple :Bool
  (* *)
{ false }

children :Reader(TL2ProgramObject)
  (* ## ?? *)
{
  Reader.with2(value, body)
}

scope(env :TL2Scoper) :TL2LetValue
  (* *)
{
  value := value.scope(env)
  if( value.isComponent != ide.component then: {
    if( value.isComponent then: {
      env.errorLog.error(pos, "binding component to reference variable: "+ide.name)
    } else: {
      env.errorLog.error(pos, "binding reference to component variable: "+ide.name)
    })
  })
  env.withScopedSignature(ide, {
    body := body.scope(env)
  })
  self
}

genCode(backEnd :BEMethodManager) :Void
  (* we rely on the backEnd collating adjacent pops and adjacent adjusts. *)
{
  if( isTrivial then: {
    value.genCode(backEnd)
  } else: {
    value.genCode(backEnd)
    cleanup :Fun():Void := { backEnd.adjust(1) } ;; default
    if( ide.celled then: {
      if( ide.component then: {
	backEnd.componentCellNew
      } else: {
	backEnd.cellNew
      })
    } else: {
      if( ide.component then: {
	scopeStart ::= backEnd.newLabel
	backEnd.defineLabel(scopeStart)
	cleanup := {
	  scopeEnd ::= backEnd.newLabel
	  backEnd.defineLabel(scopeEnd)
	  backEnd.componentAdjust
	  backEnd.addComponentScope(scopeStart, scopeEnd)
	}
      })
    })

    backEnd.withLocal(ide, {
      body.genCode(backEnd)
    })
    cleanup[]
  })
}

genCodeIgnore(backEnd :BEMethodManager) :Void
  (* *)
{
  if( isTrivial then: {
    value.genCodeIgnore(backEnd)
  } else: {
    ;; ### mostly copy & paste
    value.genCode(backEnd)
    cleanup :Fun():Void := { backEnd.pop } ;; default
    if( ide.celled then: {
      if( ide.component then: {
	backEnd.componentCellNew
      } else: {
	backEnd.cellNew
      })
    } else: {
      if( ide.component then: {
	scopeStart ::= backEnd.newLabel
	backEnd.defineLabel(scopeStart)
	cleanup := {
	  scopeEnd ::= backEnd.newLabel
	  backEnd.defineLabel(scopeEnd)
	  backEnd.componentPop
	  backEnd.addComponentScope(scopeStart, scopeEnd)
	}
      })
    })

    backEnd.withLocal(ide, {
      body.genCodeIgnore(backEnd)
    })
    cleanup[]
  })
}

genCodeReturn(backEnd :BEMethodManager) :Void
  (* *)
{
  if( ide.component then: {
    ;; component variables have to be zapped before return => no tail recursion
    genCode(backEnd)
    backEnd.return
  } else: {
    if( isTrivial then: {
      value.genCodeReturn(backEnd)
    } else: {
      value.genCode(backEnd)
      if( ide.celled then: {
	backEnd.cellNew
      })
      backEnd.withLocal(ide, {
	body.genCodeReturn(backEnd)
      })
    })
  })
}

doCheck(T <: Void, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* no genCodeBranch *)
{
    ; if there is no declared type, we assign the type of the assigned value. 

    ; remove all UnifyTypes 
    if( ide.type.isNotNil then: {
      ide.type.visitor.ifUnifyType(fun(:TL2UnifyType) :Void { ide.type := nil }).otherwise(fun(:TL2Type) {}).visitType(ide.type)
    })

    declaredType ::= ide.type

    protect({
      value.check(fun(t :TL2Type, s :TL2Subst) {
	if( ide.type.isNil then: {
	  ide.type := TL2SubstType.new(t, s)
	} else: {
	  ide.type.checkType(TL2EmptySubst.instance)
	  
	  setError(pos, "Value in let binding is not of a subtype of the declared type", {
	    t.checkSubType(ide.type, s, TL2EmptySubst.instance)
	  })
	  
	  nil
	})
      })

      body.check(cont)
    }, {
      ide.type := declaredType
    })
  }

private

isTrivial :Bool
  (* *)
{
  visitor :TL2FunValueVisitor(Bool) := nil
  visitor := body.visitor.ifIde(fun(i :TL2IdeValue) {
      i.ide == ide && !ide.component
    }).ifTakeFrom(fun(i :TL2TakeFromValue) {
      i.ide == ide ;;  must be a component, then
    }).ifBlock(fun(b :TL2BlockValue) {
      b.values.size = 1 &&  b.values[0].accept(visitor) 
    }).otherwise(fun(:TL2Value){
      false
    })
  visitor.visit
}

}
