class TL2ClassState
super TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
pos :SourcePos
  (* *)
deferred

sourceTime :Long
  (* *)
deferred

fingerPrint :ByteArray
  (* *)
deferred

name :String
  (* *)
deferred

domain :List(TL2TypeIde)
  (* *)
deferred

supers :List(TL2CPLType)
  (* CPLTypes of the direct superclasess in declaration order. *)
deferred

documentation :String
  (* aka class comment *)
deferred

selfTypeSig :TL2TypeIde
  (* Self ide: constraints on Self, i.e. =,<: type *)
deferred

metaClassDeclaration :TL2CPLType
  (* *)
deferred

slots :Array(TL2Slot)
  (* public and private slots defined in this class *)
deferred

publicSlots :List(TL2Slot)
  (* *)
{ slots.select(fun(s:TL2Slot){!s.isPrivate}).as(List) }

privateSlots :List(TL2Slot)
  (* *)
{ slots.select(fun(s:TL2Slot){s.isPrivate}).as(List) }

methodDictionary :TL2MethodDictionaryPublic
  (* public and private methods defined in this class *)
deferred

publicMethods :Collection(TL2Method)
  (* public part of methodDictionary *)
{
  methodDictionary.select(fun(m:TL2Method){!m.isPrivate})
}

privateMethods :Collection(TL2Method)
  (* private part of methodDictionary *)
{
  methodDictionary.select(fun(m:TL2Method){m.isPrivate})
}

prettyPrint :Void
  (* *)
{ prettyPrintOn(Printer.new(tycoon.stdout)) }

prettyPrintOn(out :Printer) :Void
  (* *)
{
  pos.printOn(out) out.writeAll(":\n")
  out.writeAll("class "+name)
  printSeperatedOn(domain, "(", ", ", ")\n", "\n", out)
  out.writeAll("super")
  printSeperatedOn(supers, "\009", ",\n\009", "\n", " (* none *)\n", out)
  selfTypeSig.printOn(out)
  out.writeAll("\nmetaclass ")
  metaClassDeclaration.printOn(out)
  out.nl
  printSeperatedOn(publicSlots, "public\n", ",\n", "\n", "public ", out)
  out.writeln("methods")
  publicMethods.do(fun(m:TL2Method) {
    m.prettyPrint(out)
    out.nl out.nl
  })
  printSeperatedOn(privateSlots, "private\n", ",\n", "\n", "private ", out)
  out.writeln("methods")
  privateMethods.do(fun(m:TL2Method) {
    m.prettyPrint(out)
    out.nl out.nl
  })
  out.writeln(";")
}

printSeperatedOn( r :Container(Object), 
		  start :String, seperator :String, terminator :String,
		  ifEmpty :String,
		  out :Output) :Void
  (* *)
{
  if( r.isEmpty then: {
    out.writeAll(ifEmpty)
  } else: {
    out.writeAll(start)
    r.doBetween(fun(x :Object){ 
      x.printOn(out)
    }, { 
      out.writeAll(seperator)
    })
    out.writeAll(terminator)
  })
}

}
