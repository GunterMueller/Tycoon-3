class NewTL2ScannerState
super NewTL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 user state for the NewTL2 scanner *)
meta NewTL2ScannerStateClass
{
scanner :NewTL2Scanner

errorLog :ErrorLog

semicolonIsEoI :Bool

position :SourcePos
  (* *)
{
  SourcePos.new(where, line, column)
}

"position:="(pos :SourcePos) :Void
  (* *)
{
  where := pos.where
  line := pos.line
  tokenPos ::= if( scanner.isNotNil then:{ scanner.tokenPos }else:{ 0 })
  lastNewline := tokenPos - pos.column
}

identify(token :String, ident :ValueTerminal(Positioned(String))) :Token(Object)
  (* return the current token as an identifier or reserved word *)
{
  reservedWords.lookup(token,
    fun(rw :ValueTerminal(SourcePos)) :Token(Object) {
      rw.token(position)
    },
    { token ::=   ; ### bootstrap hack 
        if( token = "TL2Class" then: { "Class" }
	else: { if( token = "TL2MetaClass" then: { "MetaClass" }
	  else: { if( token = "TL2Root" then: { "Root" }
	    else: { token })})})
      ident.token(Positioned.new(position, token))
    }
  )
}

newline :Void
  (* counting line numbers 
 the client must call <newline> whenever [s]he meets a '\n' in the source *)
{
  line := line + 1
  lastNewline := scanner.readPos
}

column :Int
  (* 
line :Int
{ _line }
*)
{
  scanner.tokenPos - lastNewline
}

error(ch :Char) :Void
  (* *)
{
  errorLog.error(position,
    if( ch.isNil
    then: { "Unexpected end of input" }
    else: { "Unexpected character: "+ch.printString+" ("+ch.asInt.printString+")" }))
  errorLog.raiseError
}

private

where :String

line :Int

lastNewline :Int

  (* byte position of last newline encountered *)

reservedWords :KeyedContainer(String, ValueTerminal(SourcePos))

_init :Void
  (* *)
{ super._init
  line := 1
  lastNewline := 0
  self
}

}
