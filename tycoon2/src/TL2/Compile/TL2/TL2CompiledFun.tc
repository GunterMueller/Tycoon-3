class TL2CompiledFun
super TL2CompiledMethod, TL2Value
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta TL2CompiledFunClass
{
freeValueIdes :Array(TL2ValueIde)

nativeBody :Int

accept(T <: Void, v :TL2ValueVisitor(T)) :T
  (* *)
{ v.visitFun(self) }

isFun :Bool
  (* *)
{ true }

asFun :TL2CompiledFun
  (* *)
{ self }

prettyPrint(out :Printer) :Void
  (* *)
{
  if( positionalDomain.isEmpty && range.isNil then: {
    ; no fun 
  } else: {
    out.writeAll("fun(")
    simpleDomain ::= positionalDomain.all(fun(i:TL2Ide) {
			     i.type.isNil || i.type.isLeaf})
    out.withAbsIndent(out.column, {
      positionalDomain.doBetween(fun(i :TL2Ide) {
	i.prettyPrint(out)
      }, {
	out.write(',')
	if( simpleDomain then: { out.space } else: { out.nl })
      })
    })
    out.write(')')
    if( range.isNotNil then: {
      indicator ::=
        if( methodType.isComponent then: { "@:" } else: { ":" })
      if( range.isLeaf then: {
	out << indicator
	range.prettyPrint(out)
      } else: {
	simpleDomain := false
	out.withRelIndent(2, {
	  out.nl
	  out << indicator
	  range.prettyPrint(out)
	})
      })
    })
    if( simpleDomain then: { out.space } else: { out.nl })
  })
  out.withRelIndent(2, {
    out.writeAll("{\n")
    body.prettyPrint(out)
  })
  out.writeAll("\n}")
}

freeVarHook(out :Printer) :Void
  (* *)
{
  out.writeString("Free Variables: ")
  out.withRelIndent(1, {
    freeValueIdes.keysAndElementsDo(fun(i :Int, v:TL2ValueIde) {
      out.nl
      (i+1).printOn(out) out.writeString(": ") v.name.printOn(out)
    })
  })
  out.nl
}

children :Reader(TL2ProgramObject)
  (* *)
{
  Reader(:TL2ProgramObject).append( positionalDomain.map(fun(i:TL2Ide){i.type}),
		 body.children)
}

scope(env :TL2Scoper) :TL2CompiledFun
  (* *)
{
  freeIdes ::=
    env.collectFreeIdes({
      scopeMethod(env)
    })

  ;; selfSig-Hack for tracer / debugger:
  ;; selfSig is always a free variable, and always the first one
  selfSig ::= env.selfSig
  freeIdes.remove(selfSig)
  nonSelfFreeValueIdes ::=
      freeIdes.sfw(fun(i:TL2Ide){ i.asValueIde }, ; select 
		   fun(i:TL2Ide){ i.isValueIde }) ; where 
  freeValueIdes := Array.fromReader(Reader.cons(selfSig, nonSelfFreeValueIdes))
  ; ...setAccessedFromClosure moved to TL2Optimizer
  ;   (this closure may end up being inlined)
  positionalDomain.do(fun(i:TL2Ide) {
    if( !i.isValueIde then: {
      env.errorLog.error(i.pos, "functions currently cannot take type parameters")
    })
  })
  if( !keywordDomain.isEmpty then: {
      env.errorLog.error(pos, "functions currently cannot take keyword parameters")
  })
  self
}

genCode(backEnd :BEMethodManager) :Void
  (* *)
{
  ; compile self with bindings for global variables 
  globalVars ::= Dictionary.new1(freeValueIdes.size+1)
  freeValueIdes.keysAndElementsDo(
    fun(idx:Int, ide :TL2ValueIde) {
       globalVars[ide] := BEGlobalVar.new(ide, idx+1)
    })
  computeArityAndSorts(backEnd.compiler)
  compile(globalVars, nil, backEnd.compiler)

  ; emit closure creation:
;     push variable references in reverse order, then the TL2CompiledFun (me). 
  freeValueIdes.reverseDo(fun(ide :TL2ValueIde) {
    backEnd.loadRef(ide)
  })
  backEnd.loadLiteral(self)
  backEnd.closure(freeValueIdes.size)
}

genCodeIgnore(backEnd :BEMethodManager) :Void
  (* *)
{ backEnd.errorLog.warning(pos, "ignored unused closure") }

genCodeBranch(backEnd :BEMethodManager,  :BEMMLabel,  :Bool) :Void
  (* *)
{ backEnd.errorLog.error(pos, "closure as condition (not a Bool!)") }

makeDisassembler :BEDisassembler
  (* *)
{ dis ::= super.makeDisassembler
  dis.globalNames :=
    Array.fromReader(
      Reader.cons("<TL2CompiledFun object>",
        freeValueIdes.map(fun(v:TL2ValueIde){ v.name })))
  dis
}

private

doCheck(T <: Void, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    args ::= List.fromReader(positionalDomain.map(fun(i :TL2Ide) { i.type }))
    args.do(fun(t :TL2Type) { t.checkType(TL2EmptySubst.instance) })

    if( range.isNotNil then: { range.checkType(TL2EmptySubst.instance) })

    body.check(fun(t :TL2Type, s :TL2Subst) {
      if( range.isNotNil then: {
        setError(pos, "Function body does not conform to declared type", {
	  t.checkSubType(range, s, TL2EmptySubst.instance)
	})
      })

      n ::= args.size

      args ::= List.append(args, List.with1(
	if( range.isNotNil then: { range } else: { TL2SubstType.new(t, s) })
      ))

      className ::=
        if( methodType.isComponent
         || positionalDomain.some(fun(i :TL2Ide){ i.asValueIde.component }) then: {
	  String.concatAll( #(
          "Fun",
	  positionalDomain.map(fun(i :TL2Ide){
	   if( i.asValueIde.component then: {'C'} else: {'R'}) }).as(String),
	  if( methodType.isComponent then: {"C"} else: {"R"}) ))
	} else: {
	  "Fun"+n.printString
	})

      funClass ::= typeChecker.classManager.get(className)
      cont[TL2ApplyType.new(TL2IdeType.new(funClass.typeIde), args), TL2EmptySubst.instance]
    })
  }

}
