class TL2ClassBuilder
super TL2MutableClassState
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 building classes 

   The client (TL2Gram) creates a TL2ClassBuilder object, specifying some
   information, and then sets private and public slots and methods.
   (methods have to be assigned to {public,private}Methods, not into the
   methodDictionary!)

   Later, classBuilder.build creates a proper class from this
   information and installs the class with the system.

   The {public,private}{Slots,Methods} slots are only writable until build has been called.
*)
meta TL2ClassBuilderClass
{
publicSlots :List(TL2Slot)
{ 
  if( methodDictionary.isNil then: { _publicSlots } else: { super.publicSlots })
}

"publicSlots:="(l :List(TL2Slot)) :Void
  require methodDictionary.isNil
{ assert({ methodDictionary.isNil })
  _publicSlots := l
}

publicMethods: List(TL2Method)
{ 
  if( methodDictionary.isNil then: { _publicMethods } else: { super.publicMethods })
}

"publicMethods:="(l :List(TL2Method)) :Void
  require methodDictionary.isNil
{ assert({ methodDictionary.isNil })
  _publicMethods := l
}

privateSlots :List(TL2Slot)
{
  if( methodDictionary.isNil then: { _privateSlots } else: { super.privateSlots })
}

"privateSlots:="(l :List(TL2Slot)) :Void
  require methodDictionary.isNil
{ assert({ methodDictionary.isNil })
  _privateSlots := l
}

privateMethods: List(TL2Method)
{
  if( methodDictionary.isNil then: { _privateMethods } else: { super.privateMethods })
}

"privateMethods:="(l :List(TL2Method)) :Void
  require methodDictionary.isNil
{ assert({ methodDictionary.isNil })
  _privateMethods := l
}

build(compiler :TL2Compiler, classManager :TL2ClassManager, errorLog :ErrorLog) :Void
  (* *)
{
  tycoon.stdout.writeln("[Building class "+name)
  self.errorLog := errorLog
  checkSelectors
  typeManager ::= classManager.typeManager
  scope(TL2Scoper.new(typeManager.newClassSignature(name),
		   errorLog,
		   typeManager))
  if( !errorLog.hasErrors then: {
    compile(compiler)
    if( !errorLog.hasErrors then: {
      classManager.set(self, errorLog)
    })
  })
  tycoon.stdout.writeln("]")
  nil
}

private

_publicSlots :List(TL2Slot)

_publicMethods: List(TL2Method)

_privateSlots :List(TL2Slot)

_privateMethods: List(TL2Method)

errorLog :ErrorLog

used :Dictionary(String, SourcePos)
  (* used during check/build *)

selfSig :TL2ValueIde

superSig :TL2ValueIde

_init :Void
  (* *)
{ super._init
  if( selfTypeSig.isNil then: {
    selfTypeSig := TL2SubTypeIde.new(pos, "Self", makeClassType)
  })
  publicSlots := EmptyList.new
  privateSlots := EmptyList.new
  publicMethods := EmptyList.new
  privateMethods := EmptyList.new
  self
}

checkSelectors :Void
  (* check for doubly defined selectors, and
   transfer all methods for {private,public}Methods into
   the methodDictionary *)
{
  used := Dictionary.new
  methodDictionary ::= TL2MethodDictionary.new
  slots ::= GapArray.new0
  publicSlots.do(fun(slot:TL2Slot) {
    slot.isPrivate := false
    slot.selectors.do(fun(sel :TL2Selector) {
      checkSelector(sel.symbol, slot.pos)
    })
    slots.addLast(slot)
  })
  publicMethods.do(fun(m:TL2Method) {
    m.isPrivate := false
    checkSelector(m.selector, m.pos)
    methodDictionary.add(m)
  })
  privateSlots.do(fun(slot:TL2Slot) {
    slot.isPrivate := true
    slot.selectors.do(fun(sel :TL2Selector) {
      checkSelector(sel.symbol, slot.pos)
    })
    slots.addLast(slot)
  })
  privateMethods.do(fun(m:TL2Method) {
    m.isPrivate := true
    checkSelector(m.selector, m.pos)
    methodDictionary.add(m)
  })
  self.slots := slots.as(Array)
  self.methodDictionary := methodDictionary
  ; these are garbage now:
  _publicSlots := nil
  _privateSlots := nil
  _privateMethods := nil
  _publicMethods := nil
  ; not needed:
  used := nil
}

checkSelector(name :String, pos :SourcePos) :Void
  (* *)
{
  used.lookup(name, fun(other :SourcePos) {
    errorLog.error(pos, "Duplicate selector: "+name)
    errorLog.error(other, "(conflicting definition)")
  }, {
    used[name] := pos
  })
}

scope(env :TL2Scoper) :TL2ClassBuilder
  (* scope everything *)
{
  env.withScopedSignatures(domain, {

    selfTypeSig.type := selfTypeSig.type.scope(env)

    supers := env.scopeList(:TL2CPLType, supers)
    metaClassDeclaration := metaClassDeclaration.scope(env)
    slots.do(fun(slot:TL2Slot) {
      slot.scopeSlot(env)
    })

    ; ### typechecker: compute supertype, store in TL2Scoper 

    ; self :Self 
    selfSig := TL2ValueIde.new(selfTypeSig.pos, "self", false, TL2IdeType.new(selfTypeSig))
    selfSig.setImmutable

    ; do not bind the class name: 
;       value refs are converted to self messages, type refs are resolved via
;       env.currentClassSig 

    env.withSignatures(List(:TL2Ide).with2(selfTypeSig, selfSig), {
      methodDictionary.do(fun(m :TL2Method) {
        m.scopeMethod(env)
      })
    })
  })
  self
}

compile(compiler :TL2Compiler) :Void
  (* code generation *)
{
  slots.do(fun(slot:TL2Slot) {
    slot.selectors.do(fun(sel :TL2Selector) {
      ;; the actual access methods are created by the class manager,
      ;; depending on CPL etc.  We just register the selector object
      ;; for perform etc.
      compiler.getSelectorId(sel)
    })
  })
  methodDictionary.do(fun(m :TL2Method) {
    try({
      ; tycoon.stdout << '(' << m.selector, 
      compiler.errorLog := errorLog
      m.compileMethod(selfSig, compiler)
      ; , tycoon.stdout << ')' 
    } else: fun(e :Exception) {
      tycoon.stdout.writeln("While compiling "+m.selector+":")
      e.raise
    })
  })
}

makeClassType :TL2CPLType
  (* *)
{
  classIde ::= TL2TypeIde.newRef(pos, name)
  TL2CPLType.new(classIde, 
    List.fromReader(domain.map(fun(i :TL2TypeIde){ TL2IdeType.new(i) })))
}

}
