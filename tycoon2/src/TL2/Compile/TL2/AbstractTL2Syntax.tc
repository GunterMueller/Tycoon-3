class AbstractTL2Syntax
super TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
scan(where :String, input :Input, errorLog :ErrorLog) :AbstractTL2Scanner
  (* *)
{ scan1(where, input, errorLog, 100) }

scan1(where :String, input :Input, errorLog :ErrorLog, bufferCapacity :Int) :AbstractTL2Scanner
  (* *)
{
  s ::= makeScanner(where, input, errorLog, bufferCapacity)
  s.errorHandler :=
    fun(ch :Char) {
      if( ch.isNotNil
      then: { errorLog.error(s.userState.position,
			 "unexpected char: "+ch.printString
			 +" ("+ch.asInt.printString+")") }
      else: { errorLog.error(s.userState.position,
			 "unexpected end of input") })
      ScannerError.new(ch).raise
    }
  s
}

parse(in :AbstractTL2Scanner, errorLog :ErrorLog) :TL2ParseUnit
  (* *)
{
  unit ::=
    try({
      _parser.parse(in,
	fun(tok :Token(Object)) {
	  errorLog.error(in.userState.position,
			 "parse error on "+tok.printString)
	  nil
	})
    } else: fun(e:Exception){
      if( e."class" == ScannerError
      then: { nil }
      else: { e.raise })
    })
  if( unit.isNotNil
  then: { guest ::= TL2FunParseUnitVisitor.new
        .ifClass(fun(puc :TL2PUClass) {
	   normalizeClass(puc.builder, errorLog)
	})
	.ifBindings(fun(pub :TL2PUBindings) {
	   normalizeBindings(pub.b, errorLog)
	}).otherwise(fun(:TL2ParseUnit){ })
      unit.accept(guest) })
  unit
}

scanAndParse(where :String, input :Input, errorLog :ErrorLog) :TL2ParseUnit
  (* *)
{
  in ::= scan(where, input, errorLog)
  parse(in, errorLog)
}

testPath(path :String) :TL2ParseUnit
  (* *)
{
  errorLog ::= ErrorLog.new
  f ::= File.openRead(path)
  protect({
    scanAndParse(path, f, errorLog)
  }, { f.close })
}

testString(string :String) :TL2ParseUnit
  (* *)
{
  errorLog ::= ErrorLog.new
  in ::= StringInput.new(string)
  scanAndParse("<string>", in, errorLog)
}

private

_parser :AbstractParser(TL2ParseUnit)

makeScanner(where :String, input :Input, errorLog :ErrorLog, bufferCapacity :Int) :AbstractTL2Scanner
  (* *)
deferred

normalizeClass(:TL2ClassBuilder, :ErrorLog) :Void
  (* *)
{ }

normalizeBindings(:TL2BlockValue, :ErrorLog) :Void
  (* *)
{ }

}
