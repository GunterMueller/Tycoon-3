class TL2IdeValue
super TL2Value, TL2LeafMixin
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta TL2IdeValueClass
{
ide :TL2ValueIde

accept(T <: Void, v :TL2ValueVisitor(T)) :T
  (* *)
{ v.visitIde(self) }

isIde :Bool
  (* *)
{ true }

asIde :TL2IdeValue
  (* *)
{ self }

prettyPrint(out :Printer) :Void
  (* *)
{
  printIdeOn(ide, out)
}

scope(env :TL2Scoper) :TL2Value
  (* *)
{
  scopedIde ::= ide.scope(env)
  if( scopedIde.isNil then: {
    ; ide is not in local scope => self message 
    selfSig ::= env.selfSig
    if( selfSig.isNotNil then: fun() :TL2Value {
      TL2SendValue.new( pos,
		      TL2IdeValue.new(selfSig),
		      Symbol.new(selectorEquivalent),
		      EmptyList.new)
    } else: {
      env.errorLog.error(pos, "unbound identifier: self (while scoping "+ide.name+")")
      self
    })
  } else: {
    ide := scopedIde
    self
  })
}

genCode(backEnd :BEMethodManager) :Void
  (* *)
{
  if( ide.component then: {
    backEnd.reference(ide)
  } else: {
    backEnd.load(ide)
  })
}

genCodeIgnore(backEnd :BEMethodManager) :Void
  (* *)
{ backEnd.errorLog.warning(pos, "ignored local variable reference "+ide.name) }

private

selectorEquivalent :String
{ ide.name }

doCheck(T <: Void, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    cont[ide.type, TL2EmptySubst.instance]
  }

}
