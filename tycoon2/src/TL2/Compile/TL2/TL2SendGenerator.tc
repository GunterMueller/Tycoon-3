class TL2SendGenerator
super TL2CodeGenerator
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta TL2SendGeneratorClass
{
sendValue :TL2SendValue

isComponent :Bool
{ sendValue.isComponent }

genCode(backEnd :BEMethodManager) :Void
  (* *)
{
  sendValue.receiver.genCode(backEnd)
  argSorts ::= genArgs(backEnd)
  selectorObject ::= TL2Selector.new(sendValue.selector, argSorts)
  backEnd.send(selectorObject)
}

genCodeReturn(backEnd :BEMethodManager) :Void
  (* *)
{ sendValue.receiver.genCode(backEnd)
  argSorts ::= genArgs(backEnd)
  selectorObject ::= TL2Selector.new(sendValue.selector, argSorts)
  backEnd.sendTail(selectorObject)
  backEnd.return
}

genArgs(backEnd :BEMethodManager) :Sequence(Bool)
  (* *)
{
  genArgsLoop(backEnd, sendValue.args)
}

genArgsLoop(backEnd :BEMethodManager, args :List(TL2Argument)) :List(Bool)
{
  ; keywords are currently ignored
  ;   (typechecker statically checks for equal keyword lists)
  if( args.isEmpty then: {
    EmptyList.new
  } else: {
    a ::= args.head
    a.argumentCase(:List(Bool),
      fun(v :TL2Value) {
        v.genCode(backEnd)
	if( v.isComponent then: {
	  scopeStart ::= backEnd.newLabel
	  scopeEnd ::= backEnd.newLabel
	  backEnd.defineLabel(scopeStart)
	  argSorts ::= genArgsLoop(backEnd, args.tail)
	  backEnd.defineLabel(scopeEnd)
	  backEnd.addComponentScope(scopeStart, scopeEnd)
	  List.cons(true, argSorts)
	} else: {
	  List.cons(false, genArgsLoop(backEnd, args.tail))
	})
      },
      fun (:TL2Type) {
        ; nop
	genArgsLoop(backEnd, args.tail)
      })
  })
}

}
