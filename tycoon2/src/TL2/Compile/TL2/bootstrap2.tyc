(*
script for a "lightweight" bootstrap from within a TL2-System

cd $HOX_HOME

(* launch store including programming environment *)
tycoon2 TL2.ts
(* create and dump a new memory image *)
DO load "Compile/TL2/bootstrap2.tyc";
DO exit;
(* turn dump into store *)
tycoon2 -bootstrap dump
(* unfold store *)
(* update paths, type check, save system and exit *)
(* (may want to do this manually to fix small errors during development) *)
tycoon2 Bootstrap.ts < src/TL2/Compile/TL2/post-bootstrap.tyc
*)
Date.now;

tycoon.tl.loader.registerDirectory("SystemTracer");
tycoon.tl.loader.update;

define newTL :TL2TL;
let root = TL2Root.new(tycoon.hoxHome+"/src/next_tm/storeDescriptors.tab"),
let pool = TL2Pool.new,
let vmInterface =
  TL2VMInterface.new(
    tycoon.hoxHome+"/src/next_tm/builtins.tab",
    tycoon.hoxHome+"/src/next_tm/opcodes.tab"),
newTL := TL2TL.new(root,pool,vmInterface);

(* Hack: pretend that AbstractClass is already known *)
newTL.typeManager.newClassSignature("AbstractClass");

let f = File.openRead(tycoon.hoxHome+"/src/next_tm/classids.tyc"),
let script = f.readString(f.size.asInt),
f.close,
newTL.topLevel.string(script+";");

newTL.topLevel.file("SystemTracer/BootStrap.tyc");
newTL.loader.unregisterClass("Class");
newTL.loader.unregisterClass("AbstractClass");
newTL.loader.unregisterClass("MetaClass");

Date.now;

(* ------------------------------------------------------------ *)
(* newTL is functional now.
   Here come the actual classes needed for bootstrap:
 *)

newTL.loader.registerDirectory("Standard");
newTL.loader.registerDirectory("Standard/Containers");
newTL.loader.registerFile("Util/Util.tc");
newTL.loader.registerFile("Util/StandardDateParser.tc");
newTL.loader.registerFile("Util/MD5.tc");
newTL.loader.registerFile("Util/MD5Class.tc");
newTL.loader.registerDirectory("Util/Graphs");
newTL.loader.registerDirectory("Util/Graphs/Simple");
(*newTL.loader.update;*)
newTL.loader.registerDirectory("Compile");
newTL.loader.registerDirectory("Compile/Scan");
newTL.loader.registerDirectory("Compile/Scan/Eager");
newTL.loader.registerDirectory("Compile/Parse");
newTL.loader.registerDirectory("Compile/Parse/Compact");
(*newTL.loader.update;*)
newTL.loader.registerDirectory("Compile/TL2");
newTL.loader.registerDirectory("Compile/TL2/Old");
newTL.loader.registerDirectory("Compile/TL2/New");
newTL.loader.registerDirectory("Compile/TL2/BackEnd");
newTL.loader.unregisterClass("TL2Root");
newTL.loader.unregisterClass("TL2Class");
newTL.loader.unregisterClass("TL2MetaClass");
newTL.loader.registerClassFile("Class", "Compile/TL2/TL2Class.tc");
newTL.loader.registerClassFile("MetaClass", "Compile/TL2/TL2MetaClass.tc");
newTL.loader.registerClassFile("Root", "Compile/TL2/TL2Root.tc");

newTL.loader.update;

Date.now;

newTL.topLevel.string("define tycoon :Tycoon");

(* manually run the compiler on the startup code
   and pass the root,pool and vmInterface objects in *)
let path = tycoon.hoxHome+"/src/TL2/Compile/TL2/startup.tyc",
let errorLog = ErrorLog.new,
let f = File.openRead(path),
let s = newTL.newSyntax.scan(path, f, errorLog),
let startup = newTL.newSyntax.parse(s, errorLog),
f.close,
assert startup."class" == TL2PUBindings,
let startup = _typeCast(startup, :TL2PUBindings),
let block :TL2BlockValue = startup.b,
assert block.values.size = 1,
let funExpr = block.values[0],
assert funExpr."class" == TL2CompiledFun,
assert _typeCast(funExpr, :TL2CompiledFun).domain.size = 3,
let funExpr =
  TL2CompiledFun.new(nil, Symbol.new("[]"), List.with0, nil,
    TL2SendValue.new(nil, funExpr, Symbol.new("[]"),
      List.with3(
        TL2LiteralValue.new(nil, newTL.root),
        TL2LiteralValue.new(nil, newTL.pool),
        TL2LiteralValue.new(nil, newTL.vmInterface)))),
newTL.compiler.simpleEval(nil, newTL.classManager.get("Nil"), funExpr, errorLog),
(* as a side effect, funExpr is compiled. *)
newTL.root.thread := _typeCast(funExpr);

tycoon.ansiC.getenv("TYCOON_FINALIZE").isNotNil ? {
  newTL.classManager.finalize
};

newTL.root.symbolTable := tycoon.tl.root.symbolTable.as(Set), true;
(* Tracer.new.collectSymbols(newTL.root); *)

Date.now.print;
newTL.root.classes.do(fun(c:TL2Class) {
  c.classManager := nil
});
newTL.pool.observers.remove(newTL.classManager);
newTL.pool.observers.remove(newTL.typeChecker);
Tracer.new.traceToFile(newTL.root, "dump");
newTL.root.classes.do(fun(c:TL2Class) {
  c.classManager := newTL.classManager
});
newTL.pool.observers.add(newTL.classManager);
newTL.pool.observers.add(newTL.typeChecker);
Date.now.print;
(*DO exit;*)

(*;
define t1 :Thread;
t1 := Thread.new({  Tracer.new.traceToFile(newTL.root, "dump")  });
t1.join;
*)
(*
Timer.new(tycoon.cpuClock).time({
  try({ Tracer.new.traceToFile(newTL.root, "dump") },
  fun(e:Exception){ e })
});
*)
