class TL2SubstType
super TL2TypeImpl
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 Apply subst on type (compose current substitution with subst,
   i.e. apply subst before current substitution).  *)
meta TL2SubstTypeClass
{
type :TL2Type

substi :TL2Subst
  (* conflict with TL2Type.subst *)

accept(T <: Void, visitor :TL2TypeVisitor(T)) :T
  (* *)
{
    visitor.visitSubstType(self)
  }

reduce(T <: Void, subst :TL2Subst, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* *)
{
    type.reduce(TL2CompositeSubst.new(substi, subst), cont)
  }

prettyPrint(o :Output) :Void
  (* *)
{
    o << "(" << type << substi << ")"
  }

checkSubNilType   (big :TL2NilType,    subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* these perform the actual subtype tests; now both types are known
     call from checkSuperType --- double dispatch
  *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubObjectType(big :TL2ObjectType, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubApplyType (big :TL2ApplyType,  subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubIdeType   (big :TL2IdeType,    subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubUnifyType (big :TL2UnifyType,  subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubOperType  (big :TL2OperType,   subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubMethodType(big :TL2MethodType, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* *)
{ checkSubAnyType(big, subst, bigSubst) }

checkSubAnyType(big :TL2Type, subst :TL2Subst, bigSubst :TL2Subst) :Void
  (* unwind the TL2SubstType
     we may NOT use expose so we don''t skip an TL2Ide
  *)
{
    type.checkSubType(big, TL2CompositeSubst.new(self.substi, subst), bigSubst)
  }

private

doExpose(T <: Void, subst :TL2Subst, exact :Bool, cont :Fun(:TL2Type, :TL2Subst):T) :T
  (* which order ? substi,subst OR subst,substi ? *)
{
    type.expose(TL2CompositeSubst.new(self.substi, subst), exact, cont)
  }

}
