class AbstractFA(Symbol <:Object, S <:AbstractFAState(Symbol,S))
super Compile
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 generic finite automaton *)
meta AbstractClass
{
start :S

states :Set(S)

newState :S
  (* *)
{
  s ::= _newState
  s.n := states.size
  states.add(s)
  s.transitions := Dictionary.new1(2)
  s
}

printOn(out :Output) :Void
  (* *)
{
  className :String := self."class".name  ;##allow 'class' as identifier  
  out.writeAll(className)
  out.write(':')
  states.printOn(out)      
  out.writeString("\nStart: " + start.n.printString)  
  }

private

_init :Void
  (* *)
{
  states := Set.new
  start := newState
  self
  }

_newState :S
  (* *)
deferred

}
