class IdeValue
super Value, LeafMixin
metaclass IdeValueClass

public
ide :ValueIde

methods

isIde :Bool
{ true }

asIde :IdeValue
{ self }

prettyPrint(out :Printer)
{
  printIdeOn(ide, out)
}

scope(env :Scoper) :Value
{
  let scopedIde = env.scope(ide),
  scopedIde.isNil ? {
    (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ide is not in local scope => self message *)
    let selfSig = env.selfSig,
    selfSig.isNotNil ? {                        (* ## fun () :Value is swallowed by the parser, breaks the inferencer !!! *)
      let result :Value =
	SendValue.new1( pos,
			IdeValue.new(selfSig),
			Symbol.new(ide.name),
			EmptyList.new
		      )
    } : {
      env.errorLog.error(pos, "unbound identifier: self (while scoping "+ide.name+")"),
      self
    }
  } : {
    ide := scopedIde,
    self
  }
}

genCode(backEnd :MethodManager)
{ backEnd.load(ide)
}

genCodeIgnore(backEnd :MethodManager)
{ backEnd.errorLog.warning(pos, "ignored local variable reference "+ide.name) }

private methods

  doCheck(T <: Void, cont :Fun2(Type, Subst, T)) :T
  {
    cont[ide.type, EmptySubst.instance]
  }



;





