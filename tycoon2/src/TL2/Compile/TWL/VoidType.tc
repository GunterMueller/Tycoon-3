class VoidType 
  super ObjectType, LeafMixin
  metaclass SingletonClass(VoidType)

public methods

  visit(T <: Void, visitor :TypeVisitor(T)) :T
  {
    visitor.visitVoidType(self)
  }


  reduce(T <: Void, s :Subst, cont: Fun2(Type, Subst, T)) :T
  {
    cont[self, EmptySubst.instance]
  }


  selfTypeSig :TypeIde { _selfTypeSig }


  lookupWithSelf(T <: Void,
		 selector :Symbol,
		 subst :Subst,
		 withPrivate :Bool,
		 selfType :Type,
		 selfTypeSubst :Subst,
		 cont :Fun2(Method, Subst, T)) :T
  {
    raiseError
  }


  methodsWithSelfDo(subst :Subst,
		    withPrivate :Bool,
		    selfType :Type,
		    selfTypeSubst :Subst,
	            callback :Fun2(Method, Subst, Void))
  {
    (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ready or not, here I come *)
  }

  doExpose(T <: Void, subst :Subst, exact :Bool, cont :Fun2(Type, Subst, T)) :T
  {
    cont[self, subst]
  }

  prettyPrint(out :Output)
  {
    out.writeAll("Void")
  }

  charCode :Char
  { nil }

  resultCharCode :Char
  { 'V' }

  private

  _selfTypeSig :TypeIde

  methods

  _init :Self
  { super._init,
    _selfTypeSig := TypeIde.new1(nil, "Self", VoidType.instance),
    self
  }
;
