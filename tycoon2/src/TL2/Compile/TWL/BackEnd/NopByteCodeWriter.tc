class NopByteCodeWriter
super BackEnd
metaclass SimpleConcreteClass(NopByteCodeWriter)
public methods

newLabel :Label
{ assert false, nil }

defineLabel(l :Label)
{ nil }

(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 emitting *)

send(selectorId :Int, nbArgs :Int)  (* nbArgs implicit in selectorId *)
{ }

sendSpecial(selectorId :Int, nbArgs :Int)  (* nbArgs implicit in selectorId *)
{ }

sendTail(selectorId :Int, nbArgs :Int)  (* nbArgs implicit in selectorId *)
{ }

sendSuper(selectorId :Int, nbArgs :Int)  (* nbArgs implicit in selectorId *)
{ }


loadLiteral(literalIdx :Int)
{ }

(* special literals *)
loadChar(c :Char)
{ }
loadByte(b :Int)
{ }
loadShort(s :Int)
{ }

canLoadSpecial(o :Object) :Bool
{ o.isNil }
  
loadSpecial(o :Object)
  require canLoadSpecial(o)
{ }

  
loadArgument(argIdx :Int)
  (* self == nb_args, last argument is 1 *)
{ }

loadLocal(localIdx :Int)
  (* 0 <= n < current stack size *)
{ }

storeLocal(localIdx :Int)
  (* 0 <= n < current stack size *)
{ }

loadGlobal(globalIdx :Int)
{ }

cellNew
{ }

cellStore
{ }

cellLoad
{ }
  
(* n times pop *)
drop(n :Int)
{ }

pop
{ }

(* let x = pop, drop(n), push(x) *)
adjust(n :Int)
{ }
  
closure(nb_globals :Int)
{ }

sync
{ }

return
{ }

ifTrue(dest :Label)
{ }

ifFalse(dest :Label)
{ }

jump(dest :Label)
{ }
;
