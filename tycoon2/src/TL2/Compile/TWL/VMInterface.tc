class VMInterface
super TWL
metaclass VMInterfaceClass
public

opcodes :Dictionary(String, OpcodeDescriptor),

(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 literal object --> opcode name *)
specialLiterals :Dictionary(Object, String),

builtins :Array(BuiltinDescriptor),

(* Selector --> opcode name *)
specialSends :Dictionary(Selector, String)

(* sendMax, argMax, localMax...? *)

private methods

_init :Self
{ super._init,
  specialLiterals := Dictionary.new1(6),
  specialLiterals[-1] := "minusOne",
  specialLiterals[0] := "zero",
  specialLiterals[1] := "one",
  specialLiterals[2] := "two",
  specialLiterals[true] := "true",
  specialLiterals[false] := "false",

(* opcodes and builtins are set via script *)

  specialSends := Dictionary.new1(9),
  specialSends[Selector.new(Symbol.new("+"), 1)] := "sendAdd",
  specialSends[Selector.new(Symbol.new("-"), 1)] := "sendSub",
  specialSends[Selector.new(Symbol.new("<="), 1)] := "sendLessOrEqual",
  specialSends[Selector.new(Symbol.new("=="), 1)] := "sendEqual",
  specialSends[Selector.new(Symbol.new("!=="), 1)] := "sendNotEqual",
  specialSends[Selector.new(Symbol.new("[]"), 0)] := "sendFun0Apply",
  specialSends[Selector.new(Symbol.new("[]"), 1)] := "sendFun1Apply",
  specialSends[Selector.new(Symbol.new("isNil"), 0)] := "sendIsNil",
  specialSends[Selector.new(Symbol.new("isNotNil"), 0)] := "sendIsNotNil",
  
  self
}

;
