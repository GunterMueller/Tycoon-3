class AssertValue
super Value
metaclass AssertValueClass
public
value :Value

methods

prettyPrint(out :Printer)
{
  out.writeAll("assert "),
  value.isSimple ? {
    value.prettyPrint(out)
  } : {
    out.withRelIndent(2, {
      out.nl,
      value.prettyPrint(out)
    })
  }
}

children :Reader(Value)
{
  Reader.with1(value) 
}

scope(env :Scoper) :AssertValue
{
  value := env.scope(value),  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ### ? *)
  _expanded := env.scope(_expanded),
  self
}

genCode(backEnd :MethodManager)
{ expanded.genCode(backEnd) }

(* don't leave a result on the stack *)
genCodeIgnore(backEnd :MethodManager)
{ expanded.genCodeIgnore(backEnd) }

(* return immediately *)
genCodeReturn(backEnd :MethodManager)
{ expanded.genCodeReturn(backEnd) }

genCodeBranch( backEnd :MethodManager,dest :MMLabel, branchIf :Bool)
{ backEnd.errorLog.error(pos, "assert statement used as a condition"),
  expanded.genCodeBranch(backEnd, dest, branchIf)
}

expanded :Value
{ _expanded }

private

  _expanded :Value

methods

doCheck(T <: Void, cont :Fun2(Type, Subst, T)) :T
{
  value.check(fun(t :Type, s :Subst) {
    setError(pos, "Condition must be subtype of Bool", {
      t.checkSubType(IdeType.new(Bool.typeIde), s, EmptySubst.instance)
    })
  }),

  cont[NilType.instance, EmptySubst.instance]
}


makeExpanded :Value
{
  let selfRef =
    IdeValue.new(ValueIde.new1(pos, "self", nil)),

  (*  <value>
       ? { }
       : { self._raiseAssertError(<line>,<column>,<where>) }
   *)

  IfValue.new1(
    pos,
    value,
    BlockValue.new1(pos, List.with0),
    BlockValue.new1(pos, List.with1(
      SendValue.new1(pos, selfRef,
        Symbol.new("_raiseAssertError"),
	List.with3( LiteralValue.new1(pos, pos.line),
		    LiteralValue.new1(pos, pos.column),
		    LiteralValue.new1(pos, pos.where))))))
}

_init :Self
{ super._init,
  _expanded := makeExpanded,
  self
}
;





