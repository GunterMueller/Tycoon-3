(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ClassPublic.tc
   intended public interface for class objects *)
class ClassPublic
super ClassState
metaclass AbstractClass
public methods

classManager :ClassManager
  (* The manager for this class object *)
  deferred

isSubClassOf(other :ClassPublic) :Bool
  deferred

isSuperClassOf(other :ClassPublic) :Bool
  deferred

"metaclass" :ClassPublic
  deferred


methodDictionaries :List(MethodDictionaryPublic)
  (* contains all method dictionaries of the classes in CPL
     in lookup order. May also contain shadow method 
     dictionaries that hide slot methods with access
     and upate methods with the right indices (due 
     to multiple inheritance).
     This slot is maintained by the ClassManager.
     Used by TM during method lookup. *)
  deferred

slotMap :Array(Symbol)
  deferred


(* output *)
prettyPrint
  deferred

prettyPrintOn(out :Printer)
  deferred

disassemble(vmInterface :VMInterface)
  deferred


finalize
  (* throw away all information not needed for plain execution *)
  deferred

id :Int
  (* unique code for this class. Used to encode class information 
     within object headers. *)
  deferred

instanceSize :Int
  (* size of instances in slots, used by the 'new' method. *)
  deferred

cplTypes :List(CPLType)
  (* comlete types of all superclasses in lookup order *)
  deferred

typeIde :TypeIde
  deferred

dependencies :Container(String)
  (* dependency list containing all global types (class names)
     and pool methods used within a class.
     Filled in during type checking. *)
  deferred

(* either an ObjectType or OperType, depending on whether domain is empty *)
asType :Type
  deferred

(* ### only for ClassLoader (fix ClassLoader!) *)
"pos:="(rhs:SourcePos) :SourcePos
  deferred

"sourceTime:="(rhs:Long) :Long
  deferred
;
