class TypeCheckError
  super TWL, Exception
  metaclass AbstractClass

public methods

  error :TypeCheckTrace           { _error }
  trace :GapArray(TypeCheckTrace) { _trace }

  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 tracing goes from inside out, i.e. the first ones are deep in the checking tree
     We stop, when the (real) error is determined *)
  addTrace(trace :TypeCheckTrace) {
    error.isNil ? {
      _trace.addFirst(trace)
    }
  }
  
  setError (msg :String)                                         { _error :=SimpleTrace.new(EmptyList.new, msg)   }
  setError1(pos :SourcePos, msg :String)                         { _error :=SimpleTrace.new(List.with1(pos), msg) }
  setError2(pos1 :SourcePos, pos2 :SourcePos, msg :String)       { _error :=SimpleTrace.new(List.with2(pos1, pos2), msg) }
  setErrorWithPositions(pos :Collection(SourcePos), msg :String) { _error :=SimpleTrace.new(pos, msg) }

  printOn(o :Output) {
    o << error << '\n',
    o << "Trace:\n",
    trace.do(fun(t :TypeCheckTrace) {
      t.shouldPrint ? { o << t << '\n' }
    })
  }

private

  _trace :GapArray(TypeCheckTrace),
  _error :TypeCheckTrace

methods

  _init :Self {
    super._init,

    _error :=nil,
    _trace := GapArray.new(0),

    self
  }

;
