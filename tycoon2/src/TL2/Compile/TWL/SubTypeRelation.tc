class SubTypeRelation
  super TWL

public methods

  small :Type { _small }
  big   :Type { _big   }

  smallSubst :Subst { _smallSubst }
  bigSubst   :Subst { _bigSubst   }

  shouldBeStored :Bool
  {
    storeType(small) && { storeType(big) }
  }

  "="(x :Object) :Bool
  {
    self == x || {
      x.clazz == clazz && {
        let x = _typeCast(x, :Self),
      
        equalTypes(small, x.small)              && {
        equalTypes(big, x.big)                } && {
        equalSubsts(smallSubst, x.smallSubst) } && {
        equalSubsts(bigSubst, x.bigSubst)     }
      }
    }
  }

  equalityHash :Int
  {
    (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 substs are mostly empty *)
    (typeHash(small)).xor
    (typeHash(big) * 123)
  }

  printOn(o :Output) {
    o.writeAll("("),
    small.printOn(o),
    smallSubst.printOn(o),
    o.writeAll(" <: "),
    big.printOn(o),
    bigSubst.printOn(o),
    o.writeAll(")")
  }
  
private

  _small :Type,
  _big   :Type,
  _smallSubst :Subst,
  _bigSubst :Subst
  
methods

  storeType(t :Type) :Bool
  {
    SubTypeRelation.storeType(t)
  }

  equalTypes(t1 :Type, t2 :Type) :Bool
  {
    SubTypeRelation.equalTypes(t1, t2)
  }

  equalSubsts(s1 :Subst, s2 :Subst) :Bool
  {
    SubTypeRelation.equalSubsts(s1, s2)
  }

  typeHash(t :Type) :Int {
    SubTypeRelation.typeHash(t)
  }


  _init4(small :Type, big :Type, smallSubst :Subst, bigSubst :Subst)
  {
    _small := small,
    _smallSubst := smallSubst,

    _big := big,
    _bigSubst := bigSubst
  }


;
