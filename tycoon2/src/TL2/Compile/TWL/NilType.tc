class NilType
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 bottom element of type lattice *)
  super TypeImpl, LeafMixin
  metaclass SingletonClass(NilType)

public methods

  visit(T <: Void, visitor :TypeVisitor(T)) :T { visitor.visitNilType(self) }


  reduce(T <: Void, s :Subst, cont: Fun2(Type, Subst, T)) :T
  {
    cont[self, EmptySubst.instance]
  }

  
  scope(env :Scoper) :NilType
  { self }

  prettyPrint(out :Output)
  {
    out.writeAll("Nil")
  }



  (* typechecker *)

  lookupWithSelf(T <: Void,
	 selector :Symbol,
	 subst :Subst,
	 withPrivate :Bool,
	 selfType :Type,
	 selfTypeSubst :Subst,
	 cont :Fun2(Method, Subst, T)) :T
  {
    raiseError
  }



  checkSubNilType   (big :NilType,    subst :Subst, bigSubst :Subst) { (* success *) }
  checkSubObjectType(big :ObjectType, subst :Subst, bigSubst :Subst) { (* success *) }

  (* Type applications are never opers *)
  checkSubApplyType (big :ApplyType,  subst :Subst, bigSubst :Subst) { (* success *) }

  checkSubIdeType   (big :IdeType,    subst :Subst, bigSubst :Subst) {
    (* Nil <: T gdw. T <: Void *)
    
    big.checkSubType(VoidType.instance, subst, EmptySubst.instance)
  }

  checkSubOperType  (big :OperType,   subst :Subst, bigSubst :Subst) {
    raiseSubTypeError(self, big)
  }

  checkSubSubstType (big :SubstType,  subst :Subst, bigSubst :Subst) {
    checkSubType(big.type, subst, CompositeSubst.new(big.substi, bigSubst))
  }

  checkApplication(args :List(Type), subst :Subst)
  {
    raiseError
  }

  
private methods


  doExpose(T <: Void, subst :Subst, exact :Bool, cont :Fun2(Type, Subst, T)) :T
  {
    cont[self, subst]
  }
  
;
