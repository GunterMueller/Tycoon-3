class Bool2Value
super IfValue
metaclass AbstractClass
public

methods
prettyPrint(out :Printer)
{
  condition.prettyPrint(out),
  let complex =
    !condition.isSimple || { !cond2.isSimple },
  complex ? { out.nl } : { out.write(' ') },
  out.writeString(operName+" { "),
  out.withRelIndent(5, {
    cond2.prettyPrint(out)
  }),
  out.writeString(" }")
}

cond2 :Value
  deferred

operName :String
  deferred

(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 if one of the operands evaluates to <towards>, the result is <towards>. *)
towards :Bool
  deferred
  
genCodeIgnore(backEnd :MethodManager)
{ oneBranch(backEnd, !towards, cond2) }

genCodeBranch(backEnd :MethodManager, dest :MMLabel, branchIf :Bool)
{
  branchIf == towards ? {
    condition.genCodeBranch(backEnd, dest, branchIf),
    backEnd.isReached
    ? { cond2.genCodeBranch(backEnd, dest, branchIf) }
  } : {
    let lose = backEnd.newLabel,
 
    condition.genCodeBranch(backEnd, lose, towards),
    backEnd.isReached
    ? { cond2.genCodeBranch(backEnd, dest, branchIf) },
    backEnd.defineLabel(lose)
  }
}
;
