class TypeVisitor(T <: Void)
  super TypeCheckMixin
  metaclass AbstractClass

public methods

  visitType(t :Type) :T { t.visit(self) }

  visitApplyType        (t :ApplyType)         :T { visitDefault(t) }
  visitCPLType          (t :CPLType)           :T { visitApplyType(t) }
  visitClassInstanceType(t :ClassInstanceType) :T { visitObjectType(t) }
  visitIdeType          (t :IdeType)           :T { visitDefault(t) }
  visitMethodType       (t :MethodType)        :T { visitDefault(t) }
  visitNilType          (t :NilType)           :T { visitDefault(t) }
  visitObjectType       (t :ObjectType)        :T { visitDefault(t) }
  visitOperType         (t :OperType)          :T { visitDefault(t) }
  visitSubstType        (t :SubstType)         :T { visitDefault(t) }
  visitUnifyType        (t :UnifyType)         :T { visitDefault(t) }
  visitVoidType         (t :VoidType)          :T { visitObjectType(t) }

  visitDefault(t :Type) :T {
    setError(nil, "Fatal: no matching case in TypeVisitor: "+t.printString, {
      raiseError
    })
  }
  
;

