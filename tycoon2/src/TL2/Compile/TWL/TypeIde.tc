class TypeIde
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 name = type *)
super Ide
metaclass TypeIdeClass

public methods

relationName :String
{ " = " }

(* add dependency notification for the typeChecker *)
type :Type
{
  tycoon.tl.isNotNil  (* ###BOOTSTRAP *)  (* ### plain wrong when doing 2nd bootstrap *)
  ? { tycoon.tl.typeManager.isDefined(name)
      && { tycoon.tl.typeManager.signature(name) == self }
      ? { tycoon.tl.typeChecker.globalIdeReferenced(name) } },

  super.type
}

case( T <: Void,
      value :Fun1(ValueIde,T),
      type :Fun1(TypeIde,T),
      subType :Fun1(SubTypeIde,T)) :T
{
  type[self]
}

scopeGlobal(env :Scoper) :TypeIde
{
  name = env.currentClassSig.name ? {
    env.currentClassSig
  } : {
    env.typeManager.isDefined(name) ? {
      env.typeManager.signature(name)
    } : {
      env.errorLog.error(pos, "unbound type identifier: "+name),
      self
    }
  }
}

scope(env :Scoper) :TypeIde
{
  let i = super.scope(env),
  i.isNil ? fun() :TypeIde {
    (* ### age etc. *)
    scopeGlobal(env)
  } : {
    i.case(:TypeIde,
      fun(v:ValueIde) {
        env.errorLog.error(pos, "value identifier used as type: "+name),
        env.errorLog.error(v.pos, "(point of declaration)"),
	self
      },
      fun(t:TypeIde){ t },
      fun(t:SubTypeIde){ t }
    )
  }
}
;


