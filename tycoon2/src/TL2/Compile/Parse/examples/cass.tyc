(* minimal C assignment grammar
   from the dragon book, grammar (4.20)
 *)

define S :MutableNonterminal(Object);
define R :MutableNonterminal(Object);
define L :MutableNonterminal(Object);

S := MutableNonterminal.new("S");
R := MutableNonterminal.new("R");
L := MutableNonterminal.new("L");

define t :Dictionary(String, SimpleTerminal);
t := Dictionary.new;
t["*"] := SimpleTerminal.new("*");
t["="] := SimpleTerminal.new("=");
t["id"] := SimpleTerminal.new("id");

S.addRule3(
	L, t["="], R,
	fun(:Object, :Object, :Object) :Object
	{ nil });
S.addRule1(
	R,
	fun(:Object) :Object
	{ nil });

L.addRule2(
	t["*"], R,
	fun(:Object, :Object) :Object
	{ nil });
L.addRule1(
	t["id"],
	fun(:Object) :Object
	{ nil });

R.addRule1(
	L,
	fun(:Object) :Object
	{ nil });


define g :Grammar(Object);
g := Grammar.new(S);

define parserGen :ParserGen(NaiveParser);
parserGen := ParserGen(:NaiveParser).new(NaiveParserBuilder.new);

define p :NaiveParser(Object);
p := parserGen.generate(g);

input ::= #("*","id","=","id")
p.parse(input.map(t).map(fun(st:SimpleTerminal){st.token}),
        fun(o:Object):Void{tycoon.stdout<<o});
