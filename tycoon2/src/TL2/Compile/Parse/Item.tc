class Item
super Parse
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta ItemClass
{
rule :RuleO

dot :Int

atStart :Bool
  (* *)
{
  dot = 0
}

atEnd :Bool
  (* *)
{
  dot = rule.rhs.size
}

symAtDot :SymbolO
  (* *)
{
  if( !atEnd
  then: { rule.rhs[dot] }
  else: { nil })
}

shifted :Item
  (* *)
require !atEnd
{
  Item.new(rule, dot+1)
}

firstHere(first :FirstSetMap) :Set(TerminalO)
  (* collect terminal symbols that might follow my position
   includes first.epsilon if the end of the rule can be reached *)
require first.gram.rules.includes(rule)
{
  epsilon ::= first.epsilon
  result ::= Set(:TerminalO).with1(epsilon)
  i ::= dot

  while({result.includes(epsilon) & i < rule.rhs.size} do: {
    result.remove(epsilon)
    result.addAll(first[rule.rhs[i]])
    i := i + 1
  })
  result
}

printOn(out :Output) :Void
  (* *)
{
  out.write('[')
  rule.number.printOn(out)
  out.write(',')
  dot.printOn(out)
  out.write(']')
}

printNiceOn(out :Output) :Void
  (* *)
{
  rule.number.printOn(out)
  out.writeAll(": ")
  rule.lhs.printOn(out)
  out.writeAll(" ->")
  i ::= 0
  rule.rhs.do(fun(s:SymbolO){
    out.write(' ')
    if( dot = i then: {
      out.writeAll(" . ")
    })
    s.printOn(out)
    i := i + 1
  })
  if( dot = i then: {
    out.writeAll(" . ")
  })
  out.nl
}

"="(x :Object) :Bool
  (* *)
{
  self == x || 
    x."class" == Item && (   ; what about subclasses? 
      x ::= _typeCast(x, :Item)
        x.dot == dot &&  x.rule == rule 
      )
    
}

equalityHash :Int
  (* *)
{
  rule.equalityHash + dot
}

}
