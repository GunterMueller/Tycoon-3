(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 A lot like an Array, but objects remember their position inside
   the Encoding.
   It's quite a hack, actually. There's no point in making it more
   reusable because the cleaner solution is definitely to use a hash
   as in Set.tc.
 *)
class Encoding(E <: Numbered)
super Parse, Array(E)
metaclass EncodingClass(E)
public methods

keyOf(e :E) :Int
{ 
  let k = e.n,
  assert self[k] = e,
  k
}

;
