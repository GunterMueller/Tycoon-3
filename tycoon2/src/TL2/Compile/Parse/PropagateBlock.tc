class PropagateBlock
super Parse
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 a strongly connected region inside the propagation graph *)
meta PropagateBlockClass
{
initialLookahead :Set(TerminalO)

members :Container(LR1Item)

node :Node(PropagateBlock)

_lookahead :Set(TerminalO)

lookahead(progress :ProgressIndicator) :Set(TerminalO)
  (* *)
{
  if( _lookahead.isNotNil then: {
    _lookahead
  } else: {
    progress.click
    l ::= Set.fromContainer(initialLookahead)
    node.successors.do(fun(n :Node(PropagateBlock)) {
      l.addAll(n.value.lookahead(progress))
    })
    _lookahead := l
  })
}

writeBack(progress :ProgressIndicator) :Void
  (* *)
{
  members.do(fun(i :LR1Item) {
    i.lookahead := lookahead(progress)
  })
}

private

_init :Void
  (* *)
{
  ; super._init, 
  l :Set(TerminalO) := Set.new
  members.do(fun(i :LR1Item) {
    l.addAll(i.lookahead)
  })
  initialLookahead := l
  self
}

}
