class SgmlGenerator
super Sgml, OutputDecorator
(**)
meta SgmlGeneratorClass()

{
beginStartTag(tag :String) :Void
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 write "<tag" to the output stream.
     a couple of attribute writes may follow, before
     a call to 'endStartTag' finishes the start tag. *)
{
  write('<')
  writeString(tag)
  }

endStartTag :Void
  (* close the (possibly empty) attribute list opened with 'beginStartTag' *)
{
  write('>')
  }

startTag(tag :String) :Void
  (* write a start tag without attributes *)
{
  beginStartTag(tag)
  endStartTag
  }

startElement(id :String, attributes :Dictionary(String, String)) :Void
  (* *)
{
  beginStartTag(id)
  attributes.keysAndElementsDo(fun(attribute :String, value :String) {
    attr(attribute, value)
  })
  endStartTag
}

attr(name :String, value :String) :Void
  (* string attribute: if value is not nil, write name="value" or
     name='value' to the output stream (the choice of quotes depends on value).
   *)
{
  if( value !== nil then: {
    write(' ')
    writeString(name)
    write('=')
    attrValue(value)
  })
}

intAttr(name :String, value :Int) :Void
  (* integer attribute 
 integer attribute: if value is not nil, write ' name="value"'. *)
{
  if( value !== nil then: {
    attr(name, value.printString)
    })
  }

flagAttr(name :String, value :Bool) :Void
  (* flag attribute: if value is true, write ' name'. *)
{
  if( value then: {
    write(' ')
    writeString(name)
  })
}

tokenAttr(name :String, value :String) :Void
  (* *)
{
  attr(name, value)
}

attrValue(value :String) :Void
  (* write attribute value  value, quoted if necessary. *)
{
    if( validName(value) then: {
      writeString(value)
    } else: { if( !value.includes('\"') then: {
      write('\"')
      writeString(value)
      write('\"')
    } else: { if( !value.includes('\'') then: {
      write('\'')
      writeString(value)
      write('\'')
    } else: {
      ;; encode quotes as character references
      write('\"')
      value.do(fun(c:Char){
	if( c == '\"' then: {
	  writeString("&#34;")
	} else: {
	  write(c)
	})
      })
      write('\"')
    }) }) })
}

validName(name :String) :Bool
  (* is name a valid Sgml name?
   If true, it can appear unquoted as an attribute value. *)
{
  !name.isEmpty
  && ( name.size <= nameLen
  && ( name[0].isAlpha
  &&  name.all(fun(c:Char){
	 c.isAlphaNumeric ||  nameChars.includes(c) 
       })  ) )
}

nameLen :Int
  (* maximum allowed name length.
   Corresponds to the NAMELEN attribute in the Sgml declaration`s SYNTAX section *)
{ ; default 
  8
}

nameChars :String
  (* set of additional characters that may appear in names. *)
{ ; default 
  ".-"
}

endTag(tag :String) :Void
  (* write '</tag>' *)
{
  write('<')
  write('/')
  writeString(tag)
  write('>')
}

characterReference(c :Char) :Void
  (* *)
{
  write('&')
  write('#')
  c.asInt.printOn(self)
  write(';')
}

entityReference(ent :String) :Void
  (* *)
require validName(ent)
{
  write('&')
  writeString(ent)
  write(';')
}

withTag(tag :String, contents :Fun():Void) :Void
  (* simple tags without attributes. *)
{
  startTag(tag)
  contents[]
  endTag(tag)
}

}
