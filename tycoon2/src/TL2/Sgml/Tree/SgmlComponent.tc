class SgmlComponent
super Sgml
(**)
meta AbstractClass
{
position :SgmlPos
  (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 position will be nil if sgmlTreeBuilder.interestedInPositions was false *)
deferred

components :Sequence(SgmlComponent)
  (* *)
deferred

case( T <: Void,
      ifComposite :Fun(:SgmlComposite):T,
      ifLeaf :Fun(:SgmlLeaf):T) :T
  (* *)
deferred

isComposite :Bool
  (* *)
{ case(
    fun(:SgmlComposite){ true },
    fun(:SgmlLeaf){ false }
  )
}

isLeaf :Bool
  (* *)
{ !isComposite }

asComposite :SgmlComposite
  (* *)
{ case(
    fun(c:SgmlComposite){ c },
    fun(:SgmlLeaf){ nil }
  )
}

printOn(out :Output) :Void
  (* *)
{ printOnGenerator(SgmlGenerator.new(out)) }

printOnGenerator(out :SgmlGenerator) :Void
  (* *)
deferred

lookupComposite( :Dictionary(String, Fun(:SgmlComposite):Void)) :Void
  (* looks in the whole tree for composites with the element names are
   element of the dictionary. If found the corresponding function is
   evaluated *)
deferred

substitute(
  Context <: Object,
  context :Context,
  dict :Dictionary(String,
                   Fun(:Context, :SgmlComposite):Array(SgmlComponent)
		  )
  ) :Array(SgmlComponent)
  (* *)
deferred

}
