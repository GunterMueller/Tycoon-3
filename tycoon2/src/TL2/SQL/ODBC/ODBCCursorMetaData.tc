(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Data about properties of the associated SQL-Statement

Author:  Michael Skusa

Date:    16-Aug-1996

Updates: (Date)		(Name)	(Description)

         11-Mar-1997	MS	replaced integer values for return codes, SQL-types
				and ODBC-standard-parameters with integer-constants defined
				in class ODBC
*)

class ODBCCursorMetaData

super SQLCursorMetaData

metaclass SimpleConcreteClass(ODBCCursorMetaData)

public methods

retrieveColumnData(hstmt:Int32)
{
  let rc = CShortHolder.new(),
  (odbc.SQLNumResultCols(hstmt,rc.handle) = odbc.SQL_SUCCESS)
  ? {_columnCount:=rc.value}
  : {rc.close(),
     ODBCError.new(odbc.NULL,odbc.NULL,hstmt).raise},
  rc.close(),
  _columnNames := MutableArray.new(_columnCount),
  _nulls := MutableArray.new(_columnCount),
  _precisions := MutableArray.new(_columnCount),
  _scales := MutableArray.new(_columnCount),
  _types := MutableArray.new(_columnCount),
  let szColName = CStringHolder.new(100),
  let pcbColName = CShortHolder.new(),
  let fSqlType = CShortHolder.new(),
  let cbColDef = CIntHolder.new(),
  let pibScale = CShortHolder.new(),
  let pfNullable = CShortHolder.new(),
  for(0,_columnCount-1, fun(i:Int)
    {
      (odbc.SQLDescribeCol(hstmt,i+1,szColName.handle,100,pcbColName.handle,
                           fSqlType.handle,cbColDef.handle,pibScale.handle,
			   pfNullable.handle) = odbc.SQL_SUCCESS)
      ? {_columnNames[i]:=szColName.value,
         _types[i]:=fSqlType.value,
         _nulls[i]:=( pfNullable.value == 1 ), (* this value is not          *)
					       (* retrieved correctly by the *)
					       (* ADABAS D-ODBC-Driver       *)
	 _precisions[i]:= cbColDef.value, 
	 _scales[i]:= (_types[i] = odbc.SQL_TIMESTAMP)
	              ? {odbc.timestampScale}
	              : {pibScale.value}
	 }
      : {szColName.close,
         pcbColName.close,
         fSqlType.close,
         cbColDef.close,
         pibScale.close,
         pfNullable.close,
	 ODBCError.new(odbc.NULL,odbc.NULL,hstmt).raise}
    }),
  szColName.close,
  pcbColName.close,
  fSqlType.close,
  cbColDef.close,
  pibScale.close,
  pfNullable.close
}

;







