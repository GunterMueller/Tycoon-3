class ODBCConnection
super SQLConnection
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Handle connections with data-sources via ODBC

Author:  Michael Skusa

Date:    16-Aug-1996

Updates: (Date)		(Name)	(Description)

         11-Mar-1997	MS	replaced integer values for return codes,
				SQL-types and ODBC-standard-parameters with
				integer-constants defined in class ODBC
*)
meta SimpleConcreteClass(ODBCConnection)
{
newStatement():ODBCStatement
  (* Creates ODBCStatement,
     returns nil if connection is closed
   *)
{
  if( !isClosed
  then: {
      s::=ODBCStatement.new()
      s.open(_hdbc,self)
      s
    }
  else: {nil})
}

setAutoCommit(on:Bool):Void
  (* on = true  enables AutoCommit, each single sql-statement is executed
                and commited immediately,
                this is the odbc-default,
     on = false changes become persistent only if commit is called after
                their execution,
     raises ODBCError.
   *)
{
  autoCommitMode ::= if( on then: {1} else: {0})
  if( (odbc.SQLSetConnectOption(_hdbc,102,autoCommitMode) != 0)
  then: {ODBCError.new(odbc.NULL,_hdbc,odbc.NULL).raise})
}

commit():Void
  (* *)
{
  if( (odbc.SQLTransact(_henv,_hdbc,0) != 0)
  then: {ODBCError.new(_henv,_hdbc,odbc.NULL).raise})
}

rollback():Void
  (* *)
{
  if( (odbc.SQLTransact(_henv,_hdbc,1) != 0)
  then: {ODBCError.new(_henv,_hdbc,odbc.NULL).raise})
}

private

_connect(database:String,user:String,password:String):Void
  (* *)
{
    h::=CIntHolder.new()
    if( (odbc.SQLAllocEnv(h.handle) = 0) then: {_henv:=h.value32}
                                     else: {_henv:=nil})
    if( (odbc.SQLAllocConnect(_henv,h.handle) = 0)
    then: {_hdbc:=h.value32
       h.close()}
    else: {_hdbc:=nil
       e::=ODBCError.new(_henv,odbc.NULL,odbc.NULL)
       odbc.SQLFreeEnv(_henv)
       _henv:=nil
       h.close()
       e.raise})
    if( (odbc.SQLConnect(_hdbc,database,odbc.SQL_NTS,
                           user,odbc.SQL_NTS,
			   password,odbc.SQL_NTS) != 0)
  then: {e ::= ODBCError.new(odbc.NULL,_hdbc,odbc.NULL)
     odbc.SQLFreeConnect(_hdbc)_hdbc:=nil
     odbc.SQLFreeEnv(_henv)    _henv:=nil
     e.raise})
}

_open(url:URL):Void
  (* *)
{
  database ::= ""
  user ::= ""
  password ::= ""
  if( url.arcs.size > 1 then: { database := url.arcs[1] }) 
  if( url.parameters.includesKey("user")
  then: { user := url.parameters["user"].head })
  if( url.parameters.includesKey("password") 
  then: { password := url.parameters["password"].head })
  _connect(database,user,password)
}

_releaseHandles():Void
  (* *)
{
  odbc.SQLDisconnect(_hdbc)
  odbc.SQLFreeConnect(_hdbc)
  odbc.SQLFreeEnv(_henv)
}

}
