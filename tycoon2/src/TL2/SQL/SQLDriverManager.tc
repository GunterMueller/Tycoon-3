class SQLDriverManager
super SQL
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Handle connections with data-sources

Author:  Michael Skusa
Date:    30-Apr-1997
Updates: (Date)	  (Name)	(Description)
*)
meta SingletonClass(SQLDriverManager)
{
connect(url:URL):SQLConnection
  (*
     - checks, whether url identifies a data-source,
       selects a SQLDriver which can connect with the data-source and
       returns an open connection, if possible.
     - returns nil if url does not identify a data-source or if
       no registered SQLDriver was found to handle the connection
     - raises SQLError if SQLDriver was found, but connection-
       parameters were invalid
     - Syntax of a correct connection-URL:
       tydbc:<connection description>
       For details on <connection description> see SQLDriver.tc,
       SQLConnection.tc and their subclasses
   *)
{
  if( url.scheme = "tysql"
  then: {
      driver ::= driver(url)
      if( driver.isNotNil then: {driver.connect(url)}
                      else: {nil})
    }
  else: { nil })
}

registerDriver(driver:SQLDriver):SQLDriver
  (*
      Registers a new SQLDriver. This should be done automatically
      while loading a new SQLDriver.
  *)
{
  _drivers.add(driver)
  driver
}

unregisterDriver(driver:SQLDriver):Void
  (* Remove a driver from the set of possible SQLDrivers *)
{
  _drivers.remove(driver)
}

drivers():Set(SQLDriver)
  (* Returns all currently registered SQLDrivers *)
{
  _drivers
}

driver(url:URL):SQLDriver
  (*
     Returns a SQLDriver which is able to handle
     the given url. If no such driver is available, nil is
     returned.
  *)
{
   _drivers.detect(fun (driver:SQLDriver) { driver.acceptsURL(url) })
}

private

_drivers:Set(SQLDriver)

_init():Self
  (* *)
{
  super._init
  _drivers:=Set.new
  self
}

}
