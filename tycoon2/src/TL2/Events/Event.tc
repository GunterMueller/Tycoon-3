class Event
super Ordered(Event), Events
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

An Event with a fixed timed action, running as a separate thread.

Author:  Axel Wienberg, Gerd Bremer
Date:    09-Oct-1997
Updates: (Date)	  (Name)	(Description)
         11-Nov-1997 GB  bugfix in require value in method remove
*)
meta EventClass
{
time :Long
  (* ------------------------------------------------------------ *)
{ _time }

action :Fun():Void
  (* ------------------------------------------------------------ *)
{ _action }

thread :Thread(Void)
  (* ------------------------------------------------------------ *)
{ _thread }

"thread:="(thread :Thread(Void)) :Void
  (* ------------------------------------------------------------ *)
require thread.isNotNil
  
  {
    _thread := thread
    nil
  }

order(e :Event) :Int
  (* ------------------------------------------------------------ *)
require e.isNotNil
  
  { time.order(e.time) }

remove(eventQueue :PriorityQueue(Event)) :Void
  (* ------------------------------------------------------------ *)
require eventQueue.isNotNil &
    eventQueue[0] == self

  { eventQueue.removeFirst }

printOn(out :Output) :Void
  (* ------------------------------------------------------------ *)
require out.isNotNil

  { out << "an event at: " << Date.fromTime(_time) }

private

_time :Long

_action :Fun():Void

_thread :Thread(Void)

}
