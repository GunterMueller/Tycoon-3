class PeriodicEvent
super Event, Events
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 
Author:  Gerd Bremer
Date:    09-Oct-1997
Updates: (Date)	  (Name)	(Description)
*)
meta PeriodicEventClass
{
minutes :List(Int)
  (* *)
{ _minutes }

hours :List(Int)
  (* *)
{ _hours }

dayOfMonth :List(Int)
  (* *)
{ _dayOfMonth }

month :List(Int)
  (* *)
{ _month }

weekday :List(Int)
  (* *)
{ _weekday }

nextEventDate(date :Date) :Date
  (* return date of next event 
 ------------------------------------------------------------ *)
require date.isNotNil


  { _nextEventDate(date) }

nextEventDates(date :Date, n :Int) :List(Date)
  (* return list of n event dates in timed order 
 ------------------------------------------------------------ *)
require date.isNotNil &
    n.isNotNil


  {
    l ::= List.new
    nextdate ::= nextEventDate(date)
    for(1 to: n do: fun(i :Int)
      {
        l := List.append(:Date, :Date, l, List.with1(nextdate))
	nextdate := nextEventDate(nextdate)
      })
    l
  }

remove(eventQueue :PriorityQueue(Event)) :Void
  (* remove this event from 'eventQueue', add this event with
   next event date to 'eventQueue' 
 ------------------------------------------------------------ *)
require eventQueue.isNotNil &
    eventQueue.removeFirst == self


  {
    eventQueue.removeFirst
    _time := _nextEventDate(Date.fromTime(_time)).asTime
    eventQueue.add(self)
  }

removeTotal(eventQueue :PriorityQueue(Event)) :Void
  (* remove this event from 'eventQueue' 
 ------------------------------------------------------------ *)
require eventQueue.isNotNil &
    eventQueue.removeFirst == self


  { eventQueue.removeFirst }

printOn(out :Output) :Void
  (* ------------------------------------------------------------ *)
require out.isNotNil

  {
    result ::= GapString.new0
    result.addAll("\n  minutes: ")
    _formatPeriodicField(result, _minutes, 60)    
    result.addAll("\n  hours: ")
    _formatPeriodicField(result, _hours, 24)    
    result.addAll("\n  day-of-month: ")
    _formatPeriodicField(result, _dayOfMonth, 31)    
    result.addAll("\n  month: ")
    _formatPeriodicField(result, _month, 12)    
    result.addAll("\n  weekday: ")
    _formatPeriodicField(result, _weekday, 7)
    result.add('\n')
    out << "a periodic event at:" << Date.fromTime(_time) << result.asString
  }

private

_minutes :List(Int)

_hours :List(Int)

_dayOfMonth :List(Int)

_month :List(Int)

_weekday :List(Int)

_minutesIncorrect :Bool

_hoursIncorrect :Bool

_dayIncorrect :Bool

_monthIncorrect :Bool

_monthTable :GapArray(Int)

_weekdaySizeWeight :Real

_dayOfMonthSizeWeight :Real

_init :Void
  (* ------------------------------------------------------------ *)
{
    super._init
    _monthTable := GapArray.new1(13)
    _monthTable[1] := 31
    _monthTable[3] := 31
    _monthTable[4] := 30
    _monthTable[5] := 31
    _monthTable[6] := 30
    _monthTable[7] := 31
    _monthTable[8] := 31
    _monthTable[9] := 30
    _monthTable[10] := 31
    _monthTable[11] := 30
    _monthTable[12] := 31
    _weekdaySizeWeight := 0.25 / _weekday.size.asReal
    _dayOfMonthSizeWeight := 1.asReal/_dayOfMonth.size.asReal
    _time := _nextEventDate(Date.now).asTime
  }

_validate(date :Date) :Void
  (* check if date is correct according to minutes list,
   hours lists, ...
 ------------------------------------------------------------ *)
require date.isNotNil


  {
    error ::= false
    if( !_month.includes(date.month) then:
      {
	error := true
	_monthIncorrect := true
      } else:
      { _monthIncorrect := false })
    if( error | !_dayOfMonth.includes(date.day) | !_weekday.includes(date.weekDay) then:
      {
	error := true
	_dayIncorrect := true
      } else:
      { _dayIncorrect := false })
    if( error | !_hours.includes(date.hour) then:
      {
	error := true
	_hoursIncorrect := true
      } else:
      { _hoursIncorrect := false })
    if( error | !_minutes.includes(date.minute) then:
      {
	error := true
	_minutesIncorrect := true
      } else:
      { _minutesIncorrect := false })
  }

_formatRange(result :GapString, first :Int, last :Int) :Void
  (* add integer value or integer range value to result 
 ------------------------------------------------------------ *)
require result.isNotNil &
    first.isNotNil &
      last.isNotNil
      

  { if( last != first then:
      {
	result.addAll(first.printString)
	result.add('-')
	result.addAll(last.printString)
      } else:
      { result.addAll(first.printString) })
  }

_formatPeriodicField(result :GapString, list :List(Int), max :Int) :Void
  (* generate formated output of 'list' and insert it into 'result' 
 ------------------------------------------------------------ *)
require result.isNotNil &
    list.isNotNil &
      max.isNotNil
   

  {
    if( list.size == max then:
      { result.add('*') } else:
      {
        first :Int := nil
	last :Int := nil
        list.do(fun(i :Int) :Void
	  { if( first.isNil then:
	      {
	        first := i
		last := i
	      } else:
	      { if( last = i - 1 then:
	          { last := i } else:
		  {
                    _formatRange(result, first, last)
		    result.add(',')
		    first := i
	            last := i
		  })
	      })
	  })
	_formatRange(result, first, last)
      })
  }

_nextPeriodicInt(list :List(Int), basis :Int) :Int
  (* get next list element from 'list' which is greater than 'basis',
   if no such element exits take smallest one from 'list' 
 ------------------------------------------------------------ *)
require list.isNotNil &
    basis.isNotNil
   
    
  {
    minLess :Int := nil
    minGreater :Int := nil
    list.do(fun(i :Int)
      { if( minLess.isNil &&  i <= basis  then:
          { minLess := i } else:
	  { if( minGreater.isNil &&  i > basis  then:
	      { minGreater := i } else:
	      { nil })
	  })            
      })
    if( minGreater.isNil then:
      { minLess } else:
      { minGreater })
  }

_nextWeekdayDate(date :Date) :Date
  (* return next weekday according to 'date' and '_weekday' list 
 ------------------------------------------------------------ *)
require date.isNotNil
 
    
  {
    new ::= Date.new
    new.offset := (-3600) ; what a mess date 
    new.second := date.second
    new.minute := date.minute
    new.hour := date.hour
    nextWeekday ::= _nextPeriodicInt(_weekday, date.weekDay)
    delta ::= (nextWeekday + 7 - date.weekDay) % 7
    if( delta == 0 then: { delta := 7 })
    new.day := date.day + delta
    new.month := date.month
    new.year := date.year
    new.normalize

    ; check for valid month 
    newMonth ::= new.month
    if( !_month.includes(newMonth) then:
      {
        nextMonth ::= _nextPeriodicInt(_month, newMonth)
        new.day := 0
	new.month := nextMonth
	new.year := if( nextMonth < newMonth then:
	  { new.year + 1 } else:
	  { new.year })
	new.normalize
	_nextWeekdayDate(new)
      } else:
      { new })
  }

_febDays(year :Int) :Int
  (* ------------------------------------------------------------ *)
require year.isNotNil

  { if( Date.isLeap(year) then: { 29 } else: { 28 })}

_nextValidDayOfMonth(date :Date) :Date
  (* return date with day equal to 'date.day', next valid month
   and next valid year (leap year) if neccessary 
 ------------------------------------------------------------ *)
require date.isNotNil


  {
    day ::= date.day
    year ::= date.year
    oldMonth ::= date.month
    nextMonth ::= _nextPeriodicInt(_month, oldMonth)
    if( nextMonth <= oldMonth then: { year := year + 1 })
    while({
            _monthTable[2] := _febDays(year)	
            _monthTable[nextMonth] < day
	  } do:
      {
        oldMonth := nextMonth
        nextMonth := _nextPeriodicInt(_month, oldMonth)
	if( nextMonth <= oldMonth then: { year := year + 1 })
      })
    date.month := nextMonth
    date.year := year
    date.normalize
    date
  }

_nextDayOfMonthDate(date :Date) :Date
  (* return next day of Month according to 'date' and '_dayOfMonth' list 
 ------------------------------------------------------------ *)
require date.isNotNil
 
    
  {
    new ::= Date.new
    new.offset := (-3600)  ; what a mess date 
    new.second := date.second
    new.minute := date.minute
    new.hour := date.hour
    new.month := date.month  
    nextDayOfMonth ::= _nextPeriodicInt(_dayOfMonth, date.day)
    new.day := nextDayOfMonth
    new.year := date.year
    new.normalize
    if( nextDayOfMonth > date.day &&
        (
	  _monthTable[2] := _febDays(new.year)
	  _monthTable[date.month] >= nextDayOfMonth
	)  &&
	   _month.includes(new.month)  then:
      { new } else:
      { _nextValidDayOfMonth(new) })
  }

_nextDayOfMonthOrWeekdayDate(date :Date) :Date
  (* return next day of month or next weekday, according as
   which comes first 
 ------------------------------------------------------------ *)
require date.isNotNil

       
  {
    nextDayOfMonthDate ::= _nextDayOfMonthDate(date)
    nextWeekdayDate ::= _nextWeekdayDate(date)
    if( nextDayOfMonthDate.asTime < nextWeekdayDate.asTime then:
      { nextDayOfMonthDate } else:
      { nextWeekdayDate })
  }

_nextDayOfMonthAndWeekdayDate(date :Date) :Date
  (* return next day of month which is also a valid weekday,
   use heuristic to look for next weekday or day of month first 
 ------------------------------------------------------------ *)
require date.isNotNil


  {
     if( _dayOfMonthSizeWeight > _weekdaySizeWeight then:
      {
	nextDayOfMonthDate ::= _nextDayOfMonthDate(date)
	while({ !_weekday.includes(nextDayOfMonthDate.weekDay) } do:
	  { nextDayOfMonthDate := _nextDayOfMonthDate(nextDayOfMonthDate) })
	nextDayOfMonthDate
      } else:
      {
	nextWeekdayDate ::= _nextWeekdayDate(date)
	while({ !_dayOfMonth.includes(nextWeekdayDate.day) } do:
	  { nextWeekdayDate := _nextWeekdayDate(nextWeekdayDate) })
	nextWeekdayDate
      })
  }

_nextEventDate(date :Date) :Date
  (* return date of next event 
 ------------------------------------------------------------ *)
require date.isNotNil


  {
    ; copy 'date' 
    t ::= date.asTime
    date ::= Date.fromTime(t)

    date.second := 0
    date.normalize
    _validate(date)
; tycoon.stdout << "overflow: minutes: ", 
    overflow ::= false
    nextMinute ::= _nextPeriodicInt(_minutes, date.minute)
    overflow := (nextMinute <= date.minute) | _hoursIncorrect
    if( !overflow then:
      {
; tycoon.stdout << "false\n", 
	date.minute := nextMinute
	date.normalize
	date
      } else:
      {
; tycoon.stdout << "true, hours: ", 
	; change hour, reset minutes 
	date.minute := _nextPeriodicInt(_minutes, 59)
	date.normalize	    
	nextHour ::= _nextPeriodicInt(_hours, date.hour)
	overflow := (nextHour <= date.hour) | _dayIncorrect
	if( !overflow then:
	  {
; tycoon.stdout << "false\n", 
	    date.hour := nextHour
	    date.normalize
	    date
	  } else:
	  {
; tycoon.stdout << "true, days: ", 
	    ; change day, reset hours 
	    date.hour := _nextPeriodicInt(_hours, 23)
	    date.normalize
	    ; _nextDayOfMonthOrWeekdayDate(date) 
	    _nextDayOfMonthAndWeekdayDate(date)
	  })
      })
  }

}
