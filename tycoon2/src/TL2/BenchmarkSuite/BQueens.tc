class BQueens
super Benchmark
(**)
meta SimpleConcreteClass(BQueens)
{
private

_a :MutableArray(Bool)

_b :MutableArray(Bool)

_c :MutableArray(Bool)

_x :MutableArray(Int)

_tryPut(i :Int, a :MutableArray(Bool), b :MutableArray(Bool), c :MutableArray(Bool),
        x :MutableArray(Int)) :Bool
  (* *)
{
  j ::= 0
  q ::= false
  while({!q && j != 8} do: {
    j := j + 1
    q := false
    if( b[j] && (a[i + j] && c[i - j + 7])
      then: { x[i] := j
          b[j] := false
          a[i + j] := false
          c[i - j + 7] := false
	      if( i < 8 && !_tryPut(i + 1, a, b, c, x)
	        then: { b[j] := true
		        a[i + j] := true
		        c[i - j + 7] := true
		      }
		    else: { q := true })
        })
  })
  q
}

_setup() :Void
  (* *)
{
  for(0 to: _a.size - 1 do: fun(i :Int){_a[i] := true})
  for(0 to: _b.size - 1 do: fun(i :Int){_b[i] := true})
  for(0 to: _c.size - 1 do: fun(i :Int){_c[i] := true})
  for(0 to: _x.size - 1 do: fun(i :Int){_x[i] := 0})
}

_run() :Void
  (* *)
{
  if( _tryPut(1, _b, _a, _c, _x)  then: { "\nSolution found\n".print }
                              else: { "\nNo Solution\n".print })
}

_init() :Self
  (* *)
{
  _a := MutableArray.new(9)
  _b := MutableArray.new(17)
  _c := MutableArray.new(15)
  _x := MutableArray.new(9)
  self
}

}
