class WorkQueue(T <: Object)
super MutexHolder
metaclass SimpleConcreteClass(WorkQueue(T))

public methods


addWork(work :T) :Void
{
  lock({
    _queue.addLast(work),
    _slaveWaiting > 0
    ? { _barrier.signal }
  })
}


getWork() :T
{
  lock({
    while({_queue.isEmpty && {!_finished}}, {

       _slaveWaiting := _slaveWaiting + 1,
       _barrier.wait(_mx),
       _slaveWaiting := _slaveWaiting - 1
    }),
    _queue.isEmpty && {_finished}
    ? { nil }
    : { _queue.removeFirst }
  })
} 


setFinished :Void
{
  lock({
    _finished := true,
    _barrier.signal
  })
}


private 

_queue :Queue(T),
_slaveWaiting :Int,

_barrier :BroadcastingCondition,
_finished :Bool

methods

_init() :Self
{
  super._init,
  _queue := Queue.new1(100),
  _slaveWaiting := 0,
  _barrier := BroadcastingCondition.new,
  _finished := false,
  self
}
