class MasterSlaves
super Benchmark
(**)
meta MasterSlavesClass
{
private

_m :Int

_s :Int

_wpm :Int

_debug :Bool

_setup :Void
  (* *)
{
}

_run :Void
  (* *)
{
  _go(_m, _s, _wpm, _debug)
}

_go(m :Int, s:Int, wpm :Int, debug :Bool) :Void
  (* *)
{
  masters ::= MutableArray.new(m)
  mri ::= MutableArray.new(m)
  slaves ::= MutableArray.new(s)
  queue ::= WorkQueue.new
  ;
; * This file is part of the Tycoon-2 system.
; *
; * The Tycoon-2 system is free software; you can redistribute it and/or
; * modify it under the terms of the GNU General Public License
; * as published by the Free Software Foundation (Version 2).
; *
; * The Tycoon-2 system is distributed in the hope that it will be useful,
; * but WITHOUT ANY WARRANTY; without even the implied warranty
; * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; * See the GNU General Public License for more details.
; * 
; * You should have received a copy of the GNU General Public
; * License along with the Tycoon-2 system; see the file LICENSE.
; * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
; * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
; * 
; * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
; *
; start masters 
  for(0 to: m-1 do: fun(i :Int) {
    ma ::= Master.new2(queue, wpm)
    mri[i] := ma
    masters[i] := ma.run
  })
  if( debug then: {tycoon.stdout << "masters started\n"})
  ; start slaves 
  for(0 to: s-1 do: fun(i :Int) {
    sl ::= Slave.new1(queue)
    slaves[i] := sl.run 
  })
  if( debug then: {tycoon.stdout << "slaves started\n"})
  ; join masters 
  for(0 to: m-1 do: fun(i :Int) {
    masters[i].join
  })
  if( debug then: {tycoon.stdout << "masters joined\n"})
  ; stop queue 
  queue.setFinished
  if( debug then: {tycoon.stdout << "queue state reset\n"})
  ; join slaves 
  for(0 to: s-1 do: fun(i :Int) {
    slaves[i].join
  })
  if( debug then: {tycoon.stdout << "slaves joined\n"})
  ; output result 
  if( debug
  then: { for(0 to: m-1 do: fun(i :Int) {
        mri[i].workList.do(fun(w :WorkItem(Int)) {
          tycoon.stdout << w.result << " "
        })
      })
    })
  nil
}

}
