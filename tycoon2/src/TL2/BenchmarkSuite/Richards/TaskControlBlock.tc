class TaskControlBlock
super TaskState
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 "Richards" benchmark: ported from C++ to TL-2 *)
meta TaskControlBlockClass(TaskControlBlock)
{
ident    :Int

priority :Int

input    :Queue(Packet)

addPacket(p :Packet,
          newTaskList :List(TaskControlBlock),
	  oldTaskList :List(TaskControlBlock))
	  :List(TaskControlBlock)
  (* *)
{
  if( input.isEmpty
    then: { input.addLast(p)
        packetPending := true
	if( priority > oldTaskList.head.priority
	  then: { newTaskList }
	  else: { oldTaskList })
      }
    else: { input.addLast(p)
        oldTaskList
      })
}

actionFunc(p :Packet, noWork :Bool)
  :List(TaskControlBlock)
  (* *)
deferred

runTask() :List(TaskControlBlock)
  (* *)
{
  if( isWaitingWithPacket
    then: { msg ::= input.removeFirst
        if( input.isEmpty
	  then: { setRunning }
	  else: { setPacketPending  })
	actionFunc(msg, false)
      }
    else: { dummy ::= Packet.new
        actionFunc(dummy, true)
      })
}

print() :Void
  (* *)
{}

}
