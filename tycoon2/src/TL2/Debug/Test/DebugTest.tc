class DebugTest
super Object
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
;
tycoon.tl.loader.registerFile("Debug/Test/DebugTest.tc");
tycoon.tl.loader.update, tycoon.tl.typeChecker.finalize;
tycoon.tl.typeChecker.checkClass(DebugTest);
DebugTest.init;

DebugTest.instance.startWorker;
DebugTest.instance.debugWorker;
DebugTest.instance.stopWorker;
DebugTest.instance.undebugWorker;

*)
meta SingletonClass(DebugTest)
{

startWorker :Void
{
  _stopWorking := false
  worker := Thread.new({
    Thread.this.name := "Worker"
    workLoop
  })
}

debugWorker :Void
{
  worker.traceFlags :=
    Thread.TRACE_SEND | Thread.TRACE_RETURN | Thread.TRACE_EXCEPTION
    | Thread.TRACE_NONCOMPONENT
}

undebugWorker :Void
{
  worker.traceFlags := 0
}

stopWorker :Void
{
  _stopWorking := true
}

workLoop :Void
{
  if(!_stopWorking then: {
    tycoon.stdout << "work...\n"
    Thread.sleep(2L)
    workLoop
  } else: {
    tycoon.stdout << "worker stopped\n"
  })
}

worker :Thread(Void)

_stopWorking :Bool

}
