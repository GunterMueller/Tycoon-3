class ChoiceContent(CS <: ChoiceContentSpec)
super ConcreteContent(CS), Dictionary(String, Content)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ChoiceContent.tc

   Tycoon Business Conversation (TBC) for Tycoon 2 
   -----------------------------------------------
   Abstract superclass for both Single- and Multiple-Choices.
   They specify a list of possible alternatives, from which some can be 
   selected. The type is specified by the corresponding ChoiceSpec.
   Note that the choices are *Contents* and not ContentSpecs!
   How many can be selected (and how), is decided in our subclasses.
   The choices are held in a 
   Int/Content-dictionary and can be accessed via their integer-index.
   The index may be freely chosen,
   there is not need to enumerate them from 1..n.  This 
   may be useful for translations into eg.  'Postleitzahlen'.
   
   22.09.97 hw : created
   
*)
meta AbstractClass
{

"[]:="(tag :String, c :Content) :Content
  (* Override []:= to avoid accidently setting choices of wrong spec.
     if tried to, an exception of type SpecError is raised.
   *)
{
  if( spec.choiceSpec.matches(c.spec)
    then: {super."[]:="(tag, c)}
    else: {SpecError.new(c, spec).raise})
}

}
