class SingleChoiceContent
super ChoiceContent(SingleChoiceContentSpec)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 SingleChoiceContent.tc

   Tycoon Business Conversation (TBC) for Tycoon 2
   -----------------------------------------------
   Single-Choice. The content itself does only contain the selected choice,
   here for simplicity just the index into the Spec-Dictionary of possible
   choices. Default choice is none, ie. nil is returned.
   Moreover, SingleChoiceContent has methods to get and to set the current
   choice.

   11.08.97 hw : created
   22.09.97 hw : choices now are here
   
*)
meta SingleChoiceContentClass
{

sch() :SingleChoiceContent
  (* Typesafe accessor. *)
{
  self
}

visit(v :ContentVisitor) :Void
  (* For visitors. *)
{
  v.singleChoiceContent(self)
}

chosen():String
  (* *)
{
  _selected
}

choose(newIndex :String) :Void
  (* Select another valid choice by index. if index is not in Spec,
     an exception is raised. *)
{
  if( (newIndex.isNil || self.includesKey(newIndex))
    then: {_selected := newIndex}
    else: {KeyNotFoundError.new(self, newIndex).raise})
}

chosenContent() :Content
  (* Return the content of the current choice, if none selected, nil *)
{
  if( _selected.isNil
    then: {nil}
    else: {self[_selected]})
}

private

_selected :String

}
