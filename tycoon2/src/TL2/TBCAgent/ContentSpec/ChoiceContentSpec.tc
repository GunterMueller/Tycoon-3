class ChoiceContentSpec
super ContentSpec
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 ChoiceContentSpec.tc

   Tycoon Business Conversation (TBC) for Tycoon 2 
   -----------------------------------------------
   Abstract superclass for both Single- and Multiple-ChoiceContentSpecs.  
   Choices specify a list of possible alternatives, from which some can be 
   selected.  Note that they all must have the same type, or in terms of TBC, 
   ContentSpecs.
   Note that the possible alternatives are now held by the contents.
   
   12.08.97 hw : created
   22.09.97 hw : choices moved into contents
   
*)
meta AbstractClass
{

choiceSpec :ContentSpec
  (* the common type of the choices *)

matches(other :ContentSpec) :Bool
  (* Return true, iff other spec is a ..ChoiceSpec AND the embedded
     specs for the type of the choices also match. *)
{
  (other.clazz = self.clazz) && (
    other2 ::= _typeCast(other, :Self)    
			     ; safe, since same class and no type parameters! 
    choiceSpec.matches(other2.choiceSpec)
  )
}

; "[]:="(i :Int, c :Content) :Content
;   (* Override []:= to avoid accidently setting choices of wrong spec.
;      if tried to, an exception of type SpecError is raised.
;    *)
; {
;   if( choiceSpec.matches(c.spec) then: {
;     super."[]:="(i, c)
;   } else: {
;     SpecError.new(c, choiceSpec).raise
;   })
; }
; 

}
