class DialogSpec
super NamedMixin
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 DialogSpec.tc

   Tycoon Business Conversation (TBC) for Tycoon 2 
   -----------------------------------------------
   Specification of dialogs.  A dialog spec has a list of request specs, 
   indexed by name, and a list of named contents (implemented 
   for simplicity by a single record-content-spec).  The advantage having all 
   ContentSpecs in a RecordContentSpec together ist that the entire content 
   can be instanciated by a single instance()-method send.

   Because DialogSpecs aggregate two type of information in almost similar 
   ways, I didn't design it as subclass of one of it or inherit from 
   Dictionary to collect the elements.  I feel it will be never intuitivly 
   obvious which of the aggregated content- and request-specs is stored where 
   and why. So they are both equally treated components of the DialogSpec.

   13.08.97 hw : created
   17.08.97 hw : made replies a slot, too.
   
*)
meta DialogSpecClass
{

contentSpec :RecordContentSpec

replies :NameIndex(RequestSpec)

newRequest(requestName :String) :RequestSpec
{
  requestSpec ::= RequestSpec.new(requestName)
  replies.add(requestSpec)
  requestSpec
}

visit(v :TBCSpecVisitor) :Void
  (* *)
{
  v.dialogSpec(self)
}

matches(other :DialogSpec) :Bool
  (* Return true iff the other DialogSpec matches ourself. This test is
     carried out by delgation to content- and request-specs.

     self is the spec requested by the customer (old),
     other is the spec implemented by the performer (new). *)
{
  contentSpec.matches(other.contentSpec) && 
  replies.keys.all(fun(k :String){
    other.replies.lookup(k, :Bool, 
      fun(r :RequestSpec){replies[k].matches(r)},
      {false}
    )
  })
}

instance() :Dialog
  (* Return a new instance of a Dialog described by self. *)
{
  Dialog.new(self)
}

}
