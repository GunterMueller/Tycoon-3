class X_TspDescriptor
super X_SystemTracer
metaclass AbstractClass
public methods

layout :Int                 (*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 layout of store objects. -> tsp_Object in tsp.h *) 
  deferred

format :String
  (* only meaningful for Struct. *)
{ nil }
  
(* possible values for <layout>. -> tsp_Object in tsp.h *)

layoutStruct :Int	{ 0 }
layoutWeakRef :Int	{ 1 }
layoutArray :Int	{ 2 }   (* default case for tycoon objects *)
layoutByteArray :Int	{ 3 }
layoutShortArray :Int	{ 4 }
layoutLongArray :Int	{ 5 }
layoutThread :Int	{ 6 }
layoutStack :Int	{ 7 }

isStruct :Bool
  (* Should the class manager generate CStruct access methods? *)
{ false  (* redefined in Struct, for Struct and Thread *)
}

(* size of <o> in bytes when written to <tracer> *)
objectSize(o :Object, tracer :X_Tracer) :Int
  deferred

dumpInstance(o :Object, tracer :X_Tracer)
  deferred

allocate(o :Object, tl2Class :X_TL2Class, tracer :X_Tracer) :Int
  require o."class".name = tl2Class.name
{
  let bytes = objectSize(o, tracer),
  tracer.allocate(o, bytes, tl2Class.id, o.identityHash, {
    dumpInstance(o, tracer)
  })
}
;
