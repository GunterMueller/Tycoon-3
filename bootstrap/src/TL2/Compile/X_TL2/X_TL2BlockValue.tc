class X_TL2BlockValue
super X_TL2Value
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2BlockValueClass
{
values :List(X_TL2Value)

accept(T <: Void, v :X_TL2ValueVisitor(T)) :T
  (* *)
{ v.visitBlock(self) }

isBlock :Bool
  (* *)
{ true }

asBlock :X_TL2BlockValue
  (* *)
{ self }

isComponent :Bool
{ last ::= values.inject(nil, fun(:X_TL2Value,v :X_TL2Value){ v })
  last.isNotNil && last.isComponent
}

prettyPrint(out:Printer) :Void
  (* *)
{
  if( values.isEmpty then: {
    out.writeAll("(*empty*)")
  } else: {
    simple ::= isSimple
    values.doBetween(fun(v:X_TL2Value) {
      v.prettyPrint(out)
    }, {
      out.write(',')
      if( simple then: { out.space } else: { out.nl })
    })
  })
}

noSideEffect :Bool
  (* true => evaluating this expression in an ignore context has no effect. *)
{ values.isEmpty  ; conservative approx. 
}

children :Reader(X_TL2ProgramObject)
  (* *)
{
  values.reader
}

scope(env :X_TL2Scoper) :X_TL2BlockValue
  (* *)
{
  values := env.scopeList(:X_TL2Value, values)
  ;; all but the last have to be reference expressions
  values.inject(nil, fun(prev:X_TL2Value,v :X_TL2Value){
    if( prev.isNotNil && prev.isComponent then: {
        env.errorLog.error(prev.pos, "Ignored component expression")
    })
    v })
  self
}

genCode(backEnd :X_BEMethodManager) :Void
  (* *)
{ last ::= genButLast(backEnd)
  last.genCode(backEnd)
}

genCodeIgnore(backEnd :X_BEMethodManager) :Void
  (* *)
{ values.do(fun(v :X_TL2Value) {
    v.genCodeIgnore(backEnd)
  })
}

genCodeReturn(backEnd :X_BEMethodManager) :Void
  (* *)
{ last ::= genButLast(backEnd)
  last.genCodeReturn(backEnd)
}

genCodeBranch(backEnd :X_BEMethodManager, dest :X_BEMMLabel, branchIf :Bool) :Void
  (* *)
{ last ::= genButLast(backEnd)
  last.genCodeBranch(backEnd, dest, branchIf)
}

genButLast(backEnd :X_BEMethodManager) :X_TL2Value
  (* *)
{ if( values.isEmpty then: fun():X_TL2Value {
    X_TL2LiteralValue.new(nil, nil)
  } else: {
    last ::= values.head
    values.tail.do(fun(v :X_TL2Value) {
      savedSp ::= backEnd.sp
      last.genCodeIgnore(backEnd)
      assert({ savedSp = backEnd.sp })
      last := v
    })
    last
  })
}

private

doCheck(T <: Void, cont :Fun(:X_TL2Type,:X_TL2Subst):T) :T
  (* *)
{
    resultType :X_TL2Type := X_TL2VoidType.instance
    resultSubst :X_TL2Subst := X_TL2EmptySubst.instance

    values.do(fun(v :X_TL2Value) {
      v.check(fun(t :X_TL2Type, s :X_TL2Subst) { resultType := t resultSubst := s })
    })

    cont[resultType, resultSubst]
  }

}
