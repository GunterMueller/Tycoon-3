class X_TL2TypeIde
super X_TL2Ide
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 name = type *)
meta X_TL2TypeIdeClass
{
relationName :String
  (* *)
{ " = " }

type :X_TL2Type
  (* add dependency notification for the typeChecker *)
{
  if( tycoon.tl.isNotNil  ; ###BOOTSTRAP 
; ### plain wrong when doing 2nd bootstrap 
  then: { if( isGlobal 
      then: { tycoon.tl.typeChecker.globalIdeReferenced(name) }) })

  super.type
}

isGlobal :Bool
  (* Is this a global type identifier?
     If true, this ide will never by substituted. *)
{
  ; ### plain wrong when doing 2nd bootstrap 
  tycoon.tl.typeManager.isDefined(name)
  &&  tycoon.tl.typeManager.signature(name) == self
}

case( T <: Void,
      value :Fun(:X_TL2ValueIde):T,
      type :Fun(:X_TL2TypeIde):T,
      subType :Fun(:X_TL2SubTypeIde):T) :T
  (* *)
{
  type[self]
}

scopeGlobal(env :X_TL2Scoper) :X_TL2TypeIde
  (* *)
{
  if( name = env.currentClassSig.name then: {
    env.currentClassSig
  } else: {
    if( env.typeManager.isDefined(name) then: {
      env.typeManager.signature(name)
    } else: {
      env.errorLog.error(pos, "unbound type identifier: "+name)
      self
    })
  })
}

scope(env :X_TL2Scoper) :X_TL2TypeIde
  (* *)
{
  i ::= super.scope(env)
  if( i.isNil then: fun() :X_TL2TypeIde {
    scopeGlobal(env)
  } else: {
    i.case(:X_TL2TypeIde,
      fun(v:X_TL2ValueIde) {
        env.errorLog.error(pos, "value identifier used as type: "+name)
        env.errorLog.error(v.pos, "(point of declaration)")
	self
      },
      fun(t:X_TL2TypeIde){ t },
      fun(t:X_TL2SubTypeIde){ t }
    )
  })
}

}
