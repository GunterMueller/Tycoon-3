class X_TL2Method
super X_TL2ProgramObject
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
selector :Symbol

methodType :X_TL2MethodType

documentation :String

precondition :X_TL2Value

postcondition :X_TL2Value

isPrivate :Bool

arity :Int
  (* number of value arguments, without receiver *)

sorts :Int
  (* bitmap giving argument sorts *)

nativeCode :Int
  (* not used by Tycoon *)

acceptMethodVisitor(T <: Void, visitor :X_TL2MethodVisitor(T)) :T
  (* *)
deferred

domain :List(X_TL2Ide)
  (* *)
{ methodType.domain }

keywords :Array(Symbol)
  (* *)
{ methodType.keywords }

range :X_TL2Type
  (* *)
{ methodType.range }

"range:="(t :X_TL2Type) :X_TL2Type
  (* *)
{ methodType.range := t }

prettyPrint(out:Printer) :Void
  (* *)
{
;selector.printOn(out),
;  out.write(' '),
  out.writeAll(if( isPrivate then: {"private "} else: {"public "}))
  methodType.prettyPrint(out)
}

scopeMethod(env :X_TL2Scoper) :Void
  (* *)
{
  methodType := methodType.scope(env)
}

compileMethod(selfSig :X_TL2ValueIde, compiler :X_TL2Compiler) :Void
  (* *)
{ ;; non-compiled methods do not need any more
  computeArityAndSorts(compiler.errorLog)
  ;; make sure the selector is known (for perform)
  compiler.getSelectorId(
    X_TL2Selector.new1(selector, arity, sorts))
}

disassemble(reader :X_BEByteCodeReader) :Void
  (* *)
{ disassembleOn(Printer.new(tycoon.stdout), reader) }

disassembleOn(out :Printer, reader :X_BEByteCodeReader) :Void
  (* *)
{ ; X_TL2CompiledMethod implements this 
}

finalize :Void
  (* *)
{ ; X_TL2CompiledMethod implements this 
}

patchClass(compiledIn :X_TL2ClassPublic) :Void
  (* *)
{ ; X_TL2CompiledMethod implements this 
}

getSelector(errorLog :ErrorLog) :X_TL2Selector
{
  ;; just in case arity and sorts have not been computed yet
  computeArityAndSorts(errorLog)
  X_TL2Selector.new1(selector, arity, sorts)
}

private

computeArityAndSorts(errorLog :ErrorLog) :Void
  (* fill in the machine-relevant slots "arity" and "sorts". *)
{
  arity ::= 0
  sorts ::= 0
  domain.do(fun(i :X_TL2Ide) {
    if( i.isValueIde then: {
      vi ::= i.asValueIde
      if( vi.component then: {
        mask ::= (1 << arity)
	if( mask.isZero then: {
	  errorLog.error(vi.pos, "implementation restriction: only first 32 parameters may be components")
	})
        sorts := sorts | mask
      })
      arity := arity + 1
    })
  })
  self.arity := arity
  self.sorts := sorts
}

}
