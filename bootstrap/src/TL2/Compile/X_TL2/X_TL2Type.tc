class X_TL2Type
super X_TL2Argument, X_TL2ProgramObject
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
argumentCase(T <: Void,
       ifValue :Fun(:X_TL2Value):T,
       ifType :Fun(:X_TL2Type):T) :T
  (* *)
{ ifType[self] }

charCode :Char
  (* for the TVM *)
deferred

resultCharCode :Char
  (* *)
deferred

scope(env :X_TL2Scoper) :X_TL2Type
  (* restrict result type to X_TL2Type *)
deferred

subst(subst :X_TL2Subst) :X_TL2Type
  (* *)
deferred

visitor(T <: Void) :X_TL2FunTypeVisitor(T)
  (* *)
deferred

accept(T <: Void, visitor :X_TL2TypeVisitor(T)) :T
  (* visitor support
     calls the appropriate method in visitor
  *)
deferred

checkType(subst :X_TL2Subst) :Void
  (* is the receiver a well-formed type ? *)
deferred

checkApplication(args :List(X_TL2Type), subst :X_TL2Subst) :Void
  (* is it legal to apply the receiver to args ? 
 also checks self and args *)
deferred

expose(T <: Void, subst :X_TL2Subst, exact :Bool, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* unroll the type (with/without args) to either
     - a method suite
     - an oper type
     and call 'cont' with the result.

     parameter 'exact' determines whether an upper bound as result is ok.

     "ensure" : t.expose(subst, exact, fun(t1 :X_TL2Type, s1 :X_TL2Subst) {
                    t1.expose(s1, exact, fun(t2 :X_TL2Type, s2 :X_TL2Subst) {
		       (t1 == t2) & (s1 == s2)
		    })
		})

		resp t.apply(args, subst, argsSubst, exact, fun(t1 :X_TL2Type, s1 :X_TL2Subst) ...
		
      i.e. exposition is always as complete as possible	
  *)
deferred

apply(T <: Void, args :List(X_TL2Type), subst :X_TL2Subst, argsSubst :X_TL2Subst, exact :Bool, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* *)
deferred

reduce(T <: Void, subst :X_TL2Subst, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* partially apply the substitution
     needed to keep the X_TL2SubTypeDB small and to enable cache hits
  *)
deferred

lookup(T <: Void,
	 selector :Symbol,
	 subst :X_TL2Subst,
	 withPrivate :Bool,
	 cont :Fun(:X_TL2Method, :X_TL2Subst):T) :T
  (* method lookup/iteration.
     withPrivate determines whether the private method dictionaries
     are consulted, too.
     It also possible to provide a Self-type that
     all Self types found during lookup are substituted to.
  *)
deferred

lookupWithSelf(T <: Void,
	 selector :Symbol,
	 subst :X_TL2Subst,
	 withPrivate :Bool,
	 selfType :X_TL2Type,
	 selfTypeSubst :X_TL2Subst,
	 cont :Fun(:X_TL2Method, :X_TL2Subst):T) :T
  (* *)
deferred

methodsDo(subst :X_TL2Subst,
	    withPrivate :Bool,
	    callback :Fun(:X_TL2Method, :X_TL2Subst):Void) :Void
  (* *)
deferred

methodsWithSelfDo(subst :X_TL2Subst,
		    withPrivate :Bool,
		    selfType :X_TL2Type,
		    selfTypeSubst :X_TL2Subst,
	            callback :Fun(:X_TL2Method, :X_TL2Subst):Void) :Void
  (* *)
deferred

checkSubType(big :X_TL2Type, subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* check whether the receiver is a subtype of big *)
deferred

checkSubObjectType(big :X_TL2ObjectType, subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* these perform the actual subtype tests; now both types are known
     performed via Visitor-style double dispatch.
  
 ## do we need all these ??? *)
deferred

checkSubClassInstanceType(big :X_TL2ClassInstanceType, subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

checkSubNilType   (big :X_TL2NilType,    subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (*
     checkSubVoidType  (big :X_TL2VoidType,   subst :X_TL2Subst, bigSubst :X_TL2Subst) deferred
  *)
deferred

checkSubApplyType (big :X_TL2ApplyType,  subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

checkSubIdeType   (big :X_TL2IdeType,    subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

checkSubUnifyType (big :X_TL2UnifyType,  subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

checkSubOperType  (big :X_TL2OperType,   subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

checkSubMethodType(big :X_TL2MethodType, subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

checkSubSubstType  (big :X_TL2SubstType, subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
deferred

}
