class X_TL2Value
super X_TL2TypeCheckMixin, X_TL2CodeGenerator, X_TL2Argument, X_TL2ProgramObject
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
argumentCase(T <: Void,
       ifValue :Fun(:X_TL2Value):T,
       ifType :Fun(:X_TL2Type):T) :T
  (* *)
{ ifValue[self] }

visitor(T<:Void) :X_TL2FunValueVisitor(T)
  (* *)
{ X_TL2FunValueVisitor.new(self) }

accept(T <: Void, v :X_TL2ValueVisitor(T)) :T
  (* *)
{ v.visitDefault(self) }

isComponent :Bool
{ false }

isSend :Bool
  (* subclasses may redefine one of these to return true
     ### use visitor instead! *)
{ false }

asSend :X_TL2SendValue
  (* *)
{ nil }

isIde :Bool
  (* *)
{ false }

asIde :X_TL2IdeValue
  (* *)
{ nil }

isLet :Bool
  (* *)
{ false }

asLet :X_TL2LetValue
  (* *)
{ nil }

isBlock :Bool
  (* *)
{ false }

asBlock :X_TL2BlockValue
  (* *)
{ nil }

isFun :Bool
  (* *)
{ false }

asFun :X_TL2CompiledFun
  (* *)
{ nil }

check(T <: Void, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* Val xxx *)
{
    typeChecker.valueChecked(self, {
      doCheck(cont)
    })
  }

scope(env :X_TL2Scoper) :X_TL2Value
  (* *)
deferred

noSideEffect :Bool
  (* true => evaluating this expression in an ignore context has no effect. *)
{ false }

private

doCheck(T <: Void, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* subclasses override this to implement value type checking *)
deferred

}
