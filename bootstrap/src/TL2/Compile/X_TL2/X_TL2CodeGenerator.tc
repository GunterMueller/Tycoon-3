class X_TL2CodeGenerator
super X_TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
isComponent :Bool
  deferred

genCode(backEnd :X_BEMethodManager) :Void
  (* generate code that evaluates self and pushes the result *)
require backEnd.isReached
    deferred

genCodeIgnore(backEnd :X_BEMethodManager) :Void
  (* don't leave a result on the stack *)
require backEnd.isReached
  { genCode(backEnd)
    if( isComponent then: {
      backEnd.componentPop
    } else: {
      backEnd.pop
    })
  }

genCodeReturn(backEnd :X_BEMethodManager) :Void
  (* return immediately *)
require backEnd.isReached
  { genCode(backEnd)
    backEnd.return
  }

genCodeBranch( backEnd :X_BEMethodManager,dest :X_BEMMLabel, branchIf :Bool) :Void
  (* Evaluate to a boolean, and jump to <dest> if result is <branchIf>. *)
require backEnd.isReached
  { genCode(backEnd)
    assert({ !isComponent })
    if( branchIf then: {
      backEnd.ifTrue(dest)
    } else: {
      backEnd.ifFalse(dest)
    })
  }

}
