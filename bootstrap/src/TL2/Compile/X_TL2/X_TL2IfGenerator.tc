class X_TL2IfGenerator
super X_TL2CodeGenerator
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2IfGeneratorClass
{
condition :X_TL2Value

trueBranch :X_TL2Value

falseBranch :X_TL2Value

genCode(backEnd :X_BEMethodManager) :Void
  (* generate code that evaluates self and pushes the result *)
require backEnd.isReached
{
    falseL ::= backEnd.newLabel
    contL ::= backEnd.newLabel

    condition.genCodeBranch(backEnd, falseL, false)
    if( backEnd.isReached
    then: { trueBranch.genCode(backEnd)
        backEnd.jump(contL) })

    backEnd.defineLabel(falseL)
    if( backEnd.isReached
    then: { falseBranch.genCode(backEnd) })
    backEnd.defineLabel(contL)
}

genCodeIgnore(backEnd :X_BEMethodManager) :Void
  (* don't leave a result on the stack *)
require backEnd.isReached
{ trueEmpty ::= trueBranch.noSideEffect
  falseEmpty ::= falseBranch.noSideEffect

  if( trueEmpty then: {
    if( falseEmpty then: {
      condition.genCodeIgnore(backEnd)
    } else: {
      oneBranch(backEnd, false, falseBranch)
    })
  } else: {
    if( falseEmpty then: {
      oneBranch(backEnd, true, trueBranch)
    } else: {
      ; both nonempty 

      falseL ::= backEnd.newLabel
      contL ::= backEnd.newLabel
      
      condition.genCodeBranch(backEnd, falseL, false)
      if( backEnd.isReached
      then: { trueBranch.genCodeIgnore(backEnd)
          backEnd.jump(contL) })

      backEnd.defineLabel(falseL)
      if( backEnd.isReached
      then: { falseBranch.genCodeIgnore(backEnd) })

      backEnd.defineLabel(contL)
    })
  })
}

oneBranch(backEnd :X_BEMethodManager, which :Bool, branch :X_TL2Value) :Void
  (* *)
{
  skipL ::= backEnd.newLabel
  condition.genCodeBranch(backEnd, skipL, !which)
  if( backEnd.isReached
  then: { branch.genCodeIgnore(backEnd) })
  backEnd.defineLabel(skipL)
}

genCodeReturn(backEnd :X_BEMethodManager) :Void
  (* return immediately *)
require backEnd.isReached
{
  ;; avoid needless branches
  falseL ::= backEnd.newLabel
  condition.genCodeBranch(backEnd, falseL, false)
  if( backEnd.isReached
  then: { trueBranch.genCodeReturn(backEnd) })

  backEnd.defineLabel(falseL)
  if( backEnd.isReached
  then: { falseBranch.genCodeReturn(backEnd) })
}

genCodeBranch( backEnd :X_BEMethodManager,dest :X_BEMMLabel, branchIf :Bool) :Void
  (* Evaluate to a boolean, and jump to <dest> if result is <branchIf>. *)
require backEnd.isReached
{
  ;; don`t bother to optimize genCodeBranch
  ;; (can`t handle the general case anyway)
  super.genCodeBranch(backEnd, dest, branchIf)
}

isComponent :Bool
{ false ;; ## unfortunately
}

}
