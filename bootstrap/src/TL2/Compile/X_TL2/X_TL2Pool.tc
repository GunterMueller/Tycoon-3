class X_TL2Pool
super X_TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta SimpleConcreteClass(X_TL2Pool)
{
observers :DynSequence(X_TL2PoolObserver)
  (* observers for globalIdeChanged *)
{ _observers }

poolMethods :X_TL2MethodDictionary(X_TL2PoolMethod)
  (* *)
{ _poolMethods }

poolCells :KeyedContainer(Symbol, Cell(Object))
  (* *)
{ _poolCells }

defineVariable(v :X_TL2ValueIde) :Void
  (* *)
{
  sym ::= Symbol.new(v.name)
  assignSym ::= Symbol.new(v.name + ":=")
  cell ::= memoizeCell(sym)
  cell.value := nil

  _poolMethods[sym] :=
     X_TL2PoolAccessMethod.new(v.pos, sym, EmptyList.new, v.type, cell)
  _poolMethods[assignSym] :=
     X_TL2PoolUpdateMethod.new(v.pos, assignSym, v.type, cell)

  globalIdeChanged(sym)
  globalIdeChanged(assignSym)
}

defineClass(clazz :X_TL2ClassPublic) :Void
  (* *)
{
  sym ::= Symbol.new(clazz.name)
  cell ::= memoizeCell(sym)
  cell.value := clazz
  _poolMethods[sym] :=
     X_TL2PoolAccessMethod.new(clazz.pos,
	    sym,
	    clazz.domain, clazz.metaClassDeclaration,
	    cell)
  if( Symbol.symbolTable.includes(sym.name + ":=")
  then: { _poolMethods.removeKey(Symbol.new(sym.name + ":=")) })

  globalIdeChanged(sym)
  globalIdeChanged(sym+":=")
}

undefinePoolVariable(name :String) :Void
  (* remove a pool variable, and its access and update method.
   <name> must have been previously created using definePoolVariable.
   Warning: Don''t call this for classes... *)
{
  sym ::= Symbol.new(name)
  assignSym ::= Symbol.new(name + ":=")
  
  _poolCells.removeKey(sym)
  _poolMethods.removeKey(sym)
  _poolMethods.removeKey(assignSym)

  globalIdeChanged(sym)
  globalIdeChanged(assignSym)
}

private

_observers :DynSequence(X_TL2PoolObserver)

_poolCells :Dictionary(Symbol, Cell(Object))

_poolMethods :X_TL2MethodDictionary(X_TL2PoolMethod)

globalIdeChanged(name :String) :Void
  (* *)
{
  observers.do(fun(o :X_TL2PoolObserver) {
    o.globalIdeChanged(name)
  })
}

memoizeCell(sym :Symbol) :Cell(Object)
  (* *)
{
  _poolCells.memoize(sym, { Cell(:Object).new(nil) })
}

_init :Void
  (* *)
{
  super._init
  _observers := GapArray.new0
  _poolCells := Dictionary.new
  _poolMethods := X_TL2MethodDictionary.new1(3000)
  self
}

}
