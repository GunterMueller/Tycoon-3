class X_TL2FunValueVisitor(T <: Void)
super X_TL2ValueVisitor(T)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2FunValueVisitorClass(T)
{
target :X_TL2Value

visit :T
  (* this method and the target slot allow the following code:
   someValue.visitor.ifFoo(...).visit
 *)
{ target.accept(self) }

visitLiteral(v :X_TL2LiteralValue) :T
  (* *)
{ if( _ifLiteral.isNil then: { super.visitLiteral(v) } else: { _ifLiteral[v] }) }

visitSend(v :X_TL2SendValue) :T
  (* *)
{ if( _ifSend.isNil then: { super.visitSend(v) } else: { _ifSend[v] }) }

visitSuperSend(v :X_TL2SuperSendValue) :T
  (* *)
{ if( _ifSuperSend.isNil then: { super.visitSuperSend(v) } else: { _ifSuperSend[v] }) }

visitAssign(v :X_TL2AssignValue) :T
  (* *)
{ if( _ifAssign.isNil then: { super.visitAssign(v) } else: { _ifAssign[v] }) }

visitIde(v :X_TL2IdeValue) :T
  (* *)
{ if( _ifIde.isNil then: { super.visitIde(v) } else: { _ifIde[v] }) }

visitTakeFrom(v :X_TL2TakeFromValue) :T
  (* *)
{ if( _ifTakeFrom.isNil then: { super.visitTakeFrom(v) } else: { _ifTakeFrom[v] }) }

visitFun(v :X_TL2CompiledFun) :T
  (* *)
{ if( _ifFun.isNil then: { super.visitFun(v) } else: { _ifFun[v] }) }

visitLet(v :X_TL2LetValue) :T
  (* *)
{ if( _ifLet.isNil then: { super.visitLet(v) } else: { _ifLet[v] }) }

visitBlock(v :X_TL2BlockValue) :T
  (* *)
{ if( _ifBlock.isNil then: { super.visitBlock(v) } else: { _ifBlock[v] }) }

visitArray(v :X_TL2ArrayValue) :T
  (* *)
{ if( _ifArray.isNil then: { super.visitArray(v) } else: { _ifArray[v] }) }

visitDefault(v :X_TL2Value) :T
  (* *)
{ if( _otherwise.isNil then: { super.visitDefault(v) } else: { _otherwise[v] }) }

ifLiteral(action :Fun(:X_TL2LiteralValue):T) :Self
  (* *)
{ _ifLiteral := action
  self
}

ifSend(action :Fun(:X_TL2SendValue):T) :Self
  (* *)
{ _ifSend := action
  self
}

ifSuperSend(action :Fun(:X_TL2SuperSendValue):T) :Self
  (* *)
{ _ifSuperSend := action
  self
}

ifAssign(action :Fun(:X_TL2AssignValue):T) :Self
  (* *)
{ _ifAssign := action
  self
}

ifIde(action :Fun(:X_TL2IdeValue):T) :Self
  (* *)
{ _ifIde := action
  self
}

ifTakeFrom(action :Fun(:X_TL2TakeFromValue):T) :Self
  (* *)
{ _ifTakeFrom := action
  self
}

ifFun(action :Fun(:X_TL2CompiledFun):T) :Self
  (* *)
{ _ifFun := action
  self
}

ifLet(action :Fun(:X_TL2LetValue):T) :Self
  (* *)
{ _ifLet := action
  self
}

ifBlock(action :Fun(:X_TL2BlockValue):T) :Self
  (* *)
{ _ifBlock := action
  self
}

ifArray(action :Fun(:X_TL2ArrayValue):T) :Self
  (* *)
{ _ifArray := action
  self
}

otherwise(action :Fun(:X_TL2Value):T) :Self
  (* *)
{ _otherwise := action
  self
}

private

_ifLiteral :Fun(:X_TL2LiteralValue):T

_ifSend :Fun(:X_TL2SendValue):T

_ifSuperSend :Fun(:X_TL2SuperSendValue):T

_ifAssign :Fun(:X_TL2AssignValue):T

_ifIde :Fun(:X_TL2IdeValue):T

_ifTakeFrom :Fun(:X_TL2TakeFromValue):T

_ifFun :Fun(:X_TL2CompiledFun):T

_ifLet :Fun(:X_TL2LetValue):T

_ifBlock :Fun(:X_TL2BlockValue):T

_ifArray :Fun(:X_TL2ArrayValue):T

_otherwise :Fun(:X_TL2Value):T

}
