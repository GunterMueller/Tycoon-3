class X_TL2ApplyMixin
super X_TL2TypeCheckMixin
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 Mixin for argument substitution resp. subsignature test *)
meta AbstractClass
{
private

applyArgs(T <: Void,
	    pos :SourcePos,	       
            domain :List(X_TL2Ide),      
	    args :List(X_TL2Argument),   
	    subst :X_TL2Subst,	       
	    argsSubst :X_TL2Subst,       
	    range :X_TL2Type,            
	    check :Bool,	       
	    genMsg :Bool,	       
	    synthIdeArgs :Bool,	       
	    cont :Fun(:X_TL2Type, :X_TL2Subst):T 
	   ) :T
  (* Put actual arguments in for formal parameters by computing
   the appropriate substitution for 'range'.
   Will introduce UniVars when needed.

   If 'check'=true, check if these are legal arguments
   call cont with self.range and expanded subst

   useful for 'Sub Oper', 'X_TL2ApplyType::expose', 'X_TL2SendValue.check'

   ## caveat emptor:

      this is the case where you really need SubstTypes. The idea was to say:

      OperSubst[Oper].applyTo(ArgsSubst[Args])
    = Replace(Oper.domain by: ArgsSubst[Args])[OperSubst[Oper.range]]

			  ???
			   =

      ArgsSubst[Replace(Oper.domain by: Args)[OperSubst[Oper.range]]]
    = (OperSubst o Replace(Oper.domain by: Args) o ArgsSubst)[Oper.range]

    which fails because ArgsSubst may substitute formal type parameters
    of an enclosing type oper (ask M.Ernst for an example).

    Therefore we must use a X_TL2SubstType to constrain ArgsSubst to Args:

	      (OperSubst o Replace(Oper.domain by: X_TL2SubstType(Args, ArgsSubst)))[Oper.range]


 point of application 
 formal parameters 
 actual parameters 
 applying to domain and range 
 applying to args 
 formal result type 
 check the actual vs the formal parameters ? 
 generate error messages 
 types in <args> are synthesized IdeTypes 
 continuation *)
{
    ; make arguments assignable 
    domain ::= domain
    args   ::= args

    valuesToBeChecked ::= GapArray(:Pair(X_TL2ValueIde, X_TL2Value)).new(4)
    typesToBeChecked ::= GapArray(:Pair(X_TL2TypeIde, X_TL2Type)).new(4)
  
    errorWrapper ::= if( genMsg then: {
      ; either we are to generate error msgs 
      fun(pos :SourcePos, msg :String, t :Fun():Void) {
        setError(pos, msg, t)
      }
    } else: {
      fun(:SourcePos, :String, t :Fun():Void) {
        t[]
      }
    })


    ; substitutions of formal by actual parameters in the result 
    formalsSubst :X_TL2Subst := X_TL2EmptySubst.instance

    while({!domain.isEmpty} do: {
      formal ::= domain.head
      
      ; Omitted type argument ? 
      if( formal.isTypeIde && ( args.isEmpty ||  !args.head.isType ) then: {
        uniVar ::= X_TL2UnifyType.new
	args := List.cons(uniVar, args)
      })
      
      if( args.isEmpty then: {
        errorWrapper[pos, "missing argument: "+formal.name.printString, {
	  raiseError
	}]
      })

      actual ::= args.head

      ;
;        now actual and formal are both popped off the argument lists,
;	checking is delayed and sorted to check value arguments first.
;	This is a heuristic to instantiate the univars more intelligently.
;      

      actual.argumentCase(
        fun(actual :X_TL2Value) {
	  assert({ formal.isValueIde })  ; if it would have been a type, a univar would have been introduced above 

	  if( check then: {
	    if( formal.asValueIde.component != actual.isComponent then: {
	      msg :String
	      if( formal.asValueIde.component then: {
		msg := "non-component argument for component parameter"
	      } else: {
		msg := "component argument for non-component parameter"
	      })
	      errorWrapper[pos, msg+": "+formal.name.printString, {
		raiseError
	      }]
	    })
	    ; typically value arguments are more accurately typed, so we use them first to instantiate the univars 
	    valuesToBeChecked.add(Pair.new(formal.asValueIde, actual))
	  })
        },
	fun(actual :X_TL2Type) {
	  if( formal.isValueIde
	  then: { errorWrapper[pos, "type argument where value argument expected: "+formal.name.printString, {
	        raiseError
	      }] })

	  ; see discussion above, why you need a X_TL2SubstType here 
	  formalsSubst := X_TL2ConsSubst.new(formal, X_TL2SubstType.new(actual, argsSubst), formalsSubst)

	  ; having type args checked at the end eliminates the danger of subtyping two uninitialized univars 
	  if( check then: { typesToBeChecked.add(Pair.new(formal.asTypeIde, actual)) })
        }
      )

      domain := domain.tail
      args   := args.tail
    })

    if( !args.isEmpty then: {
      errorWrapper[pos, "Superfluous argument "+args.head.printString, {
        raiseError
      }]
    })

    ; all arguments are ready in the formalsSubst now 

    resultSubst ::=
      if( subst        == X_TL2EmptySubst.instance then: { formalsSubst } else: {
      if( formalsSubst == X_TL2EmptySubst.instance then: { subst } else: {
      X_TL2CompositeSubst.new(subst, formalsSubst) })})

    if( check then: {
      valuesToBeChecked.do(fun(p :Pair(X_TL2ValueIde, X_TL2Value)) {
        formal ::= p.first
	actual ::= p.second

	actual.check(fun(actualType :X_TL2Type, actualSubst :X_TL2Subst) {
	  errorWrapper[actual.pos, "Wrong-typed actual argument for "+formal.name.printString, {
	    actualType.checkSubType(formal.type, X_TL2CompositeSubst.new(actualSubst, argsSubst), resultSubst)
	  }]
	})
      })

      unwrap ::=
        X_TL2FunTypeVisitor(:X_TL2Type).new.
	  ifIdeType(fun(t :X_TL2IdeType) { t.ide.type }).
	  ifUnifyType(fun(u :X_TL2UnifyType) { u })

      typesToBeChecked.do(fun(p :Pair(X_TL2TypeIde, X_TL2Type)) {
        formal ::= p.first
	actual ::= p.second
	
	actual ::=
	  if( synthIdeArgs then: { actual.accept(unwrap) } else: { actual })

	errorWrapper[actual.pos, "Wrong-typed actual argument for "+formal.name.printString, {
	  actual.checkSubType(formal.type, argsSubst, resultSubst)
	}]

	; T = X 
	if( !formal.isSubTypeIde then: {
	  errorWrapper[actual.pos, "Wrong-typed actual argument for "+formal.name.printString, {
	    formal.type.checkSubType(actual, resultSubst, argsSubst)
	  }]
	})
      })
    })

    cont[range, resultSubst]
  }

}
