class X_TL2Terminals
super X_TL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 File: X_TL2Terminals.tc
 Author: Axel Wienberg
   Date: ??-Jun-1996
Purport: a singleton storing all terminal symbols, decoupling the parser from
	 the scanner.
	 The symbols are entered and read by X_TL2Gram and read by 
	 X_ReentrantTL2Scanner.
*)
meta SimpleConcreteClass(X_TL2Terminals)
{
ident :ValueTerminal(Positioned(String))

string :ValueTerminal(Positioned(String))

int :ValueTerminal(Positioned(Int))

char :ValueTerminal(Positioned(Char))

real :ValueTerminal(Positioned(Real))

symbols :Dictionary(String, ValueTerminal(SourcePos))

keywords :Dictionary(String, ValueTerminal(SourcePos))

keyword(name :String) :ValueTerminal(SourcePos)
  (* return the Terminal representing keyword <name>.
   <name> must match idRegExp.
   Multiple calls with the same <name> argument return the same 
   SimpleTerminal object.
 *)
{
  keywords.lookup(name,
    fun(s :ValueTerminal(SourcePos)) {
      s
    },
    { s ::= ValueTerminal.new(name)
      keywords[name] := s
      s
    }
  )
}

symbol(name :String) :ValueTerminal(SourcePos)
  (* return the Terminal representing the simple Symbol <name>.
   <name> may not match any other regexp (esp. idRegExp!)
   Multiple calls with the same <name> return the same SimpleTerminal object.
 *)
{
  symbols.lookup(name,
    fun(term :ValueTerminal(SourcePos)) {
      term
    },
    { term ::= ValueTerminal.new(name)
      symbols[name] := term
      term
    }
  )
}

private

_init :Void
  (* *)
{ super._init
  ident := ValueTerminal.new("ident")
  string := ValueTerminal.new("string")
  char := ValueTerminal.new("char")
  int := ValueTerminal.new("int")
  real := ValueTerminal.new("real")
  symbols := Dictionary.new
  keywords := Dictionary.new
  self
}

}
