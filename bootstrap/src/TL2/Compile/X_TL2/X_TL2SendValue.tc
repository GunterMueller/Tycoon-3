class X_TL2SendValue
super X_TL2ApplyMixin, X_TL2Value
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2SendValueClass
{
receiver :X_TL2Value

  (* modified by scoper *)

selector :Symbol

args :List(X_TL2Argument)

keywords :Array(Symbol)
  (* for the last arguments *)

generator :X_TL2CodeGenerator
  (* set during "optimization", zapped during code generation 
 a0 a1 a2 a3
         k0 k1 *)

accept(T <: Void, v :X_TL2ValueVisitor(T)) :T
  (* *)
{ v.visitSend(self) }

isComponent :Bool
{
  selector.size > 0 && selector[selector.size-1] = '@'
}

isSend :Bool
  (* *)
{ true }

asSend :X_TL2SendValue
  (* *)
{ self }

isLiteral :Bool
{ generator.isNotNil && generator.isLiteral }

getLiteralValue :Object
require isLiteral
{ generator.getLiteralValue }

plainArgs :Reader(X_TL2Argument)
  (* plain, i.e. non-keyword arguments *)
{
  args.subSequenceReader(0,args.size - keywords.size)
}

keywordArgs :Reader(Pair(Symbol, X_TL2Value))
  (* *)
{
  args.nthTail(args.size - keywords.size)
      .keysAndElementsMap(fun(i:Int, arg :X_TL2Argument) {
         sym ::= keywords[i]
	 arg.argumentCase(fun(arg :X_TL2Value) {
	   Pair.new(sym, arg)
	 }, fun(arg:X_TL2Type) {
	   assert({ arg.isValue }) ; false 
	 })
       })
}

hasPlain :Bool
  (* *)
{ args.size - keywords.size > 0
}

hasKeywords :Bool
  (* *)
{ !keywords.isEmpty }

prettyPrint(out :Printer) :Void
  (* *)
{
  printReceiver(out)
  selector.printOn(out)
  if( !args.isEmpty then: {
    ; all arguments up to the first non-leaf arg are
;       printed on the same line.  
    out.write('(')
    out.withRelIndent(2, {
      complex ::= false
      plainArgs.doBetween(fun(arg :X_TL2Argument) {
        if( arg.isType then: { out.write(':') })
	arg.prettyPrint(out)
	complex := complex ||  !arg.isLeaf 
      }, {
        out.writeAll(if( complex then: {",\n"} else: {", "}))
      })
      if( hasKeywords then: {
        if( hasPlain then: { out.nl })
	keywordArgs.doBetween(fun(p :Pair(Symbol, X_TL2Value)) {
	  out << p.first << ": "
	  p.second.prettyPrint(out)
	}, {
	  out.nl
	})
      })
      out.write(')')
    })
  })
}

printReceiver(out :Printer) :Void
  (* *)
{
  if( receiver.isLeaf | receiver.isSend  then: {
    receiver.prettyPrint(out)
  } else: {
    ; for cases like "(x := bla).isNil" 
    out.write('(')
    receiver.prettyPrint(out)
    out.write(')')
  })
  out.write('.')
}

children: Reader(X_TL2ProgramObject)
  (* *)
{
  List(:X_TL2ProgramObject).cons(receiver, args).reader
}

scope(env :X_TL2Scoper) :X_TL2SendValue
  (* *)
{
  receiver := receiver.scope(env)
  if( receiver.isComponent then: {
    env.errorLog.error(pos, "receiver in message send must not be a component")
  })
  args := List.fromReader(
    args.map(fun(a :X_TL2Argument) { a.scope(env) }))
  self
}

genCode(backEnd :X_BEMethodManager) :Void
  (* *)
{ generator.genCode(backEnd)
  generator := nil
}

genCodeIgnore(backEnd :X_BEMethodManager) :Void
  (* *)
{ generator.genCodeIgnore(backEnd)
  generator := nil
}

genCodeReturn(backEnd :X_BEMethodManager) :Void
  (* *)
{ generator.genCodeReturn(backEnd)
  generator := nil
}

genCodeBranch( backEnd :X_BEMethodManager,dest :X_BEMMLabel, branchIf :Bool) :Void
  (* *)
{ generator.genCodeBranch(backEnd, dest, branchIf)
  generator := nil
}

isSelfSend :Bool
  (* *)
{
  receiver.isIde &&  receiver.asIde.ide.name = "self" 
}

private

doCheck(T <: Void, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* *)
{
    receiverType :X_TL2Type := nil
    receiverSubst :X_TL2Subst := nil
    
    receiver.check(fun(rt :X_TL2Type, rs :X_TL2Subst) { receiverType := rt receiverSubst := rs })

    setError(pos, "Method not found: \""+selector+"\"", {
      receiverType.lookup(selector, receiverSubst, true,
	fun(m :X_TL2Method, subst :X_TL2Subst) {
	  if( m.isPrivate then: {
	    if( isSelfSend ||  isMetaClassSend(receiverType)  then: {} else: {
	      setError(pos, "Private method access: \""+selector+"\"", {
		raiseError
	      })
	    })
	  })
	  methodDomain ::= m.methodType.positionalDomain
	  if( hasKeywords then: {
	    ides :List(X_TL2Ide) := EmptyList.new
	    keywords.reverseDo(fun(k:Symbol) {
	      kwIde ::= m.keywordDomain.detect(fun(kwIde:X_TL2KeywordIde){ kwIde.keyword == k })
	      ide ::=
		if( kwIde.isNotNil then: {
		  kwIde.ide
		} else: {
		  arg ::= args[args.size - keywords.size + keywords.locate(k)]
		  setError2(arg.pos, m.pos, "unexpected keyword: "+k, { raiseError })
		  argIsComponent ::=
		    arg.argumentCase(fun(v:X_TL2Value){v.isComponent}, fun(:X_TL2Type){false})
		  X_TL2ValueIde.new(arg.pos,nil,argIsComponent,X_TL2VoidType.instance)
		})
	      ides := List.cons(ide, ides)
            })
	    methodDomain := List.append(methodDomain, ides)
          })
	  applyArgs(pos, methodDomain, args, subst, subst, m.methodType.range, true, true, false, cont)
	}
      )
    })
  }

isMetaClassSend(receiverType :X_TL2Type) :Bool
  (* Hopefully, the Instance ide of ConcreteClass is preserved over the 'let instance = _new'
     until this private send *)
{
    receiverIde :X_TL2TypeIde := nil
    
    typeChecker.currentClass.isNotNil &&  typeChecker.currentClass."class" == MetaClass  && (
      receiverType.visitor.
        ifSubstType(fun(receiverType :X_TL2SubstType) {
	  receiverType.type.visitor.
	    ifIdeType(fun(receiverType :X_TL2IdeType) {
	      receiverIde := receiverType.ide
	    }).
	    otherwise(fun(:X_TL2Type) { nil }).
	  visitType(receiverType.type)
	}).
	ifIdeType(fun(receiverType :X_TL2IdeType) {
	  receiverIde := receiverType.ide
	}).
	otherwise(fun(:X_TL2Type) { nil }).
      visitType(receiverType)

      ; Either receiverIde is nil or it contains the X_TL2TypeIde of the type of the receiver 

      receiverIde == ConcreteClass.domain[0] ||
      receiverIde == CStructClass.domain[0] ||
      receiverIde == WeakRefClass.domain[1] ||
      receiverIde == ThreadClass.domain[1]
    )
  }

}
