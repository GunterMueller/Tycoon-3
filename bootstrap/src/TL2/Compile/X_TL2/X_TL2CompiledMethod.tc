class X_TL2CompiledMethod
super X_TL2Method
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2CompiledMethodClass
{
keywordDefaults :Array(Object)
  (* constant default values for keywords. size equals keywords.size *)

body :X_TL2Value

debugMode :Int
  (* debug mode of the generated code.  a DEBUG_... constant. ### not implemented *)

compiledIn :X_TL2ClassPublic
  (* slot used by the machine (see tvm.doc) *)

byteCode :ByteArray
  (* slot used by the machine (see tvm.doc) *)

literals :Array(Object)
  (* slot used by the machine (see tvm.doc) *)

selectorID :Int
  (* slot used by the machine (see tvm.doc) *)

stackPeak :Int
  (* slot used by the machine (see tvm.doc) *)

exceptionTable :ShortArray
  (* may be nil. six short integers: fromIP..toIP -> handlerIP, sp, nativeCode (two shorts) *)

acceptMethodVisitor(T <: Void, visitor :X_TL2MethodVisitor(T)) :T
  (* *)
{ visitor.visitCompiled(self) }

prettyPrint(out :Printer) :Void
  (* *)
{
  super.prettyPrint(out)
  if( body.isNil
  then: { tycoon.stdout.writeString("\n  (* finalized *)") }
  else: { if( precondition.isNotNil
      then: { out.withRelIndent(2, {
	    out << "\nrequire "
	    precondition.prettyPrint(out)
	  }) })
      if( postcondition.isNotNil
      then: { out.withRelIndent(2, {
	    out << "\nensure "
	    postcondition.prettyPrint(out)
	  }) })

      out.writeAll("\n{")
      out.withRelIndent(2, {
	out.nl
	body.prettyPrint(out)
      })
      out.writeAll("\n}") })
}

scopeMethod(env :X_TL2Scoper) :Void
  (* *)
{
  saved ::= env.warnUnused
  env.warnUnused := warnUnused
  env.withScopedSignatures(positionalDomain, {
  env.withScopedKWSignatures(keywordDomain, {
    if( range.isNotNil then: { range := range.scope(env) })  ; for Funs 
    if( precondition.isNotNil then: {
      precondition := precondition.scope(env)
      if( precondition.isComponent then: {
        env.errorLog.error(pos, "precondition result must not be a component")
      })
    })
    body := body.scope(env)
    if( body.isComponent != methodType.isComponent then: {
      if( methodType.isComponent then: {
        env.errorLog.error(pos, "reference result for component returning method")
      } else: {
        env.errorLog.error(pos, "component result for reference returning method")
      })
    })
    if( postcondition.isNotNil then: {
      postcondition := postcondition.scope(env) ; ### scope old, result 
      if( postcondition.isComponent then: {
        env.errorLog.error(pos, "postcondition result must not be a component")
      })
    })
  })
  })
  env.warnUnused := saved
}

warnUnused :Bool
  (* *)
{ true }

compileMethod(selfSig :X_TL2ValueIde, compiler :X_TL2Compiler) :Void
  (* *)
{
  super.compileMethod(selfSig, compiler)  ;; arity, sorts
  ; optimize 
  ; we could allocate a new optimizer, but that would be SLOW 
  optimizer ::= compiler.optimizer
  optimizer.optimize(body, compiler.errorLog)
  keywordDomain.do(fun(kwi: X_TL2KeywordIde) {
    optimizer.optimize(kwi.defaultValue, compiler.errorLog)
  })
  ; ...and compile 
  compile(Dictionary.new, selfSig, compiler)
  ; ### to do: optional debug mode, compiling pre & postcondition 
}

DEBUG_none :Int
  (* no debugging *)
{ 0 }

DEBUG_precondition :Int
  (* only check precondition *)
{ 1 }

DEBUG_preAndPost :Int
  (* check pre- and postcondition *)
{ 3 }

DEBUG_assert :Int
  (* check assertions *)
{ 4 }

DEBUG_all :Int
  (* check assertions, pre- and postcondition *)
{ 7 }

compile( env :Dictionary(X_TL2ValueIde,X_BEVariable), selfSig :X_TL2ValueIde, compiler :X_TL2Compiler) :Void
  (* *)
{
  backEnd ::= X_BEMethodManager.new(self, env, compiler)

  valueParams ::= computeValueParams(selfSig)

  if( valueParams.some(fun(i:X_TL2ValueIde){ i.component && !i.celled }) then: {
    ;; need to generate cleanup code for component arguments
    backEnd.withArgumentBindings(valueParams, {
      genArgumentCells(backEnd, valueParams)
      scopeStart ::= backEnd.newLabel
      backEnd.defineLabel(scopeStart)
      genKeywordDefaults(backEnd)
      body.genCode(backEnd)
      scopeEnd ::= backEnd.newLabel
      backEnd.defineLabel(scopeEnd)
      componentArgsCleanup(backEnd,valueParams)
      backEnd.return
      handler ::= backEnd.newLabel
      backEnd.sp := scopeStart.sp
      backEnd.incSp ; exception object is magically pushed
      backEnd.defineLabel(handler)
      backEnd.exceptionHandler(scopeStart,scopeEnd,handler)
      componentArgsCleanup(backEnd, valueParams)
      backEnd.send(X_TL2Selector.new(#_raise, #(), #()))
      ;; the generated send never returns
      backEnd.sp := nil
    })
  } else: {
    backEnd.withArgumentBindings(valueParams, {
      genArgumentCells(backEnd, valueParams)
      genKeywordDefaults(backEnd)
      body.genCodeReturn(backEnd)
    })
  })

  backEnd.finished
}


disassembleOn(out :Printer, reader :X_BEByteCodeReader) :Void
  (* *)
{
  methodType.prettyPrint(out)
  out.withRelIndent(1, {
    out << '\n'
        << "Selector id = " << selectorID
	<< " ("<<compiledIn.classManager.root.selectors[selectorID] << ")\n"
    out << "Stack peak = " << stackPeak << '\n'
    freeVarHook(out)
    out.writeString( "Keyword Defaults:" )
    if( keywordDefaults.isNotNil then: {
      out.withRelIndent(1, {
	keywordDefaults.keysAndElementsDo(fun(i :Int, o :Object) {
	  out.nl
	  keywordDomain[i].keyword.printOn(out) out.writeString(": ")
	  o.printOn(out)
	})
      })
    })
    out.writeString( "\nLiterals:" )
    out.withRelIndent(1, {
      literals.keysAndElementsDo(fun(i :Int, o :Object) {
        out.nl
	i.printOn(out) out.writeString(": ")
	if( o."class" == X_TL2CompiledFun then: {
	  cf ::= _typeCast(o, :X_TL2CompiledFun)
	  out.withRelIndent(4, {
	    cf.disassembleOn(out, reader)
	  })
	} else: {
	  o.printOn(out)
	})
      })
    })
    if( exceptionTable.isNotNil then: {
      out.writeln("\nException Handlers:")
      for(0 to: exceptionTable.size - 6 step: 6 do: fun(p :Int) {
        out.nl
        out << exceptionTable[p] << '-' << exceptionTable[p+1] << ": "
	    << exceptionTable[p+2] << ", sp=" << exceptionTable[p+3]
      })
    })
    out.writeString("\nCode:")
    out.withRelIndent(1, {
      disass ::= makeDisassembler
      reader.do(byteCode, disass)
      disass.finished.do(fun(s:String) {
	out.nl
        out.writeString(s)
      })
    })
  })
  out.nl out.nl
}

makeDisassembler :X_BEDisassembler
  (* *)
{
  dis ::= X_BEDisassembler.new
  params ::= computeValueParams(X_TL2ValueIde.new(nil,"self",false,nil))
  paramNames ::= MutableArray.fromContainerWithMap(params,
    fun(ide:X_TL2ValueIde){ide.name})
  paramNames.reverse
  dis.argumentNames := paramNames
  dis
}

freeVarHook( :Printer) :Void
  (* *)
{ }

finalize :Void
  (* *)
{ body := nil
  submethods.do(fun(cm :X_TL2CompiledMethod) {
    cm.finalize
  })
}

patchClass(compiledIn :X_TL2ClassPublic) :Void
  (* since the class object doesn''t exist already during compilation,
   we need an extra pass to fill the compiledIn-fields afterwards *)
{
  self."compiledIn:="(compiledIn)
  submethods.do(fun(cm :X_TL2CompiledMethod){
    cm.patchClass(compiledIn)
  })
}

private

computeValueParams(selfSig :X_TL2ValueIde) :List(X_TL2ValueIde)
  (* ides for all value parameters in the order they appear on the stack *)
{
  valueParams ::= List(:X_TL2ValueIde).new
  keywordDomain.reverseDo(fun(kwi:X_TL2KeywordIde) {
    valueParams := List.cons(kwi.ide,valueParams)
  })
  positionalDomain.reverseDo(fun(i:X_TL2Ide) {
    if(i.isValueIde then: {
      valueParams := List.cons(i.asValueIde, valueParams)
    })
  })
  if( selfSig.isNotNil then: {
    valueParams := List.cons(selfSig, valueParams)
  })
  valueParams
}

genArgumentCells(bek: X_BEMethodManager, valueParams :List(X_TL2ValueIde)) :Void
{
  valueParams.do(fun(ide:X_TL2ValueIde) {
    if(ide.celled then: {
      bek.genCell(ide)
    })
  })
}

genKeywordDefaults(bek: X_BEMethodManager) :Void
  (* *)
{
  if(!keywordDomain.isEmpty then: {
    placeHolder ::= Cell.new(nil)
    keywordDefaults := 
      Array.fromContainerWithMap(keywordDomain, fun(kwIde: X_TL2KeywordIde) {
	if( kwIde.defaultValue.isLiteral then: {
	  defVal :Object := kwIde.defaultValue.getLiteralValue
	} else: {
	  ;; if(<placeHolder> == <ide> then: { <ide> := <defaultExpr> })
	  ide ::= kwIde.ide
	  if(!ide.component then: { bek.loadLiteral(placeHolder) })
	  if( ide.component then: {
	    bek.reference(ide)
	  } else: {
	    bek.load(ide)
	  })
	  if(!ide.component then: {
	    bek.send(X_TL2Selector.new(#"==",#(false),#()))
	  } else: {
	    bek.send(X_TL2Selector.new(#"isNil",#(),#()))
	  })
	  contL ::= bek.newLabel
	  bek.ifFalse(contL)
	  kwIde.defaultValue.genCode(bek)
	  if( ide.component then: {
	    bek.moveTo(ide)
	  } else: {
	    bek.store(ide)
	  })
	  bek.pop
	  bek.defineLabel(contL)
	  defVal :Object := if(!ide.component then: { placeHolder } else: { nil })
	})
      })
  })
}

componentArgsCleanup(backEnd :X_BEMethodManager, 
	             valueParams :List(X_TL2ValueIde)):Void
{
  valueParams.do(fun(i:X_TL2ValueIde) {
    if( i.component && !i.celled then: {
      backEnd.takeFrom(i)
      backEnd.componentPop
    })
  })
}

submethods :Reader(X_TL2CompiledMethod)
  (* *)
{
  literals.sfw(
    ; select 
fun(o: Object) {
      _typeCast(o, :X_TL2CompiledMethod)
    },
    ; where 
fun(o :Object) {
      o."class" == X_TL2CompiledMethod
      || ( o."class" == X_TL2CompiledFun
         ||  o."class" == X_TL2BuiltinMethod )
     })
}

}
