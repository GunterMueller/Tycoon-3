class X_NewTL2Terminals
super X_NewTL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 File: X_NewTL2Terminals.tc
 Author: Axel Wienberg
   Date: ??-Jun-1996
Purport: a singleton storing all terminal symbols, decoupling the parser from
	 the scanner.
	 The symbols are entered and read by X_NewTL2Gram and read by 
	 X_ReentrantNewTL2Scanner.

 1.1. literal constants 
 1.1.1 Numbers 
 1.1.1.1 *)
meta SimpleConcreteClass(X_NewTL2Terminals)
{
int :ValueTerminal(Positioned(Int))

  (* 1.1.1.2 *)

long :ValueTerminal(Positioned(Long))

  (* 1.1.1.3 *)

real :ValueTerminal(Positioned(Real))

  (* 1.1.2 *)

char :ValueTerminal(Positioned(Char))

  (* 1.1.3 *)

string :ValueTerminal(Positioned(String))

stringParen :ValueTerminal(Positioned(String))

  (* string when followed by an opening paren 
 1.1.4 *)

symbol :ValueTerminal(Positioned(Symbol))

  (* 1.2 identifiers *)

ident :ValueTerminal(Positioned(String))

identParen :ValueTerminal(Positioned(String))

  (* ident when followed by an opening paren 
 1.3 *)

reservedWords :KeyedContainer(String, ValueTerminal(SourcePos))

  (* 1.4 *)

docString :ValueTerminal(Positioned(String))

  (* 1.5 single line comments -- swallowed 
 1.6 *)

otherTokens :KeyedContainer(String, ValueTerminal(SourcePos))

private

createReservedWords :Dictionary(String, ValueTerminal(SourcePos))
  (* *)
{
  d ::= Dictionary.new
  addReserved ::=
    fun(name :String) {
      d[name] := ValueTerminal.new(name)
    }
; as per section 1.3 of hoxrfc 
  addReserved["builtin"]
  addReserved["class"]
  addReserved["deferred"]
  addReserved["ensure"]
  addReserved["extern"]
  addReserved["fun"]
  addReserved["Fun"]
  addReserved["import"]
  addReserved["interface"]
  addReserved["meta"]
  addReserved["old"]
  addReserved["package"]
  addReserved["private"]
  addReserved["require"]
  addReserved["self"]
  addReserved["Self"]
  addReserved["super"]
; internal use: 
  addReserved["Void"]
  addReserved["Nil"]
  addReserved["define"]
  addReserved["DO"]
  d
}

createOtherTokens :Dictionary(String, ValueTerminal(SourcePos))
  (* *)
{
  d ::= Dictionary.new
  addToken ::=
    fun(name :String) {
      d[name] := ValueTerminal.new(name)
    }

  addToken["{"]
  addToken["}"]
  addToken["["]
  addToken["]"]
  addToken["("]
  addToken[")"]
  addToken["<"]
  addToken["<="]
  addToken[">"]
  addToken[">="]
  addToken["="]
  addToken["=="]
  addToken["!="]
  addToken["!=="]
  addToken[":"]
  addToken[":="]
  addToken["+"]
  addToken["-"]
  addToken["*"]
  addToken["/"]
  addToken["%"]
  addToken["<<"]
  addToken[">>"]
  addToken["&"]
  addToken["&&"]
  addToken["^"]
  addToken["|"]
  addToken["||"]
  addToken["<:"]
  addToken["."]
  addToken[","]
  addToken["!"]
  addToken["~"]
  addToken["#("]
  addToken["@"]  ;; component extension
  d
}

_init :Void
  (* *)
{ super._init
  int := ValueTerminal.new("int")
  long := ValueTerminal.new("long")
  real := ValueTerminal.new("real")
  char := ValueTerminal.new("char")
  string := ValueTerminal.new("string")
  stringParen := ValueTerminal.new("stringParen")
  symbol := ValueTerminal.new("symbol")
  ident := ValueTerminal.new("ident")
  identParen := ValueTerminal.new("identParen")
  reservedWords := createReservedWords
  docString := ValueTerminal.new("docString")
  otherTokens := createOtherTokens
  self
}

}
