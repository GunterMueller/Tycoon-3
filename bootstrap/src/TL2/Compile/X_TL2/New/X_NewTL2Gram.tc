class X_NewTL2Gram
super X_NewTL2
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 File: X_NewTL2Gram.tc
 Author: Axel Wienberg
   Date: ??-Jun-1996
Purples: define a grammar and actions for building the X_NewTL2 abstract syntax 
	 tree.

 NewTL2MNO is a MutableNonterminal(Object) 
 forward decls / exports: *)
meta X_NewTL2GramClass
{
grammar :Grammar(X_TL2ParseUnit)

private

terminals :X_NewTL2Terminals

mnnew(T <: Object, name :String) :MutableNonterminal(T)
  (* *)
{
  MutableNonterminal.new(name)
}

s(symName :String) :ValueTerminal(SourcePos)
  (* *)
{
  terminals.otherTokens[symName]
}

k(name :String) :ValueTerminal(SourcePos)
  (* *)
{
  terminals.reservedWords[name]
}

_init :Void
  (* *)
{
  createPrecedences
  top ::= createRules
  grammar := Grammar.new(top)
  self
}

createPrecedences :Void
  (* *)
{
  s(".").precedence :=
  s("[").precedence :=
  s("]").precedence := Precedence.left(130)
  k("old").precedence :=
  s("!").precedence :=
  s("~").precedence := Precedence.right(120)
  s("*").precedence :=
  s("/").precedence :=
  s("%").precedence := Precedence.left(110)
  s("+").precedence :=
  s("-").precedence := Precedence.left(100)
  s("<<").precedence :=
  s(">>").precedence := Precedence.left(90)
  s("<").precedence :=
  s("<=").precedence :=
  s(">").precedence :=
  s(">=").precedence := Precedence.left(80)
  s("=").precedence :=
  s("==").precedence :=
  s("!=").precedence :=
  s("!==").precedence := Precedence.left(70)
  s("&").precedence := Precedence.left(60)
  s("^").precedence := Precedence.left(50)
  s("|").precedence := Precedence.left(40)
  s("&&").precedence := Precedence.left(30)
  s("||").precedence := Precedence.left(20)
  s(":=").precedence := Precedence.right(10)
}

opt(T <: Object, T1 <: Object,
    t :Terminal(Object), nt :Nonterminal(T),
    ifFound :Fun(:T):T1,
    ifAbsent :Fun():T1) :Nonterminal(T1)
  (* *)
{
  mno ::= mnnew("opt/"+t.name+"/"+nt.name)
  mno.addRule2( t, nt,
		fun(:Object, x:T) {
		  ifFound[x]
		})
  mno.addRule0(
		ifAbsent)
  mno
}

optS(T <: Object, T1 <: Object,
    key :String, nt :Nonterminal(T),
    ifFound :Fun(:T):T1,
    ifAbsent :Fun():T1) :Nonterminal(T1)
  (* *)
{
  opt(s(key), nt, ifFound, ifAbsent)
}

optK(T <: Object, T1 <: Object,
    key :String, nt :Nonterminal(T),
    ifFound :Fun(:T):T1,
    ifAbsent :Fun():T1) :Nonterminal(T1)
  (* *)
{
  opt(k(key), nt, ifFound, ifAbsent)
}

nonEmptyCommaList(E <: Object, nt :Nonterminal(E)) :Nonterminal(List(E))
  (* *)
{
  nonempty :MutableNonterminal(List(E)) :=
    mnnew(nt.name+"/,+")
  nonempty.addRule3( nt, s(","), nonempty,
		     fun(x:E, :Object, accu :List(E)) {
		       List.cons(x, accu)
		     })
  nonempty.addRule1( nt,
		     fun(x:E) {
		       List.with1(x)
		     })
  nonempty
}

commaList(E <: Object, nt :Nonterminal(E)) :Nonterminal(List(E))
  (* *)
{
  nonempty ::= nonEmptyCommaList(nt)
  result :MutableNonterminal(List(E)) :=
    mnnew(nt.name+"/,*")
  result.addRule1( nonempty,
		   fun(x:List(E)){x})
  result.addRule0( 
		   {EmptyList.new})
  result
}

nonEmptyList(E <: Object, nt :Nonterminal(E)) :Nonterminal(List(E))
  (* *)
{
  nonempty :MutableNonterminal(List(E)) :=
    mnnew(nt.name+"+")
  nonempty.addRule2( nt, nonempty,
		     fun(x:E, accu :List(E)) {
		       List.cons(x, accu)
		     })
  nonempty.addRule1( nt,
		     fun(x:E) {
		       List.with1(x)
		     })
  nonempty
}

list(E <: Object, nt :Nonterminal(E)) :Nonterminal(List(E))
  (* *)
{
  nonempty ::= nonEmptyList(nt)
  result :MutableNonterminal(List(E)) :=
    mnnew(nt.name+"*")
  result.addRule1( nonempty,
		   fun(x:List(E)){x})
  result.addRule0( 
		   {EmptyList.new})
  result
}

unop(value :MutableNonterminal(X_TL2Value), sel :String) :Void
  (* *)
{
  value.addRule2(s(sel), value,
    fun(pos :SourcePos, receiver :X_TL2Value) {
      X_TL2SendValue.new(pos, receiver, Symbol.new(sel), List.with0)
    })
}

binop(value :MutableNonterminal(X_TL2Value), sel :String) :Void
  (* *)
{
  value.addRule3(value, s(sel), value,
    fun(receiver :X_TL2Value, pos :SourcePos, arg :X_TL2Value) {
      X_TL2SendValue.new(pos, receiver, Symbol.new(sel),
	List.with1(arg))
    })
}

lazyBinop(value :MutableNonterminal(X_TL2Value), sel :String) :Void
  (* *)
{
  value.addRule3(value, s(sel), value,
    fun(receiver :X_TL2Value, pos :SourcePos, arg :X_TL2Value) {
      X_TL2SendValue.new(pos, receiver, Symbol.new(sel),
        List.with1(
	  X_TL2CompiledFun.new(arg.pos, #"[]", List.with0, nil,
			     arg)))
    })
}

createRules (
    SlotsAndMethods = Pair(List(X_TL2Slot), List(X_TL2Method)),  
    O               = Object
  ) :MutableNonterminal(X_TL2ParseUnit)
  (* ## simulated Type-Bindings *)
{
  int ::= terminals.int
  long ::= terminals.long
  real ::= terminals.real
  char ::= terminals.char
  string ::= terminals.string
  stringParen ::= terminals.stringParen
  symbol ::= terminals.symbol
  ident ::= terminals.ident
  identParen ::= terminals.identParen
  docString ::= terminals.docString

  ArrayWith0 ::= Array.with0

  type :MutableNonterminal(X_TL2Type) := mnnew("type")
  value :MutableNonterminal(X_TL2Value) := mnnew("value")
  signature :MutableNonterminal(X_TL2Ide) := mnnew("signature")
  typeSignature :MutableNonterminal(X_TL2TypeIde) := mnnew("typeSignature")
  valueSignature :MutableNonterminal(X_TL2ValueIde) := mnnew("valueSignature")
  sequence :MutableNonterminal(X_TL2BlockValue) := mnnew("sequence")

  values ::= commaList(value)

  positionalArgument ::= mnnew(:X_TL2Argument, "positionalArgument")
  positionalArgument.addRule1( value,
		     fun(v:X_TL2Value){
		       v
		     })
  positionalArgument.addRule2( s(":"), type,
		     fun(:O, t :X_TL2Type){
			t
		     })

  positionalArguments ::= nonEmptyCommaList(positionalArgument)
  optPositionalArguments ::= commaList(positionalArgument)

  keywordArgument ::= mnnew(:Pair(Symbol, X_TL2Value), "keywordArgument")
  keywordArgument.addRule3( ident, s(":"), value,
			    fun(s:Positioned(String), :O, v :X_TL2Value) {
			      Pair.new(Symbol.new(s.value), v)
			    })

  keywordArguments ::= nonEmptyList(keywordArgument)

  arguments ::= mnnew(:Pair(List(X_TL2Argument), Array(Symbol)), "arguments")
  arguments.addRule4( s("("), positionalArguments, keywordArguments, s(")"),
		      fun(:O, positional :List(X_TL2Argument),
			      byKeyword :List(Pair(Symbol, X_TL2Value)), :O) {
			keywords ::=
			  byKeyword.map(fun(p :Pair(Symbol, X_TL2Value)){ p.first }).as(Array)
			keyArgs ::=
			  byKeyword.map(fun(p :Pair(Symbol, X_TL2Value)){ p.second }).as(List)
			Pair.new(List.append(positional, keyArgs), keywords)
		      })
  arguments.addRule3( s("("), positionalArguments, s(")"),
		      fun(:O, positional :List(X_TL2Argument), :O) {
			Pair.new(positional, ArrayWith0)
		      })
  arguments.addRule3( s("("), keywordArguments, s(")"),
		      fun(:O, byKeyword :List(Pair(Symbol, X_TL2Value)), :O) {
			keywords ::=
			  byKeyword.map(fun(p :Pair(Symbol, X_TL2Value)){ p.first }).as(Array)
			keyArgs ::=
			  byKeyword.map(fun(p :Pair(Symbol, X_TL2Value)){ p.second }).as(List)
			Pair.new(keyArgs, keywords)
		      })
  arguments.addRule2( s("("), s(")"),
		      fun(:O, :O) {
			Pair.new(EmptyList.new, ArrayWith0)
		      })

  positionalParameters ::= nonEmptyCommaList(signature)

  keywordParameter ::= mnnew(:Triple(Symbol, X_TL2ValueIde, X_TL2Value), "keywordParameter")
  keywordParameter.addRule3( ident, s(":"), valueSignature,
			    fun(s:Positioned(String), :O, v :X_TL2ValueIde) {
			      Triple.new(Symbol.new(s.value), v, X_TL2LiteralValue.new(s.pos, nil))
			    })
  keywordParameter.addRule5( ident, s(":"), valueSignature, s(":="), value,
			    fun(s:Positioned(String), :O, v :X_TL2ValueIde, :O, defaultValue :X_TL2Value) {
			      Triple.new(Symbol.new(s.value), v, defaultValue)
			    })

  keywordParameters ::= nonEmptyList(keywordParameter)

  parameters ::= mnnew(:Pair(List(X_TL2Ide), Array(Symbol)), "parameters")
  parameters.addRule4( s("("), positionalParameters, keywordParameters, s(")"),
		       fun(:O, positional :List(X_TL2Ide),
			       byKeyword :List(Triple(Symbol, X_TL2ValueIde, X_TL2Value)), :O) {
			  keywords ::=
			    byKeyword.map(fun(p :Pair(Symbol, X_TL2ValueIde)){ p.first }).as(Array)
			  keySigs ::=
			    byKeyword.map(fun(p :Pair(Symbol, X_TL2ValueIde)){ p.second }).as(List)
			  ; ### no place to store default values 
			  Pair.new(List.append(positional, keySigs), keywords)
		       })
  parameters.addRule3( s("("), positionalParameters, s(")"),
		       fun(:O, positional :List(X_TL2Ide), :O) {
			  Pair.new(positional, ArrayWith0)
		       })
  parameters.addRule3( s("("), keywordParameters, s(")"),
		       fun(:O, byKeyword :List(Triple(Symbol, X_TL2ValueIde, X_TL2Value)), :O) {
			 keywords ::=
			   byKeyword.map(fun(p :Pair(Symbol, X_TL2ValueIde)){ p.first }).as(Array)
			 keySigs ::=
			   byKeyword.map(fun(p :Pair(Symbol, X_TL2ValueIde)){ p.second }).as(List)
			 ; ### no place to store default values 
			 Pair.new(keySigs, keywords)
		       })
  parameters.addRule2( s("("), s(")"),
		       fun(:O, :O) {
			 Pair.new(EmptyList.new, ArrayWith0)
		       })

  typeSignatures ::= commaList(typeSignature)
  valueSignatures ::= commaList(valueSignature)
  typeList ::= commaList(type)

; types 

  typeIdeNoParen :MutableNonterminal(X_TL2TypeIde) := mnnew("typeIde")
  idAction ::=
    fun(s :Positioned(String)) :X_TL2TypeIde {
      X_TL2TypeIde.newRef(s.pos, s.value)
    }
  typeIdeNoParen.addRule1( ident,
			   idAction)

  typeIdeParen :MutableNonterminal(X_TL2TypeIde) := mnnew("typeIdeParen")
  typeIdeParen.addRule1( identParen,
			 idAction)

  selfTypeIdent :MutableNonterminal(Positioned(String)) := mnnew("Self")
  selfTypeIdent.addRule1( k("Self"),
			  fun(p:SourcePos) {
			    Positioned.new(p, "Self")
			  })

  makeFunType ::=
    fun(p :SourcePos,
	args :List(X_TL2ValueIde),
	componentResult :Bool,
	t :X_TL2Type) :X_TL2Type {
      ; ### may internally become an Interface type 
      ; Fun(a0:A0,...,aN:AN):R =>
      ;    FunN(A0,...,AN,R)
      className ::=
        if( componentResult
         || args.some(fun(vi :X_TL2ValueIde){ vi.component }) then: {
	  String.concatAll( #(
          "Fun",
	  args.map(fun(vi :X_TL2ValueIde){
	   if( vi.component then: {'C'} else: {'R'}) }).as(String),
	  if( componentResult then: {"C"} else: {"R"}) ))
	} else: {
	  "Fun"+args.size.printString
	})
      X_TL2ApplyType.new(
	X_TL2IdeType.new(X_TL2TypeIde.newRef(p, className)),
	List.append(
	  args.map(fun(vi :X_TL2ValueIde){ vi.type }).as(List),
	  List.with1(t)))
    }

  ; created above 
  type.addRule6( k("Fun"), s("("), valueSignatures, s(")"), s(":"), type,   ; ### parameters instead of valueSigs! 
		 fun(p :SourcePos, :O, args :List(X_TL2ValueIde), :O, :O, t :X_TL2Type) {
		   makeFunType[p, args, false, t]
		 })
  type.addRule7( k("Fun"), s("("), valueSignatures, s(")"), s("@"), s(":"), type,   ; ### parameters instead of valueSigs! 
		 fun(p :SourcePos, :O, args :List(X_TL2ValueIde), :O, :O, :O, t :X_TL2Type) {
		   makeFunType[p, args, true, t]
		 })
  type.addRule4( typeIdeParen, s("("), typeList, s(")"),
		 fun(ti :X_TL2TypeIde, :O, args :List(X_TL2Type), :O) {
		   operT ::= X_TL2IdeType.new(ti)
		   X_TL2ApplyType.new(operT, args)
		 })
  type.addRule1( k("Void"),   ; ### Void(...) 
		 fun(:O) {
		   X_TL2VoidType.instance
		 })
  type.addRule1( k("Nil"),    ; ### Nil(...) 
		 fun(:O) {
		   X_TL2NilType.instance
		 })
  type.addRule1( selfTypeIdent,
		 fun(ps :Positioned(String)) {
		   X_TL2IdeType.new(X_TL2TypeIde.newRef(ps.pos, ps.value))
		 })
  type.addRule1( typeIdeNoParen,
		 fun(i :X_TL2TypeIde) {
		   X_TL2IdeType.new(i)
		 })

  ; no Void, Nil, Fun or Self in super type declaration;
;     no nested ApplyTypes 
  cplType :MutableNonterminal(X_TL2CPLType) := mnnew("cplType")
  cplTypeList ::= commaList(cplType)
  cplType.addRule4( typeIdeParen, s("("), typeList, s(")"),
		 fun(i :X_TL2TypeIde, :O, args :List(X_TL2Type), :O) {
		   X_TL2CPLType.new(i, args)
		 })
  cplType.addRule1( typeIdeNoParen,
		    fun(i :X_TL2TypeIde) {
		      X_TL2CPLType.new(i, List.with0)
		    })
  cplType.addRule1( k("Nil"),    ; ### Nil(...) 
		    fun(p:SourcePos){
		      X_TL2CPLType.new(X_TL2TypeIde.newRef(p, "Nil"), emptyList)
		    })

  ; classes 

; classHeader 
  classNameDom ::= mnnew(:Triple(SourcePos, String, List(X_TL2TypeIde)), "classNameDom")
  classNameDom.addRule1( ident,
			 fun(s :Positioned(String)){
			   Triple.new(s.pos, s.value, emptyList)
			 })
  classNameDom.addRule4( identParen, s("("), typeSignatures, s(")"),
			 fun(s :Positioned(String), :O, l :List(X_TL2TypeIde), :O){
			   Triple.new(s.pos, s.value, l)
			 })
  classNameDom.addRule1( k("Nil"),   ; ### Nil(...) ? 
			 fun(p:SourcePos){
			   Triple.new(p, "Nil", emptyList)
			 })

  optMeta ::= optK( "meta", cplType, 
		      fun(t :X_TL2CPLType){ t },
		      { nil })

  optSelfSig :MutableNonterminal(X_TL2TypeIde) := mnnew("optSelfSig")
  optSelfSig.addRule3( selfTypeIdent, s("="), type,
		       fun(slf:Positioned(String), :SourcePos, t :X_TL2Type) {
			 X_TL2TypeIde.new(slf.pos, slf.value, t)
		       })
  optSelfSig.addRule3( selfTypeIdent, s("<:"), type,
		       fun(slf:Positioned(String), :SourcePos, t :X_TL2Type) {
			 X_TL2SubTypeIde.new(slf.pos, slf.value, t)
		       })
  optSelfSig.addRule0(
		       { nil })

  optDoc ::= mnnew(:String, "optDoc")
  optDoc.addRule1( docString,
		   fun(s:Positioned(String)){ s.value })
  optDoc.addRule0( { "" })

  optSuper ::= optK("super", cplTypeList,
		      fun(l :List(X_TL2CPLType)){ l },
		      { emptyList })

  classHeader :MutableNonterminal(X_TL2ClassBuilder) := mnnew("classHeader")
  classHeader.addRule5( classNameDom, optSuper, optDoc, optSelfSig, optMeta,
	fun( nameDom :Triple(SourcePos, String, List(X_TL2TypeIde)),
	     supers :List(X_TL2CPLType),
	     doc :String,
	     selfSig :X_TL2TypeIde,
	     metaclass_ :X_TL2CPLType) {
	  X_TL2ClassBuilder.new(
	      nameDom.first,
	      nameDom.second,
	      nameDom.third,
	      supers,
	      doc,
	      selfSig,
	      metaclass_)
	})

; methods 
  selector :MutableNonterminal(Positioned(Symbol)) := mnnew("selector")
  ; selector is used in method signatures and in qualified assignments 
  selAction ::=
    fun(sel :Positioned(String)) {
      Positioned.new(sel.pos, Symbol.new(sel.value))
    }
  selector.addRule1( ident,
		     selAction)
  selector.addRule1( identParen,
		     selAction)
  selector.addRule1( string,
		     selAction)
  selector.addRule1( stringParen,
		     selAction)

  methodSignature ::= mnnew(:X_TL2MethodType, "methodSignature")
  methodSignature.addRule4( selector, parameters, s(":"), type,
			 fun(sel :Positioned(Symbol), domain :Pair(List(X_TL2Ide), Array(Symbol)), :O,
						      range :X_TL2Type) {
                           X_TL2MethodType.newK(sel.pos, sel.value, domain.first, domain.second, range)
			 })
  methodSignature.addRule5( selector, parameters, s("@"), s(":"), type,
			 fun(sel :Positioned(Symbol), domain :Pair(List(X_TL2Ide), Array(Symbol)), :O, :O,
						      range :X_TL2Type) {
                           X_TL2MethodType.newK(sel.pos, Symbol.new(sel.value+"@"), domain.first, domain.second, range)
			 })

  optPre ::= optK( "require", value,
		     fun(v:X_TL2Value){ v },
		     { nil })

  optPost ::= optK( "ensure", value,
		     fun(v:X_TL2Value){ v },
		     { nil })

  body ::= mnnew(:X_TL2BlockValue, "body")
  body.addRule3( s("{"), sequence, s("}"),
		 fun(p:SourcePos, s :X_TL2BlockValue, :O) {
		   s.pos := p
		   s
		 })

  optBody ::= mnnew("optBody")
  optBody.addRule1( body,
		    fun(v:X_TL2Value){ v })
  optBody.addRule0(
		    { nil })

  methodBody ::= mnnew("methodBody")
  methodBody.addRule1( k("deferred"),
		       fun(:O) {
		         X_TL2DeferredMethod.new
		       })
  methodBody.addRule2( k("extern"), string,
		       fun(:O, externalId :Positioned(String)) {
		         X_TL2ExternalMethod.new("C",externalId.value)
		       })
  methodBody.addRule2( k("builtin"), optBody,
		       fun(p :SourcePos, body :X_TL2Value) {
		         X_TL2BuiltinMethod.new(
			   if( body.isNotNil
			    then: { body }
			    else: { X_TL2BlockValue.new(p,emptyList) }))
		       })
  methodBody.addRule1( body,
		       fun(body :X_TL2Value) {
		         X_TL2CompiledMethod.new(body)
		       })

  methodDefinition ::= mnnew("methodDefinition")
  methodDefAction ::=
    fun( signature :X_TL2MethodType, doc :String,
	 preCond :X_TL2Value, postCond :X_TL2Value, m :X_TL2Method) {
      ; <body> returns a specialized method object.
;	 fill in the standard fields from <signature> 
      m.pos := signature.pos
      m.selector := signature.selector
      m.methodType := signature
      m.documentation := doc
      m.precondition := preCond
      m.postcondition := postCond
      m
    }
  methodDefinition.addRule5( methodSignature, optDoc, optPre, optPost, methodBody,
			     methodDefAction)

  methodDefinition.addRule7( selector, s(":"), type, optDoc, optPre, optPost, methodBody,
     fun(sel :Positioned(String), :O, range :X_TL2Type,
         doc :String, preCond :X_TL2Value, postCond :X_TL2Value, m :X_TL2Method) {
       signature ::=
         X_TL2MethodType.newK(sel.pos, Symbol.new(sel.value),
			    EmptyList.new, ArrayWith0, range)
       methodDefAction[signature, doc, preCond, postCond, m]
     })
  methodDefinition.addRule8( selector, s("@"), s(":"), type, optDoc, optPre, optPost, methodBody,
     fun(sel :Positioned(String), :O, :O, range :X_TL2Type,
         doc :String, preCond :X_TL2Value, postCond :X_TL2Value, m :X_TL2Method) {
       signature ::=
         X_TL2MethodType.newK(sel.pos, Symbol.new(sel.value+"@"),
			    EmptyList.new, ArrayWith0, range)
       methodDefAction[signature, doc, preCond, postCond, m]
     })
                           

  slotDefinition ::= mnnew(:X_TL2Slot, "slotDefinition")
  slotDefinition.addRule4( selector, s(":"), type, optDoc,
			   fun(s :Positioned(String), :O, t :X_TL2Type, doc :String) {
			     X_TL2Slot.new(s.pos, s.value, false, t, doc, nil)
			   })
  slotDefinition.addRule5( selector, s("@"), s(":"), type, optDoc,
			   fun(s :Positioned(String), :O, :O, t :X_TL2Type, doc :String) {
			     X_TL2Slot.new(s.pos, s.value, true, t, doc, nil)
			   })

; slotsAndMethods 
  noSlom :SlotsAndMethods := Pair.new(emptyList, emptyList)

  slotsAndMethods :MutableNonterminal(SlotsAndMethods) := mnnew("slotsAndMethods")
  slotsAndMethods.addRule0(
			    { noSlom })
  slotsAndMethods.addRule2( slotDefinition, slotsAndMethods,
			    fun(slot :X_TL2Slot, slom :SlotsAndMethods) {
			       Pair.new(List.cons(slot, slom.first), slom.second)
			     })
  slotsAndMethods.addRule2( methodDefinition, slotsAndMethods,
			    fun(m :X_TL2Method, slom :SlotsAndMethods) {
			       Pair.new(slom.first, List.cons(m, slom.second))
			     })

  optPrivate ::= optK( "private", slotsAndMethods,
		        fun(slom :SlotsAndMethods) {
			  slom
			},
			{ noSlom })

  class_ ::= mnnew("class_")
  class_.addRule6( k("class"), classHeader, s("{"), slotsAndMethods, optPrivate, s("}"),
		   fun(:O, builder :X_TL2ClassBuilder, :O,
			   publicSloM :SlotsAndMethods,
			   privateSloM :SlotsAndMethods, :O) :X_TL2ClassBuilder {
		     builder.publicSlots := publicSloM.first
		     builder.publicMethods := publicSloM.second
		     builder.privateSlots := privateSloM.first
		     builder.privateMethods := privateSloM.second
		     builder
		   })


; values 

  valueIde :MutableNonterminal(X_TL2ValueIde) := mnnew("valueIde")
  valueIde.addRule1( ident,   ; NOT identParen 
		     fun(s :Positioned(String)) {
		       X_TL2ValueIde.newRef(s.pos, s.value)  ; will be scoped later 
		     })


  ; value created above 
  value.addRule1( k("self"),
		  fun(p:SourcePos) { 
		    X_TL2IdeValue.new(X_TL2ValueIde.newRef(p, "self"))
		  })

  literalAction ::=
    fun(o:Positioned(Object)) {
      X_TL2LiteralValue.newPositioned(o)
    }
		  
  value.addRule1( int,    literalAction )
  value.addRule1( long,   literalAction )
  value.addRule1( real,   literalAction )
  value.addRule1( char,   literalAction )
  value.addRule1( string, literalAction )
  value.addRule1( stringParen, literalAction )
  value.addRule1( symbol, literalAction )

  negativeSign ::= mnnew(:SourcePos, "negativeSign")
  negativeSign.addRule1( s("-"),
			 fun(pos :SourcePos) { pos })

  value.addRule2( negativeSign, int,
		  fun(:O, i:Positioned(Int)) {
		    X_TL2LiteralValue.new(i.pos, i.value.negated)
		  })
  value.addRule2( negativeSign, long,
		  fun(:O, i:Positioned(Long)) {
		    X_TL2LiteralValue.new(i.pos, i.value.negated)
		  })
  value.addRule2( negativeSign, real,
		  fun(:O, r:Positioned(Real)) {
		    X_TL2LiteralValue.new(r.pos, r.value.negated)
		  })


  value.addRule3( s("("), sequence, s(")"),
		 fun(p:SourcePos, s :X_TL2BlockValue, :O) {
		   if( s.values.size = 1
		   then: { s.values.head }
		   else: { s.pos := p
		       s })
		 })

  binop(value, "*")
  binop(value, "/")
  binop(value, "%")
  binop(value, "+")
  binop(value, "-")
  binop(value, "<<")
  binop(value, ">>")
  binop(value, "<")
  binop(value, "<=")
  binop(value, ">")
  binop(value, ">=")
  binop(value, "=")
  binop(value, "==")
  binop(value, "!=")
  binop(value, "!==")
  binop(value, "&")
  binop(value, "^")
  binop(value, "|")

  lazyBinop(value, "&&")
  lazyBinop(value, "||")

  unop(value, "!")
  unop(value, "~")

  value.addRule2( k("old"), value,
		  fun(p:SourcePos, v :X_TL2Value) {
		    X_TL2SendValue.new(p, v, Symbol.new("old"), List.with0)
		    ; ### incorrect! should be TL2OldValue 
		  })


  message ::= mnnew(:Triple(Positioned(String), List(X_TL2Argument), Array(Symbol)), "message")
  mess0Action ::=
    fun(s :Positioned(String)) {
      Triple.new( s, List.with0, ArrayWith0)
    }
  message.addRule1( ident,
		    mess0Action)
  message.addRule1( string,
		    mess0Action)
  mess0CAction ::=
    fun(s :Positioned(String), :O) {
      Triple.new( Positioned.new(s.pos, s.value+"@"), List.with0, ArrayWith0)
    }
  message.addRule2( ident, s("@"),
		    mess0CAction)
  message.addRule2( string, s("@"),
		    mess0CAction)
  messArgsAction ::=
    fun(s :Positioned(String), p :Pair(List(X_TL2Argument), Array(Symbol))) {
      Triple.new(s, p.first, p.second)
    }
  message.addRule2( identParen, arguments,
		    messArgsAction)
  message.addRule2( stringParen, arguments,
		    messArgsAction)
  messArgsCAction ::=
    fun(s :Positioned(String), p :Pair(List(X_TL2Argument), Array(Symbol)), :O) {
      Triple.new(Positioned.new(s.pos, s.value+"@"), p.first, p.second)
    }
  message.addRule3( identParen, arguments, s("@"),
		    messArgsCAction)
  message.addRule3( stringParen, arguments, s("@"),
		    messArgsCAction)

  value.addRule3( value, s("."), message,
		  fun(receiver :X_TL2Value, :O, msg :Triple(Positioned(String), List(X_TL2Argument), Array(Symbol))) {
		    X_TL2SendValue.newK( msg.first.pos, receiver,
				       Symbol.new(msg.first.value),
				       msg.second, msg.third)
		  })
  value.addRule3( k("super"), s("."), message,
		  fun(receiverPos :SourcePos, :O, msg :Triple(Positioned(String), List(X_TL2Argument), Array(Symbol))) {
                    receiver ::=
		      X_TL2IdeValue.new(
		        X_TL2ValueIde.newRef(receiverPos, "self"))
		    X_TL2SuperSendValue.newK( msg.first.pos, receiver,
					    Symbol.new(msg.first.value),
					    msg.second, msg.third)
		  })

  value.addRule1( valueIde,   ; NOT identParen 
		  fun(i:X_TL2ValueIde) {
		    X_TL2IdeValue.new(i)
		  })
  value.addRule2( identParen, arguments,  ; NOT ident, NOT string 
		  fun(sel:Positioned(String), args :Pair(List(X_TL2Argument), Array(Symbol))) {
		    X_TL2SendValue.newK(sel.pos,
		      X_TL2IdeValue.new(
		        X_TL2ValueIde.newRef(sel.pos, "self")),
		      Symbol.new(sel.value), args.first, args.second)
		  })

  value.addRule2( ident, s("@"),  ; NOT identParen 
		  fun(s:Positioned(String), :O) {
		    X_TL2TakeFromValue.new(X_TL2ValueIde.newRef(s.pos, s.value))
		  })
  value.addRule3( identParen, arguments, s("@"), ; NOT ident, NOT string 
		  fun(sel:Positioned(String), args :Pair(List(X_TL2Argument), Array(Symbol)), :O) {
		    X_TL2SendValue.newK(sel.pos,
		      X_TL2IdeValue.new(
		        X_TL2ValueIde.newRef(sel.pos, "self")),
		      Symbol.new(sel.value+"@"), args.first, args.second)
		  })


  value.addRule5( value, s("."), selector, s(":="), value,
		  fun(receiver :X_TL2Value, :O, selector :Positioned(Symbol), :O, 
				       val :X_TL2Value) {
		    assignSel ::= Symbol.new(selector.value.name + ":=")
		    X_TL2SendValue.new(selector.pos, receiver, assignSel,
		      List.with1(val))
		  })
  value.addRule5( k("super"), s("."), selector, s(":="), value,
		  fun(pos :SourcePos, :O, selector :Positioned(Symbol), :O, 
				       val :X_TL2Value) {
                    receiver ::=
		      X_TL2IdeValue.new(
		        X_TL2ValueIde.newRef(pos, "self"))
		    assignSel ::= Symbol.new(selector.value.name + ":=")
		    X_TL2SuperSendValue.new(pos, receiver, assignSel,
		      List.with1(val))
		  })

  value.addRule3( valueIde, s(":="), value,
		  fun(i:X_TL2ValueIde, :O, v:X_TL2Value) {
		    X_TL2AssignValue.new(i.pos, i, v)
		  })

  value.addRule4( value, s("["), optPositionalArguments, s("]"),
		  fun(receiver:X_TL2Value, pos :SourcePos, args :List(X_TL2Argument), :O) {
		    X_TL2SendValue.new(pos, receiver, Symbol.new("[]"), args)
		  })
  value.addRule6( value, s("["), optPositionalArguments, s("]"), s(":="), value,
		  fun(receiver :X_TL2Value, pos :SourcePos, args :List(X_TL2Argument), :O,:O, val :X_TL2Value) {
		    X_TL2SendValue.new( pos, receiver, Symbol.new("[]:="), 
				   List.append(args,
				     List.with1(val)))
		  })
  value.addRule5( value, s("["), optPositionalArguments, s("]"), s("@"),
		  fun(receiver:X_TL2Value, pos :SourcePos, args :List(X_TL2Argument), :O, :O) {
		    X_TL2SendValue.new(pos, receiver, Symbol.new("[]@"), args)
		  })

  ; fun return type: nil, will be inferred 
  optRange :MutableNonterminal(Pair(Bool, X_TL2Type)) := mnnew("optRange")
  optRange.addRule2( s(":"), type,
		     fun(:O, t:X_TL2Type) { Pair.new(false, t) })
  optRange.addRule3( s("@"), s(":"), type,
		     fun(:O, :O, t:X_TL2Type) { Pair.new(true, t) })
  optRange.addRule0( { nil })

  value.addRule6( k("fun"), s("("), valueSignatures, s(")"), optRange, body,  ; ### parameters! 
		  fun( p :SourcePos,
		       :O, domain :List(X_TL2Ide), :O, range :Pair(Bool,X_TL2Type),
		       body :X_TL2Value) {
		    X_TL2CompiledFun.new(p,
		      if( range.isNil && body.isComponent
			  || range.isNotNil && range.first
			 then: {#"[]@"} else: {#"[]"}),
		      domain,
		      if( range.isNotNil then: { range.second } else: { nil }),
		      body)
		  })
  value.addRule1( body,
		  fun(body :X_TL2Value) {
		    X_TL2CompiledFun.new(body.pos,
		      if( body.isComponent then: {#"[]@"} else: {#"[]"}),
		      emptyList, nil, body)
		  })

  value.addRule3( s("#("), values, s(")"),
		  fun(p :SourcePos, vs :List(X_TL2Value), :SourcePos) {
		    X_TL2ArrayValue.new(p, vs)
		  })

; binding 

  binding ::= mnnew(:Pair(X_TL2ValueIde, X_TL2Value), "binding")

  ; identParen cannot occur in a binding 
  binding.addRule5( ident, s(":"), type, s(":="), value,
		    fun(s :Positioned(String), :SourcePos, t :X_TL2Type, :SourcePos, v :X_TL2Value) {
		      ide ::= X_TL2ValueIde.new(s.pos,s.value,false,t)
		      Pair.new(ide, v)
		    })
  binding.addRule6( ident, s("@"), s(":"), type, s(":="), value,
		    fun(s :Positioned(String), :SourcePos, :SourcePos, t :X_TL2Type, :SourcePos, v :X_TL2Value) {
		      ide ::= X_TL2ValueIde.new(s.pos,s.value,true,t)
		      Pair.new(ide, v)
		    })
  binding.addRule4( ident, s(":"), s(":="), value,
		    fun(s :Positioned(String), :SourcePos, :SourcePos, v :X_TL2Value) {
		      ide ::= X_TL2ValueIde.new(s.pos,s.value,false,nil)
		      Pair.new(ide, v)
		    })
  binding.addRule5( ident, s("@"), s(":"), s(":="), value,
		    fun(s :Positioned(String), :SourcePos, :SourcePos, :SourcePos, v :X_TL2Value) {
		      ide ::= X_TL2ValueIde.new(s.pos,s.value,true,nil)
		      Pair.new(ide, v)
		    })
  binding.addRule3( ident, s(":"), type,
		    fun(s :Positioned(String), :SourcePos, t :X_TL2Type) {
		      ide ::= X_TL2ValueIde.new(s.pos,s.value,false,t)
		      v ::= X_TL2LiteralValue.new(s.pos, nil)
		      Pair.new(ide, v)
		    })
  binding.addRule4( ident, s("@"), s(":"), type,
		    fun(s :Positioned(String), :SourcePos, :SourcePos, t :X_TL2Type) {
		      ide ::= X_TL2ValueIde.new(s.pos,s.value,true,t)
		      v ::= X_TL2LiteralValue.new(s.pos, nil)
		      Pair.new(ide, v)
		    })

; sequence 

  sequence1 ::= mnnew(:X_TL2BlockValue, "sequence1")

  sequenceTail ::= mnnew(:X_TL2BlockValue, "sequenceTail")
  sequenceTail.addRule1( sequence1,
			 fun(b :X_TL2BlockValue) {
			   b
			 })
  sequenceTail.addRule0( 
			 { X_TL2BlockValue.newIncomplete })

  sequence1.addRule2( value, sequenceTail,
		     fun(v :X_TL2Value, tail :X_TL2BlockValue) {
		       tail.values := List.cons(v, tail.values)
		       tail.pos := v.pos
		       tail
		     })

  sequence1.addRule2( binding, sequenceTail,
		     fun(b :Pair(X_TL2ValueIde, X_TL2Value), tail :X_TL2BlockValue) {
		       ide ::= b.first
		       initialValue ::= b.second
		       body ::=
		         if( tail.values.isEmpty
			  then: { body :X_TL2Value := X_TL2IdeValue.new(ide) }
			  else: { tail })
		       p ::= ide.pos
		       X_TL2BlockValue.new(p, List.with1(X_TL2LetValue.new(p, ide, initialValue, body)))
		     })

  sequence.addRule1( sequence1,
		     fun(b :X_TL2BlockValue) {
		       b
		     })
  sequence.addRule0( 
		     { X_TL2BlockValue.newIncomplete })

; signatures 

  ; created above 
  signature.addRule3( ident, s("="), type,
		      fun(s:Positioned(String), :SourcePos, t :X_TL2Type) {
		        X_TL2TypeIde.new(s.pos, s.value, t)
		      })
  signature.addRule3( ident, s("<:"), type,
		      fun(s:Positioned(String), :SourcePos, t :X_TL2Type) {
		        X_TL2SubTypeIde.new(s.pos, s.value, t)
		      })
  signature.addRule2( s(":"), type,
		      fun(p:SourcePos, t :X_TL2Type) {
		        X_TL2ValueIde.new(p, nil, false, t)
		      })
  signature.addRule3( s("@"), s(":"), type,
		      fun(p:SourcePos, :SourcePos, t :X_TL2Type) {
		        X_TL2ValueIde.new(p, nil, true, t)
		      })
  signature.addRule3( ident, s(":"), type,
		      fun(s:Positioned(String), :SourcePos, t :X_TL2Type) {
		        X_TL2ValueIde.new(s.pos, s.value, false, t)
		      })
  signature.addRule4( ident, s("@"), s(":"), type,
		      fun(s:Positioned(String), :SourcePos, :SourcePos, t :X_TL2Type) {
		        X_TL2ValueIde.new(s.pos, s.value, true, t)
		      })

  ; created above 
; ### reuse? 
  typeSignature.addRule3( ident, s("="), type,
		      fun(s:Positioned(String), :SourcePos, t :X_TL2Type) {
		        X_TL2TypeIde.new(s.pos, s.value, t)
		      })
  typeSignature.addRule3( ident, s("<:"), type,
		      fun(s:Positioned(String), :SourcePos, t :X_TL2Type) {
		        X_TL2SubTypeIde.new(s.pos, s.value, t)
		      })

  valueSignature.addRule2( s(":"), type,
			   fun(p:SourcePos, t :X_TL2Type) {
			     X_TL2ValueIde.new(p, nil, false, t)
			   })
  valueSignature.addRule3( s("@"), s(":"), type,
			   fun(p:SourcePos, :SourcePos, t :X_TL2Type) {
			     X_TL2ValueIde.new(p, nil, true, t)
			   })
  valueSignature.addRule3( ident, s(":"), type,
			   fun(s:Positioned(String), :SourcePos, t :X_TL2Type) {
			     X_TL2ValueIde.new(s.pos, s.value, false, t)
			   })
  valueSignature.addRule4( ident, s("@"), s(":"), type,
			   fun(s:Positioned(String), :SourcePos, :SourcePos, t :X_TL2Type) {
			     X_TL2ValueIde.new(s.pos, s.value, true, t)
			   })


  ; ### toplevel stuff - this will go away 
  doArg :MutableNonterminal(String) := mnnew("doArg")
  doArg.addRule1(string,
		 fun(ps :Positioned(String)) {
		   ps.value
		 })
  doArg.addRule1(ident,
		 fun(ps :Positioned(String)) {
		   ps.value
		 })

  doArgs :MutableNonterminal(List(String)) := mnnew("doArgs")
  doArgs.addRule0(
		  { emptyList })
  doArgs.addRule2( doArg, doArgs,
		   fun(head :String, tail :List(String)) {
		     List.cons(head, tail)
		   })

  ; the top is the place
;     where nobody goes
;     you just imagine 

  ; export! 
  top :MutableNonterminal(X_TL2ParseUnit) := mnnew("top")
  top.addRule1( class_,
		fun(builder :X_TL2ClassBuilder) {
		  X_TL2PUClass.new(builder.pos, builder)
		})
  top.addRule1( sequence,
		fun(b :X_TL2BlockValue) {
		  if( !b.values.isEmpty
		   then: { X_TL2PUBindings.new(b.pos, b) }
		   else: { ; empty sequence means end of parse 
		       nil })
		})
  top.addRule2( k("define"), valueSignatures,
		fun(pos :SourcePos, l :List(X_TL2ValueIde)) {
		  X_TL2PUDefine.new(pos, l)
		})
  top.addRule3( k("DO"), ident, doArgs,
		fun(pos :SourcePos, l :Positioned(String), args :List(String)) {
		  X_TL2PUDo.new(pos, l.value, args)
		})
  top
}

}
