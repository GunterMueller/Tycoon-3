class X_TL2RecursiveValueVisitor
super X_TL2ValueVisitor(Void)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta AbstractClass
{
visitSend(v :X_TL2SendValue) :Void
  (* *)
{ v.receiver.accept(self)
  v.args.do(fun(a :X_TL2Argument) {
    a.argumentCase(
      fun(v1 :X_TL2Value) { v1.accept(self) },
      fun( :X_TL2Type) { ; nop 
})
  })
}

visitAssign(v :X_TL2AssignValue) :Void
  (* *)
{ v.rhs.accept(self) }

visitIde( :X_TL2IdeValue) :Void
  (* *)
{ }

visitFun(v :X_TL2CompiledFun) :Void
  (* *)
{ v.body.accept(self) }

visitLet(v :X_TL2LetValue) :Void
  (* *)
{ v.value.accept(self)
  v.body.accept(self)
}

visitBlock(v :X_TL2BlockValue) :Void
  (* *)
{ v.values.do(fun(v :X_TL2Value) {
    v.accept(self)
  })
}

visitArray(v :X_TL2ArrayValue) :Void
  (* *)
{ v.values.do(fun(v :X_TL2Value) {
    v.accept(self)
  })
}

visitDefault( :X_TL2Value) :Void
  (* *)
{ ; nop 
}

}
