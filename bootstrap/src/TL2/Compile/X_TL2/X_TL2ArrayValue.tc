class X_TL2ArrayValue
super X_TL2Value
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2ArrayValueClass
{
values :List(X_TL2Value)

accept(T <: Void, v :X_TL2ValueVisitor(T)) :T
  (* *)
{ v.visitArray(self) }

isComponent :Bool
{ ;; definitely not, otherwise we could not compile the array as a literal
  false
}

prettyPrint(out :Printer) :Void
  (* *)
{
  separator ::=
    if( isSimple then: { ", " } else: { ",\n" })
  out << "#("
  out.withRelIndent(2, {
    values.doBetween(fun(v :X_TL2Value) {
      v.prettyPrint(out)
    }, {
      out << separator
    })
  })
  out << ")"
}

children :Reader(X_TL2ProgramObject)
{ values.reader }

scope(env :X_TL2Scoper) :X_TL2ArrayValue
  (* *)
{
  values := env.scopeList(:X_TL2Value, values)
  ;; ### should AtArrays be allowed?
  values.do(fun(v :X_TL2Value) {
    if(v.isComponent then: {
      env.errorLog.error(v.pos, "component in array expression")
    })
  })
  arrayType := X_TL2IdeType.new(X_TL2TypeIde.newRef(pos, "Array")).scope(env)
  self
}

genCode(backEnd :X_BEMethodManager) :Void
  (* *)
{
  isLiteralVisitor :X_TL2FunValueVisitor(Bool) := nil
  isLiteralVisitor := X_TL2FunValueVisitor.new(nil)
		       .ifLiteral(fun(:X_TL2LiteralValue){ true })
		       .ifArray(fun(a:X_TL2ArrayValue){
			 a.values.all(fun(v:X_TL2Value){
			   v.accept(isLiteralVisitor)
			 })
			})
		       .ifSend(fun(s:X_TL2SendValue) {
		         s.generator.isNotNil
			 && s.generator."class" == X_TL2LiteralValue
		       })
		       .otherwise(fun(:X_TL2Value){ false })

  getLiteralVisitor :X_TL2FunValueVisitor(Object) := nil
  getLiteralVisitor :=
    X_TL2FunValueVisitor.new(nil)
      .ifLiteral(fun(v:X_TL2LiteralValue){ v.value })
      .ifArray(fun(a:X_TL2ArrayValue) {
        Array.fromContainerWithMap(a.values,
	  fun(v :X_TL2Value){ v.accept(getLiteralVisitor) })
       })
       .ifSend(fun(s:X_TL2SendValue) {
	 _typeCast(s.generator, :X_TL2LiteralValue).value
       })

  if( accept(isLiteralVisitor) then: {
    literal ::= accept(getLiteralVisitor)
    backEnd.loadLiteral(literal)
  } else: {
    values.do(fun(v :X_TL2Value) {
      v.genCode(backEnd)
    })
    backEnd.makeArray(values.size)
  })
}

genCodeIgnore(backEnd :X_BEMethodManager) :Void
  (* *)
{ backEnd.errorLog.warning(pos, "unused array expression")
  super.genCodeIgnore(backEnd)
}

genCodeBranch(backEnd :X_BEMethodManager, dest :X_BEMMLabel, branchIf :Bool) :Void
  (* *)
{
  backEnd.errorLog.error(pos, "array expression used as conditional")
  super.genCodeBranch(backEnd, dest, branchIf)
}

private

arrayType :X_TL2Type
  (* the type "Array" *)

doCheck(T <: Void, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* *)
{
  e ::= X_TL2UnifyType.new
  emptySubst ::= X_TL2EmptySubst.instance

  values.do(fun(v :X_TL2Value) {
    v.check(fun(t :X_TL2Type, s :X_TL2Subst) {
      setError(v.pos, "Wrong-typed array element", {
        t.checkSubType(e, s, emptySubst)
      })
    })
  })

  resultType ::= X_TL2ApplyType.new(arrayType, List.with1(e))
  resultType.checkType(emptySubst)
  cont[resultType, emptySubst]
}

}
