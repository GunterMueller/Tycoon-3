class X_TL2ApplyType
super X_TL2TypeImpl
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2ApplyTypeClass
{
oper :X_TL2Type
  (* *)
{ _oper }

args :List(X_TL2Type)
  (* *)
{ _args }

accept(T <: Void, visitor :X_TL2TypeVisitor(T)) :T
  (* *)
{ visitor.visitApplyType(self) }

reduce(T <: Void, s :X_TL2Subst, cont: Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* *)
{
    oper.reduce(s, fun(oper :X_TL2Type, os :X_TL2Subst) {
      args ::= List.fromReader(args.map(fun(arg :X_TL2Type) {
	arg.reduce(s, fun(arg :X_TL2Type, as :X_TL2Subst) {
	  if( as == X_TL2EmptySubst.instance then: {
	    arg
	  } else: {
	    X_TL2SubstType.new(arg, as)
	  })
	})
      }))

      cont[X_TL2ApplyType.new(
	if( os == X_TL2EmptySubst.instance then: {
	  oper
	} else: {
	  X_TL2SubstType.new(oper, os)
	}),

	args
      ), X_TL2EmptySubst.instance]
    })
  }

checkSubObjectType(big :X_TL2ObjectType, subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* inherit
     checkSubNilType
     checkSubIdeType
     checkSubUnifyType
     checkSubMethodType
  *)
{
    expose(subst, false, fun(exposed :X_TL2Type, subst :X_TL2Subst) {
      exposed.checkSubType(big, subst, bigSubst)
    })
  }

checkSubApplyType (big :X_TL2ApplyType,  subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
{
  success ::= false

; first chance:
;    same operator (global ide), known co/contravariance

  if( args.size == big.args.size then: {
    getOperIde ::= visitor.
      ifIdeType(fun(oper :X_TL2IdeType) {
	oper.ide
      }).
      otherwise(fun(:X_TL2Type) { nil })

    operIde ::= getOperIde.visitType(oper)
    bigOperIde ::= getOperIde.visitType(big.oper)
    if( operIde.isNotNil
     && operIde == bigOperIde
     && operIde.isGlobal then: {
      unistate ::= typeChecker.unificationState
      variance ::= typeChecker.getVariance(operIde)
      if( variance.isNotNil && variance.size == args.size then: {
	checkArgListVariance(variance, args, big.args, subst, bigSubst)
	success := true
	;; an exception makes the whole check fail
      })
    })
  })

;    second chance:
;       O <: O'', A <: A'', A'' <: A
;       -------------------------
;          O(A) <: O''(A'')
;
;       Use second chance, if:
;       - first chance not tried (different / too complex operators)
;       - argument lists are equally long
;    

  if( !success then: {

    if(  args.size == big.args.size
	  && !oper.visitor.
	   ifIdeType(fun(oper :X_TL2IdeType) {
	     oper.ide.name.startsWith("Fun")
	   }).
	   otherwise(fun(:X_TL2Type) { false }).
	   visitType(oper)
     then: {
      unistate ::= typeChecker.unificationState
      try({

	oper.checkSubType(big.oper, subst, bigSubst)
	checkEqualArgLists(args, big.args, subst, bigSubst)

	success := true
      } else: fun(e :Exception) {
	typeChecker.retractTo(unistate)
	if( e."class" != X_TL2TypeCheckTypeError then: {
	  e.raise
	})
      })
    })
  })

  if( !success then: {
    expose(subst, false, fun(t :X_TL2Type, subst :X_TL2Subst) {
      t.checkSubType(big, subst, bigSubst)
    })
  })
}

checkSubOperType  (big :X_TL2OperType,   subst :X_TL2Subst, bigSubst :X_TL2Subst) :Void
  (* *)
{
  ; A type application is never an oper in X_TL2TL-2 and so can't be subtype of an Oper 
  raiseSubTypeError(self, big)
}

prettyPrint(out :Printer) :Void
  (* ########################################### *)
{
    oper.prettyPrint(out)
    out.write('(')
  ;  isSimple ? { 
      args.doBetween(fun(t :X_TL2Type) {
	t.prettyPrint(out)
      }, {
	out.writeAll(", ")
      })
  ;  } : {
;      out.withRelIndent(2, {
;	out.nl,
;	args.doBetween(fun(t :X_TL2Type) {
;	  t.prettyPrint(out)
;	}, {
;	  out.writeAll(",\n")
;	})
;      })
;    } 
    out.write(')')
  }

children :Reader(X_TL2ProgramObject)
  (* *)
{
    List.cons(oper, args).reader
  }

scope(env :X_TL2Scoper) :X_TL2ApplyType
  (* *)
{
    _oper := oper.scope(env)
    _args := env.scopeList(:X_TL2Type, args)
    self
  }

substArgs(subst :X_TL2Subst, args :List(X_TL2Type)) :List(X_TL2Type)
  (* *)
{
    if( args.isEmpty then: {
      args
    } else: {
      newHead ::= args.head.subst(subst)
      newTail ::= substArgs(subst, args.tail)
      if( newHead == args.head && newTail == args.tail then: {
	args
      } else: {
	List.cons(newHead, newTail)
      })
    })
  }

subst(subst :X_TL2Subst) :X_TL2ApplyType
  (* *)
{
  newOper ::= oper.subst(subst)
  newArgs ::= substArgs(subst, args)
  if( newOper == oper && newArgs == args then: fun():X_TL2ApplyType {
    self
  } else: {
    X_TL2ApplyType.new(newOper, newArgs)
  })
}

private

_oper :X_TL2Type

_args :List(X_TL2Type)

doCheckType(subst :X_TL2Subst) :Void
  (* *)
{
    oper.checkType(subst)
    args.do(fun(t :X_TL2Type) { t.checkType(subst) })
    oper.checkApplication(args, subst)
  }

doExpose(T <: Void, subst :X_TL2Subst, exact :Bool, cont :Fun(:X_TL2Type, :X_TL2Subst):T) :T
  (* *)
{
    oper.apply(args, subst, subst, exact, cont)
  }

checkArgListVariance(variance :List(Int), args1 :List(X_TL2Type), args2 :List(X_TL2Type), s1 :X_TL2Subst, s2 :X_TL2Subst) :Void
  (* *)
require args1.size == args2.size
     && args1.size == variance.size
  {
    variance ::= variance
    args1 ::= args1
    args2 ::= args2
    while({
      !args1.isEmpty
    } do: {
      t1 ::= args1.head
      t2 ::= args2.head
      vari ::= variance.head

      if( (vari & 2) == 0 then: {
	;; operator not contravariant
	;; check covariance
        t1.checkSubType(t2, s1, s2)
      })
      if( (vari & 1) == 0 then: {
	;; operator not covariant
	;; check contravariance
        t2.checkSubType(t1, s2, s1)
      })
      ;; we assume that co AND contravariant operator means
      ;; that argument is ignored or compared only to itself
      ;; so no check - ### is this correct?

      args1 := args1.tail
      args2 := args2.tail
      variance := variance.tail
    })
  }

checkEqualArgLists(args1 :List(X_TL2Type), args2 :List(X_TL2Type), s1 :X_TL2Subst, s2 :X_TL2Subst) :Void
  (* *)
require args1.size == args2.size
  {
    args1 ::= args1
    args2 ::= args2
    while({
      !args1.isEmpty
    } do: {
      t1 ::= args1.head
      t2 ::= args2.head

      t1.checkSubType(t2, s1, s2)
      t2.checkSubType(t1, s2, s1)

      args1 := args1.tail
      args2 := args2.tail
    })
  }
}
