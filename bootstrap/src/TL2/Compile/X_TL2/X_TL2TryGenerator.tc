class X_TL2TryGenerator
super X_TL2CodeGenerator
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta X_TL2TryGeneratorClass
{
body :X_TL2Value

sig :X_TL2ValueIde

handler :X_TL2Value

genCode(backEnd :X_BEMethodManager) :Void
  (* *)
{
  genCodeGeneric(backEnd,
    fun(handlerEnd :X_BEMMLabel) {
      body.genCode(backEnd)
      backEnd.jump(handlerEnd)
    },
    { handler.genCode(backEnd)    
      backEnd.adjust(1)   ; remove exception object under result 
    })
}

genCodeIgnore(backEnd :X_BEMethodManager) :Void
  (* *)
{
  genCodeGeneric(backEnd,
    fun(handlerEnd :X_BEMMLabel) {
      body.genCodeIgnore(backEnd)
      backEnd.jump(handlerEnd)
    },
    { handler.genCodeIgnore(backEnd)    
      backEnd.pop   ; remove exception object 
    })
}

genCodeReturn(backEnd :X_BEMethodManager) :Void
  (* *)
{
  genCodeGeneric(backEnd,
    fun(handlerEnd :X_BEMMLabel) {
      body.genCode(backEnd)
      ; NOT genCodeReturn, otherwise exception frame might get popped 
      backEnd.return
    },
    { handler.genCodeReturn(backEnd)
    })
}

genCodeGeneric(backEnd :X_BEMethodManager, bodyF :Fun(:X_BEMMLabel):Void, handlerF :Fun():Void) :Void
  (* *)
{
  bodyStart ::= backEnd.newLabel
  bodyEnd ::= backEnd.newLabel
  handlerStart ::= backEnd.newLabel
  handlerEnd ::= backEnd.newLabel

;
;bodyStart:
;  ...body..., may jump to handlerEnd
;bodyEnd:
; 
;handlerStart:
;  ...handler, called with exception on the stack...
;handlerEnd:
;

  savedSp ::= backEnd.sp
  backEnd.defineLabel(bodyStart)
  bodyF[handlerEnd]
  backEnd.defineLabel(bodyEnd)

  backEnd.sp := savedSp
  backEnd.defineLabel(handlerStart)
  backEnd.incSp  ; exception object is magically pushed 

  backEnd.exceptionHandler(bodyStart, bodyEnd, handlerStart)

  backEnd.withLocal(sig, {
    handlerF[]
  })
  backEnd.defineLabel(handlerEnd)
}

isComponent :Bool
{ false ;; ## unfortunately
}

}
