define Lines :MutableNonterminal(Object);
define S :MutableNonterminal(Object);

Lines := MutableNonterminal.new("Lines");
S := MutableNonterminal.new("S");

Lines.addRule1(
	S,
	fun(:Object) { nil });
Lines.addRule3(
	S, t[","], Lines,
	fun(:Object, :Object, :Object) { nil });


S.addRule1(
	E,
	fun(i :Int) {
	  tycoon.stdout.nl,
	  tycoon.stdout.writeln("Ergebnis: "),
	  i.print,
	  tycoon.stdout.nl,
	  nil
	});
S.addRule0(
	{ nil });

define g :Grammar(Object);
g := Grammar.new(Lines);

(*
define p :NaiveParser(Object);
p := parserGen.generate(g);

s.in := File.stdin;
p.logging := false;
p.parse(s);
*)

define cp :CompactParser(Object);
cp := cparserGen.generate(g);

s.in := File.stdin;
cp.logging := false;
cp.parse(s);
