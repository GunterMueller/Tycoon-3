class Graph(T <: Object)
super AbstractGraph(T, Node(T))
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta GraphClass(T)
{
addEdge(from :Node(T), to :Node(T)) :Void
  (* *)
{ from.successors.add(to) }

removeEdge(from :Node(T), to :Node(T)) :Void
  (* *)
{ from.successors.remove(to) }

successors(n :Node(T)) :Collection(Node(T))
  (* *)
{ n.successors }

predecessors(n :Node(T)) :Collection(Node(T))
  (* *)
{ nodes.select(fun(n1 :Node(T)) {
    n1.successors.includes(n)
  })
}

indegree(n :Node(T)) :Int
  (* *)
{ nodes.count(fun(n1:Node(T)){
    n1.successors.includes(n)
  })
}

outdegree(n :Node(T)) :Int
  (* *)
{ n.successors.size
}

private

_nodes :Set(Node(T))

_newNode(value :T) :Node(T)
  (* *)
{ Node.new(value) }

}
