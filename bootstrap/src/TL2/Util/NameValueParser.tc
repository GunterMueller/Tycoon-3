class NameValueParser
super Util
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
*)
meta SingletonClass(NameValueParser)
{
parse(input :Input) :Dictionary(String, String)
  (* parse <in> as a sequence of name = value pairs.
   Each non-empty line in <in> must consist of a name, an equal sign and another name,
   with optional whitespace inbetween or at the beginning or end of the line.
   name may consist of alphanumeric characters plus any of _!#$%&*+-/:;<>?@^`|~
   or may use the standard Tycoon string syntax including escapes.
   to do: comments 
 On lexical errors, raises an Exception;
   on grammatical errors, returns nil. (###) *)
{
  scanner ::= Scanner.new(scannerTables, input)
  parser.parse(scanner,
    fun(offendingToken :Token(Object)) {
      tycoon.stdout.writeln("NameValueParser: Parse error on "+offendingToken.printString)  ; ### 
      nil
    })
}

hackScannerTables :ScannerTables(Token(Object))
  (* *)
{ scannerTables }

private

escapes :Dictionary(Char,Char)

scannerTables :ScannerTables(Token(Object))

parser :AbstractParser(Dictionary(String,String))

equalT :SimpleTerminal

newlineT :SimpleTerminal

stringT :ValueTerminal(String)

_init :Void
  (* *)
{ super._init
  createTerminals
  buildScannerTables
  buildParser
  self
}

createTerminals :Void
  (* *)
{
  equalT := SimpleTerminal.new("=")
  newlineT := SimpleTerminal.new("newline")
  stringT := ValueTerminal.new("string")
}

buildScannerTables :Void
  (* *)
{
  sb ::= ScannerBuilder(:Token(Object), :Void).new

  sb.addToken("[ \t\f]+", fun(s:Scanner(Token(Object))){ s.read })

  sb.addToken("=", fun(:Scanner(Token(Object))){ equalT.token })
  sb.addToken("\n", fun(:Scanner(Token(Object))){ newlineT.token })

  ; ### copy&paste from TWLScannerBuilder: 

  escapes := Dictionary.new
  escapes['n'] := '\n'
  escapes['t'] := '\t'
  escapes['r'] := '\r'
  escapes['f'] := '\f'
  escapes['\''] := '\''
  escapes['\"'] := '\"'
  escapes['\\'] := '\\'

  digit ::= "[0-9]"
  alpha ::= "[a-zA-Z_]"
  special ::= "[!#$%&*+-/:;<>?@^`|~]"
  simpleEscape ::= quoteRE(String.fromReader(escapes.keys))  ;; for '\\'
  escape ::= "\\\\(["+simpleEscape+"]|"+digit+digit+digit+")"
  delimiter ::= "([()\\{\\}.,=]|\\[|\\])"

  sb.addToken("\"(" + digit +
		"|" + alpha +
		"|" + special +
		"|" + escape +
		"|" + delimiter + "| )*\"",
    fun(s :Scanner(Token(Object))) {
      r ::= s.token.subSequenceReader(1,s.tokenSize-2)
      stringT.token( String.fromReader(FunReader.new({ decodeChar(r) })) )
    }
  )

  sb.addToken("("+digit+"|"+alpha+"|"+special+")+", fun(s:Scanner(Token(Object))){
    stringT.token(s.token)
  })

  scannerTables := sb.generate
}

decodeChar(r :Reader(Char)) :Char
  (* *)
{
  c ::= r.read
  if( c.isNil ||  c !== '\\'  then: {
    c
  } else: {
    c ::= r.read
    escapes.lookup(c,
      fun(coded :Char) {
        coded
      },
      { 
        assert({ c.isDigit })
	i ::= c.digitValue
	c ::= r.read
	assert({ c.isNotNil & c.isDigit })
	i ::= i * 10 + c.digitValue
	c ::= r.read
	assert({ c.isNotNil & c.isDigit })
	i ::= i * 10 + c.digitValue
	i.asChar
      }
    )
  })
}

quoteRE(s :String) :String
  (* ### what a hack! *)
{
  qs ::= MutableString.new(s.size * 2)
  for(0 to: s.size-1 do: fun(i :Int) {
    qs[2*i] := '\\'
    qs[2*i+1] := s[i]
  })
  qs
}

buildParser :Void
  (* *)
{
  pair ::= MutableNonterminal(:Pair(String,String)).new("pair")
  pair.addRule3( stringT, equalT, stringT,
		 fun(name :String, :Object, value :String) {
		   Pair.new(name, value)
		 })

  pair.addRule2( stringT, equalT,
		 fun(name :String, :Object) {
		   Pair(:String,:String).new(name, nil)
		 })

  ; there has to be at least one newline between adjacent pairs. 
  ; all ::= {newline} [ pair { newline | newline pair } ] 

  newlines ::= MutableNonterminal(:Object).new("newlines")
  newlines.addRule0( { nil } )
  newlines.addRule2( newlines, newlineT,
		     fun(:Object, :Object){ nil })

  pairs ::= MutableNonterminal(:Dictionary(String,String)).new("pairs")
  pairs.addRule1( pair,
		  fun(p :Pair(String,String)) {
		    d ::= Dictionary.new
		    d[p.first] := p.second
		    d
		  })
  pairs.addRule3( pairs, newlineT, pair,
		fun(d :Dictionary(String,String), :Object, p :Pair(String,String)) {
		  d[p.first] := p.second
		  d
		})
  pairs.addRule2( pairs, newlineT,
		fun(d :Dictionary(String,String), :Object) {
		  d
		})

  all ::= MutableNonterminal(:Dictionary(String,String)).new("all")
  all.addRule2( newlines, pairs,
		fun(:Object, d :Dictionary(String,String)) {
		  d
		})
  all.addRule1( newlines,
		fun(:Object) {
		  Dictionary.new
		})

  gram ::= Grammar.new(all)
  parserBuilder ::= ParserGen(:ReentrantCompactParser).new(CompactParserBuilder.new)
  parser := parserBuilder.generate(gram)
}

}
