class Triple(First <:Object, Second <:Object, Third <:Object)
super Object
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

	Triple.tc
	
	A triple of values

	Ingo Richtsmeier

	23-Oct-97

	Copyright 1997, Higher-Order GmbH, Hamburg
*)
meta TripleClass(First, Second, Third)
{
first :First
  (* *)
{ _first }

second :Second
  (* *)
{ _second }

third :Third
  (* *)
{ _third }

"="(x :Object) :Bool
  (* *)
{
  self == x || (
    clazz ::= x.clazz
    (clazz == Triple ;|| { clazz == MutableTriple }
) && (
      x ::= _typeCast(x, :Triple(Object, Object, Object))
      first = x.first && second = x.second && third = x.third)
    )
  }

equalityHash :Int
  (* answer a hash value reflecting the receivers contents. *)
{
  (first.equalityHash * 13) | (second.equalityHash * 7) | third.equalityHash
  }

printOn(out :Output) :Void
  (* *)
{ out.writeString(clazz.name)
  out.write('{')
  first.printOn(out)
  out.writeString(", ")
  second.printOn(out)
  out.writeString(", ")
  third.printOn(out)
  out.write('}')
}

private

_first :First

_second :Second

_third :Third

}
