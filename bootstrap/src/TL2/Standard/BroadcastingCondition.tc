class BroadcastingCondition
super Condition
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *


  Author:  Andreas Gawecki, Marc Weikard
  Date:    30-Jan-1997

  A BroadcastingCondition object is like an ordinary Condition object,
  except that BroadcastingCondition::signal awakes ALL threads
  waiting on the receiver. This makes sense if more than one or just all of
  them can make progress and do not require exclusive access to the resource
  protected by the Condition.
  
  Note that this difference may be just an issue of performance, since even
  ordinary Condition objects may spuriously wake one, two OR EVEN ALL
  threads waiting on it due to spurious wake ups. So if your code is correctly
  using ordinary Condition objects by ALWAYS checking the condition inside a
  while-loop, your code will also work correctly by replacing every Condition
  object by a BroadcastingCondition. This, of course, incurs significant
  scheduling overhead to your application if only one of them can
  make progress.

*)
meta SimpleCStructClass(BroadcastingCondition)
{
signal :Void
  (* notify all threads waiting on the receiver *)
builtin

private

__init :Bool
  (* register the receiver with the TVM *)
builtin

}
