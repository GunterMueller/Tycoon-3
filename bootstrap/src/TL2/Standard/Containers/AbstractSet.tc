class AbstractSet(E <: Object)
super AddMixin(E), RemoveMixin(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Container which contains every element only once

Author:  Axel Wienberg
Date:    3-Jun-1996
Updates: (Date)	  (Name)	(Description)
	 09-Jun-1998 Axel Wienberg moved most methods to DynContainer
*)
meta AbstractClass
{

add(e :E) :Void
  (* *)
ensure includes(e)
{
  if( !includes(e) then: {
    addNew(e)
  })
}

addNew(e :E) :Void
  require !includes(e)
  ensure includes(e) & size = old size + 1
  deferred

"="(x :Object) :Bool
  (* *)
{
  self == x || (
    x."class" == self."class"  ;; limited due to problems with equalityhash
    && (
      x ::= _typeCast(x, :AbstractSet(Object))
      setEqual(x)
    )
  )
}

setEqual(other :AbstractSet(Object)) :Bool
{
  size = other.size && includesAll(other)
}

occurrencesOf(e :Object) :Int
  (* ensure result >= 0 & result <= 1 *)
{
  n ::= super.occurrencesOf(e)
  assert({ n >= 0 & n <= 1 })
  n
}

private

}
