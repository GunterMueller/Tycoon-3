class EmptyList
super EmptySequence
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Generic empty lists
	 
Author:  Andreas Gawecki
Date:    14-Feb-1996
Updates: (Date)	  (Name)	(Description)
*)
meta EmptyListClass()

{
asList :EmptyList
  (* *)
{
  self
  }

head :Nil
  (* *)
require !isEmpty
{ if( tycoon.debug then: { tycoon.backTrace })
  assert({ !isEmpty })
  nil
}

tail :Nil
  (* *)
require !isEmpty
{ assert({ !isEmpty }) nil }

"head:="(e :Object) :Nil
  (* *)
require !isEmpty
{ assert({ !isEmpty }) nil }

"tail:="(tail :Object) :Nil
  (* *)
require !isEmpty
{ assert({ !isEmpty }) nil }

nthTail(n :Int) :EmptyList
  (* *)
{ assert({ n.isZero })
  self
}

listEqual(l :List(Object)) :Bool
  (* *)
{ l.isEmpty }

locateAccuStartBefore(e :Object, i :Int, startingAt :Int, before :Int) :Int
  (* *)
{ nil }

locateAccuBefore(e :Object, i :Int, before :Int) :Int
  (* *)
{ nil }

locateAccuStart(e :Object, i :Int, startingAt :Int) :Int
  (* *)
{ nil }

locateAccu(e :Object, i :Int) :Int
  (* *)
{ nil }

}
