class Container(E <: Object)
super Containers, Collection(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Container objects providing storage for elements of type E

Author:  Andreas Gawecki
Date:    13-Feb-1996
Updates: (Date)	  (Name)	(Description)
*)
meta AbstractClass
{
size :Int
  (* *)
deferred

as(T <: Object,
   containerClass :AbstractContainerGenerator(E,T)):T
  (* *)
{ containerClass.fromContainer(self) }

isEmpty :Bool
  (* normative implementation *)
{
  size = 0
}

includesAll(aCollection :Collection(Object)) :Bool
  (* is aCollection completely contained in self? *)
{
  aCollection.all(fun(e :Object) { includes(e) })    
}

includesSome(aCollection :Collection(Object)) :Bool
  (* do self and aCollection intersect? *)
{
  aCollection.some(fun(e :Object) { includes(e) })    
}

printOn(out :Output) :Void
  (* Print out the container with its contents.
     Default implementation for containers.
     Subclasses may override it appropriately. *)
{
  className :String := self."class".name  ;##allow 'class' as identifier  
  out.writeAll(className)
  
  out.write('{')
  isFirst ::= true
  do(fun(e :E){
    if( !isFirst then: {out.write(',') out.write(' ')})
    isFirst := false
    e.printOn(out)})    
  out.write('}')
  }

equalityHash :Int
  (* answer a hash value reflecting the receivers contents. *)
{
  inject(size, fun(h :Int, e :E) {h + e.equalityHash})  ; ### should use _elementHash 
  }

insertInto(dynSequence :DynSequenceSink(E), at :Int) :Void
  (* *)
{
  dynSequence.insertContainer(self, at)
}

private

_elementHash(e :E) :Int
  (* default implementation uses equality hash
     corresponds to inherited _elementEqual *)
{
  e.equalityHash
  }

}
