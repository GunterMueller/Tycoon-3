class DynSequenceGeneratorMixin(E <: Object, Instance <: DynSequence(E))
super RandomAccessGeneratorMixin(E, Instance, Instance)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

   implementation for AbstractSequenceGenerator that creates
   DynSequences, mostly using random access.
   subclasses must implement _new2.
 *)
meta AbstractClass
{

fromReader(reader :Reader(E)) :Instance
  (* result will contain exactly the elements delivered by reader,
     with the element delivered earlier at the lower index. *)
{
  instance ::= _new2(0,0)
  reader.do(fun(e:E) {
    instance.addLast(e)
  })
  instance
}

fromReverseReader(reader :Reader(E)) :Instance
  (* result will contain exactly the elements delivered by reader,
     with the element delivered earlier at the higher index. *)
{
  instance ::= _new2(0,0)
  reader.do(fun(e:E) {
    instance.addFirst(e)
  })
  instance
}

private

_new1(n :Int) :Instance
  ensure result.size = n
{ _new2(n,n) }

postProcess(i :Instance) :Instance
  (* called after initialising <i>, before delivering it to the client.
   result is not necessary the same object (-> Symbol) *)
{ i }

_new2(initialCapacity :Int, initialSize :Int) :Instance
  (* create a new instance with initial capacity <initialCapacity> and
     initial size <initialSize>. *)
  require initialCapacity >= initialSize
  ensure result.size = initialSize
  deferred

}
