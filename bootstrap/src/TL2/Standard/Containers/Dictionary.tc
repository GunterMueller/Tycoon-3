class Dictionary(K <: Object, E <: Object)
super MutableKeyedContainer(K, E), Index(K,E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Dynamic mapping of keys to values

nil elements are allowed

Author:  Andreas Gawecki
Date:    13-Feb-1996 
Updates: (Date)	  (Name)	(Description)
	 25-Jun-96 Axel Wienberg added lookupCreate
	  7-Jan-97 Matthias Ernst changed initizalization protocol,
	                          subclassing introduced infinite recursion
         02-Oct-98 Axel Wienberg moved most methods to class Index
*)
meta DictionaryClass(K, E)
{

memoize(k :K, ifAbsent :Fun():E) :E
  (* overrides MutableKeyedContainer.memoize for efficiency 
     memoize the result of calling <ifAbsent> for <k>.
     <ifAbsent> is called iff  !includesKey(k) || { self[k].isNil }
     If called, <ifAbsent> must return a non-nil value, which is stored
     under key <k>. *)
  require validKey(k)
  ensure includesKey(k) && result == self[k] && result.isNotNil
{
  i ::= _findIndex(k)
  e ::= _elements[i]
  if( e.isNil then: {
    self[k] := ifAbsent[]
  } else: {
    e
  })
}

"[]:="(k :K, e :E) :E
  (* Set the value of the element with key 'k' to 'e' *)
  require validKey(k)
  ensure self[k] == e 
{
  _add(k,e)
  e
}

swap(k1 :K, k2 :K) :Void
  (* Exchange elements with keys k1 and k2 *)
require includesKey(k1) & includesKey(k2)
{
  i1 ::= _findIndex(k1)
  if( _keys[i1].isNil then: { _raiseKeyNotFoundError(k1) })
  i2 ::= _findIndex(k2)
  if( _keys[i2].isNil then: { _raiseKeyNotFoundError(k2) })
  
  temp ::= _elements[i1]
  _elements[i1] := _elements[i2]
  _elements[i2] := temp
}

private

}
