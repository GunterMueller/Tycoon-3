class List(E <:Object)
super AbstractList(E, List(E))
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Simple and powerful recursive lists
	 
Author:  Andreas Gawecki
Date:    14-Feb-1996
Version: 1.0
Updates: (Date)	  (Name)	(Description)
*)
Self = List(E)
meta ListClass(E)
{

asList :List(E)
  (* *)
{ self }

without(e :Object) :Self
  (* *)
{
  ; ### assumes _elementEqual is "=" 
  if( head = e
  then: { tail }
  else: { List.cons(head, tail.without(e)) })
}

reversed :Self
  (* *)
{ List.reverse(self) }

private

}
