class Array(E <: Object)
super Sequence(E)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Arrayed sequence with indexed access in O(1) to every element
and a fixed size.

Author:  Andreas Gawecki
Date:    13-Feb-1996
Updates: (Date)	  (Name)	(Description)
*)
meta ArrayClass(E )
{

"[]"(i :Int) :E
  (* Return the value which is stored at index i *)
builtin

size :Int
  (* *)
builtin

__basicSize :Int
  (* overwrite methods inherited from Object to call the right primitives: *)
{ size }

__basicAt(i :Int) :Object
  (* *)
{ self[i] }

__basicAtPut( :Int,  :Object) :Object
  (* *)
{
  assert({ false })
}

__deepHollowCopy(mapping: IdDictionary(Object, Object)) :Void
  (* recursively allocate hollow copies for all transitive components,
     and set mapping[original] := hollow copy.
     Helper method for componentCopy. *)
{
  ;; arrays usually do not contain components (redefined in AtArray)
  mapping[self] := __hollowCopy
}

private

}
