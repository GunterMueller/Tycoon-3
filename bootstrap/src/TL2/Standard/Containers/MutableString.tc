class MutableString
super String, MutableArray(Char)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Strings with mutable state

Author:  Andreas Gawecki
Date:    26-Feb-1996
Updates: (Date)	  (Name)	(Description)

*)
meta MutableStringClass()

{
"[]:="(i :Int, ch :Char) :Char
  (* *)
builtin

"+"(aString :String) :MutableString
  (* String concatenation *)
{
  MutableString.concat(self, aString)
}

replace(n :Int, at :Int, with :Sequence(Char), startingAt :Int) :Void
  (* Replace the elements in the range at..at+(n-1)
     with consecutive elements of 'with' in
     the range startingAt..startingAt+(n-1).
     'with' may denote the receiver, overlapping is handled correctly. *)
  builtin
{
  super.replace(n, at, with, startingAt)
}

__basicAtPut(i :Int, value :Object) :Object
  (* *)
{
  if( i==size then: {
    assert({ value = '\000' })
  } else: {
    self[i] := _typeCast(value, :Char)
  })
}

private

}
