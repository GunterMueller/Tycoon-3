class IOAccessor
super BlockingExternalMethodCaller, Resource
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Abstract Base Class for I/O 

Author:  Andreas Gawecki
Date:    05-Dec-1996
Updates: (Date)	   (Name)            (Description)
         03-Mar-99 Andre Willomat    new tycoonOS

 BlockingExternalMethodCaller (therefore Monitor) before Resource to override Resource::synchronize

*)
meta AbstractClass
{

isOpen :Bool
  (* *)
{
  _handle.isNotNil
}

private

_handle :Int
  (* an OS handle *)

_dll :TycoonOS
  (* the dll used to do the real work *)

_init :Void
  (* *)
{
  super._init
  self
}

_close :Void
  (* *)
require isOpen
{
  _handle := nil
  super._close
}

_checkReturnCode(result :Int) :Int
  (* check dll return code code: -1 means failure *)
{
  if( result < 0 then: { _ioError })
  result
  }

_ioError :Nil
  (* *)
{
  IOError.new(self, _dll).raise
}

}
