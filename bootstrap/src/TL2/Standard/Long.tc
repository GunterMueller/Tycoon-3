class Long
super Integer(Long)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

64 bit Integer values

*)
Self = Long
meta LongClass
{
_brand_Long :Void
  (* distinguish interfaces of Int and Long *)
{ }

identityHash :Int
  (* prevent overflow *)
{
  (self & Int.MAX_VALUE.asLong).asInt 
  }

printOn(out :Output) :Void
  (* *)
{
  super.printOn(out)
  out.write('L')
  }

asLong :Long
  (* *)
{self}

asInt :Int
  (* *)
{ tycoon.tycoonOS.long_asInt(self) }

asInt32 :Int32
  (* *)
deferred

asReal :Real
  (* *)
{ Real.fromLong(self) }

zero :Self
  (* *)
{Long.fromInt(0)}

one :Self
  (* *)
{Long.fromInt(1)}

ten :Self
  (* *)
{Long.fromInt(10)}

order(x :Long) :Int
  (* *)
{ tycoon.tycoonOS.long_order(self, x) }

"+"(x :Long) :Long
  (* *)
{ tycoon.tycoonOS.long_add(self, x) }

"-"(x :Long) :Long
  (* *)
{ tycoon.tycoonOS.long_sub(self, x) }

"*"(x :Long) :Long
  (* *)
{ tycoon.tycoonOS.long_mul(self, x) }

"&"(x :Long) :Long
  (* *)
{ tycoon.tycoonOS.long_and(self, x) }

"/"(x :Long) :Long
  (* *)
{
  if( x != zero
    then: {privateDiv(x)}
    else: {  ArithmeticError.new("division by zero").raise })
  }

"%"(x :Long) :Long
  (* *)
{
  if( x != zero
    then: {privateMod(x)}
    else: {  ArithmeticError.new("division by zero").raise })
  }

private

privateDiv(x :Long) :Long
  (* *)
{ tycoon.tycoonOS.long_div(self, x) }

privateMod(x :Long) :Long
  (* *)
{ tycoon.tycoonOS.long_mod(self, x) }

value :Long
  (* c slot *)

}
