class Printer
super OutputDecorator
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

Add column positions to an Output

Author: Axel Wienberg
Date: 20-Jun-1996
*)
meta PrinterClass
{
column :Int

indentation :Int
  (* the column that newlines should jump to *)

write(c :Char) :Void
  (* *)
{
  _out.write(c)
  if( c == '\n' then: {
    column := 0
    indent(indentation)
  } else: {
    if( c == '\009' then: {   ; '\t' 
      column := (column / 8 + 1) * 8
    } else: {
      column := column + 1
    })
  })
}

indent(dest :Int) :Void
  (* ensure   dest >= old column & column = dest
          | dest < old column & column = old column  *)
{
  destTab ::= dest / 8 * 8
  while({column < destTab - 1} do: {
    tab
  })
  while({column < dest} do: {
    space
  })
}

withRelIndent(relative :Int, thunk :Fun():Void) :Void
  (* *)
{
  withAbsIndent(indentation + relative, thunk)
}

withAbsIndent(absolute :Int, thunk :Fun():Void) :Void
  (* *)
{
  oldIndent ::= indentation
  indentation := absolute
  thunk[]
  indentation := oldIndent
}

private

_init :Void
  (* *)
{
  super._init 
  indentation := 0
  column := 0
  self
}

}
