class Char
super Ordered(Char)
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *

8 bit Character values (unsigned 8 bit integers)

Author:  Andreas Gawecki
Date:    19-Feb-1996
Updates: (Date)	  (Name)	(Description)
	 13-Aug-1998 Axel Wienberg more C-Struct like
*)
Self = Char
meta CharClass
{
"="(x :Object) :Bool
  (* *)
  builtin
{ ;; builtin does the same, only faster:
  super."="(x)
}

asInt :Int
  (* *)
  builtin
{ ;; builtin does the same, only faster:
  value
}

asString :String
  (* *)
{
  String.fromChar(self)
}

asMutableString :MutableString
  (* *)
{
  MutableString.fromChar(self)
}

asLowerCase :Char
  (* Answer the lower case value of the receiver
     if it is a letter, else answer the receiver. *)
{
  if( isUpperCase
    then: {(asInt + 32).asChar} ;##char syntax with ascii value?
    else: {self})
}

asUpperCase :Char
  (* Answer the upper case value of the receiver
     if it is a letter, else answer the receiver. *)
{
  if( isLowerCase
    then: {(asInt - 32).asChar}
    else: {self})
}

digitValue :Int
  (* *)
require isAlphaNumeric
{
  asInt ::= self.asInt
  if( asInt < 58
  then: { asInt - 48 }		; 0-9 
  else: { if( asInt < 97
      then: { asInt - 55 }	; A-Z 
      else: { asInt - 87 }) })	; a-z 
}

identityHash :Int
  (* *)
{
  asInt
}

isAlpha :Bool
  (* *)
{
  isLowerCase || isUpperCase
}

isAlphaNumeric :Bool
  (* *)
{
  isDigit || isAlpha
}

isDigit :Bool
  (* *)
{
  asInt > 47 && asInt < 58
}

isSpace :Bool
  (* ##All characters that have codes less than or equal to '\u0020'
     (the space character) are currently considered to be white space.
  *)
{
  asInt <= 32
}

isLetter :Bool
  (* *)
{
  isLowerCase || isUpperCase
}

isLowerCase :Bool
  (* *)
{
  asInt > 96 && asInt < 123
}

isUpperCase :Bool
  (* *)
{
  asInt > 64 && asInt < 91
}

isVowel :Bool
  (* *)
{
  "aeiouAEIOU".includes(self)
}

order(c :Char) :Int
  (* *)
{
  self.asInt - c.asInt
}

writeOn(out :Output) :Void
  (* *)
{
  out.write(self)
}

printOn(out :Output) :Void
  (* *)
{
  out.write('\'')
  printEscapeSequence(out)
  out.write('\'')
}

printEscapeSequence(out :Output) :Void
  (* *)
{
   if( asInt >= 32 && asInt < 127  then: {
     if( "\'\"\\".includes(self) then: {
       out.write('\\')
     })
     out.write(self)
   } else: {
     if( self == '\n' then: { out.writeString("\\n") }
     else: { if( self == '\t' then: { out.writeString("\\t") }
         else: { if( self == '\r' then: { out.writeString("\\r") }
             else: { if( self == '\f' then: { out.writeString("\\f") }
	         else: { out.write('\\')
		     out.write(Char.digit(asInt / 100))
		     out.write(Char.digit((asInt / 10) % 10))
		     out.write(Char.digit(asInt % 10)) })})})})
   })
}

private

value :Int
  (* unsigned char c slot *)
}
