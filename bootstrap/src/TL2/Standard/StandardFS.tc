class StandardFS
super FS
(*
 * This file is part of the Tycoon-2 system.
 *
 * The Tycoon-2 system is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (Version 2).
 *
 * The Tycoon-2 system is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with the Tycoon-2 system; see the file LICENSE.
 * If not, write to AB 4.02, Softwaresysteme, TU Hamburg-Harburg
 * D-21071 Hamburg, Germany. (http://www.sts.tu-harburg.de)
 * 
 * Copyright (c) 1996-1998 Higher-Order GmbH, Hamburg. All rights reserved.
 *
 generic filesystem implementation with some assumptions

   [ which exactly ? ]
   - equal treatment of multiple separators between arcs
   
   
   Ready to be inherited at least from POSIX and Win32 (which must override
   some hooks, see below).
   MacOS doesn't seem appropriate for this (ugly separator behavior).

   For semantics of the operations see the spec in FS.tc
   
   Author: Matthias Ernst
   Date  : 14.11.96

   17.5.99  A.Willomat: Portable filename decomposition
*)
meta AbstractClass
{
isValidPath(path: String): Bool
  (* checks whether
   - the path is short enough
   - all arcs consist of valid characters
*)
{
  result ::= true
  if( path.size > maxPathLen then: fun(): Void { result := false } else: {
    arcs ::= decomposeRaw(path)
    if( arcs[0] != nil then: {
      result := result & isValidRoot(arcs[0])
    })
    
    if( result then: {
      arcs.removeFirst
      result := arcs.all(fun(arc: String): Bool { isValidArc(arc) })
    })
  })

  result
}

isAbsolutePath(path: String): Bool
  (* *)
{
  findRoot(path) != 0
}

isRelativePath(path: String): Bool
  (* *)
{
  findRoot(path) == 0
}

rootPath :String
  (* A leading separator indicates the root *)
{ String.with1(pathArcSeparator) }

composePath(subPaths: Sequence(String)): String
  (* *)
{
  if( subPaths.isEmpty then: { "" } else: {

  first ::= true
  root: String := nil

  arcs ::= GapArray.new(5)

  subPaths.do(fun (subPath: String) {
       subArcs ::= decomposeRaw(subPath)

       if( subArcs[0] != nil then: {
       ; the first subpath may be absolute and its root is preserved 
	   if( first then: {
	       first := false
	       root := subArcs[0]
	   } else: {
	     FSError.new("Absolute path in composePath: "+subPath).raise
	   })
       })

       arcs.addSubSequence(subArcs, 1, subArcs.size - 1)

       })

  withSep ::= arcs.inject("", fun(path: String, arc: String): String {
  		       if( arc != currentPath then: {
			   path + pathArcSeparatorString + arc
		       } else: {
		           path
		       })
		   })
  ; if non-empty, has a leading pathArcSeparator 

  if( withSep != "" then: {
    if( root == nil then: { root := currentPath + pathArcSeparatorString })
    root + withSep.subString( 1, withSep.size - 1)
  } else: {
    if( root == nil then: { root := currentPath })
    root
  })
})
}

decomposePath(path: String): Reader(String)
  (* *)
{
  fromRaw(decomposeRaw(path))
}

extendPath(path: String, extension: String): String
  (* *)
{
  arcs ::= decomposeRaw(path)

  if( arcs.size == 1 || arcs[arcs.size-1].size == 0 then: {
    FSError.new("Can\'t extend empty arc: "+path).raise
  })

  arcs[arcs.size-1] := arcs[arcs.size-1] + pathExtenderString + extension

  if( arcs[0] == nil then: {arcs.removeFirst})
  composePath(arcs)
}

pathExtension(path: String): String
  (* *)
{
  result ::= ""
  arcs ::= decomposeRaw(path)

  if( arcs.size == 1 then: {
    result := nil
  } else: {
    last ::= arcs[arcs.size-1]

    extSep ::= last.locateLast(pathExtender)
    if( extSep == nil ||  extSep == 0  then: {
      result := nil
    } else: {
      result := last.subString( extSep+1, last.size - extSep - 1)
    })
  })

  result
}

replaceExtension(path: String, extension: String): String
  (* *)
{
  extendPath(pathBase(path), extension)
}

pathBase(path: String): String
  (* *)
{
  arcs ::= decomposeRaw(path)

  if( arcs.size > 1 then: {
    last ::= arcs[arcs.size-1]

    extSep ::= last.locateLast(pathExtender)
    if( extSep == nil || extSep == 0 then: {
      FSError.new("pathBase: no extension: "+path).raise
    } else: {
      arcs[arcs.size-1] := last.subString( 0, extSep)
      nil
    })
  })

  if( arcs[0] == nil then: {arcs.removeFirst})
  composePath(arcs)
}

lastArc(path: String): String
  (* *)
{
  arcs ::= decomposeRaw(path)

  last ::= arcs.size - 1
  while({ last >= 0 &&  arcs[last] = "" } do: {
    last := last - 1
  })
  
  if( last == 0 &&  arcs[0] == nil  then: {
    currentPath
  } else: {
    arcs[last]
  })
}

pathPrefix(path: String): String
  (* *)
{
  arcs ::= decomposeRaw(path)
  while({ arcs.size > 0 &&  arcs[arcs.size-1] = "" } do: {
	  arcs.removeLast
  })

  if( arcs.size == 1 then: { FSError.new("pathPrefix: no Prefix: "+path).raise })

  arcs.removeLast
  if( arcs[0]==nil then: {arcs.removeFirst})
  composePath(arcs)
}

relativePath(from: String, to: String): String
  (* *)
{
  fromArcs ::= decomposeRaw(realPath(from))
  toArcs   ::= decomposeRaw(realPath(to))

  ; both paths must be absolute ... 
  if( fromArcs[0] == nil || toArcs[0] == nil then: {
    FSError.new("relativePath: Must be absolute paths: "+from+", "+to).raise
  })

  ; ... and have the same root 
  if( fromArcs[0] != toArcs[0] then: {
    FSError.new("relativePath: different roots: "+from+", "+to).raise
  })
  
  ; eliminate common prefix 
  while( { fromArcs.size>0 && toArcs.size > 0 && fromArcs[0] = toArcs[0] } do: {
    fromArcs.removeFirst
    toArcs.removeFirst
  })

  ; go as far up as needed 
  fromArcs.do(fun(arc: String) {
    if( arc != "" then: { toArcs.addFirst(parentPath) })
  })

  if( toArcs.size > 0 &&  toArcs[0] == nil  then: { toArcs.removeFirst })
  composePath(toArcs)
}

private

locateNextSeparator(path: String, start :Int): Int
  (* we have to recognize various separator locators *)
{
  res1 ::= path.locate1('\\', start)
  res2 ::= path.locate1('/' , start)
  if( (res1 == nil) || (res2 != nil && res2 < res1)
    then: { res2 }
    else: { res1 })
}

decomposeRaw(path: String): GapArray(String)
  (* element[0]: root or nil
     empty arcs possible
     especially, "" -> [nil]

     Because of persistent filnames of various operating
     systems we have to respect all available pathArcSaparators
   *)
{
  result: GapArray(String) := GapArray(:String).new(3)

  start ::= findRoot(path)
  if( start > 0 then: {
    result.add(path.subString( 0, start))
  } else: {
    result.add(nil)
  })

  if( start < path.size then: {
    sep ::= locateNextSeparator(path, start)
    while({sep != nil} do: {
      arc ::= path.subString( start, sep-start)
      result.add(arc)

      start := sep+1
      sep := locateNextSeparator(path, start)
    })

    lastArc ::= path.subString( start, path.size - start)
    result.add(lastArc)
  })

  result
}

fromRaw(arcs: GapArray(String)): Reader(String)
  (* path from a decomposeRaw'd one *)
{
  if( arcs[0] == nil then: {
    arcs[0] := currentPath
  })

  empty ::= arcs.keys.detect(fun(index: Int): Bool { arcs[index].size == 0 })
  while({empty != nil} do: {
    arcs.removeKey(empty)
    empty := arcs.keys.detect(fun(index: Int): Bool { arcs[index].size == 0 })
  })

  arcs.reader
}

pathArcSeparatorString: String
  (* *)
{ String.with1(pathArcSeparator) }

pathExtenderString: String
  (* *)
{ String.with1(pathExtender) }

findRoot(path: String): Int
  (* the length of the root prefix *)
deferred

isValidArc(arc: String): Bool
  (* is this a valid arc (including empty ones) *)
deferred

isValidRoot(root: String): Bool
  (* is this a valid root *)
deferred

}
